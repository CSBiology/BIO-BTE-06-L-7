[{"uri":"/BIO-BTE-06-L-7/JP00_Systems_Biology_FSharp_Introduction.html","title":"Systems Biology\n","content":"(**\n# Systems Biology\n\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/CSBiology/BIO-BTE-06-L-7/gh-pages?filepath=JP00_Systems_Biology_FSharp_Introduction.ipynb)\n\n\nThis notebook introduces the field of Systems Biology and explains why programming is a necessary skill to it. You will get a short introduction to the programming language F# and some links to resource for further studies.\n\n1. [Systems Biology: A brief introduction](#Systems-Biology-A-brief-introduction)\n2. [Starting with FSharp](#Starting-with-FSharp)\u003Cbr\u003E\n    1. [Functions](#Functions)\u003Cbr\u003E\n    2. [Binding function values and simple values](#Binding-function-values-and-simple-values)\u003Cbr\u003E\n        1. [Side note: Lambda expressions](#Side-note:-Lambda-expressions)\u003Cbr\u003E\n    3. [Simple values](#Simple-values)\n    4. [Lists \u0026 Arrays](#Lists-\u0026-Arrays)\n    5. [Higher-order functions](#Higher-order-functions)\n        1. [Side Note: Pipe-forward operator |\u003E](#Side-Note:-Pipe-forward-operator-|\u003E)\n    6. [Control flow expressions](#Control-flow-expressions)\n        1. [if-then-else](#if-then-else)\n        2. [Pattern Matching](#Pattern-Matching)\n    7. [Complex Data Types](#Complex-Data-Types)\n        1. [Tuples](#Tuples)\n        2. [Record Types](#Record-Types)\n    8. [Code organization](#Code-organization)\n        1. [Namespaces and modules](#Namespaces-and-modules)\n        2. [Comments](#Comments)\n3. [References](#References)\n\n## Systems Biology: A brief introduction\n\n\u003Cdiv class=\u0022columns\u0022\u003E\n\u003Cdiv class=\u0022column is-8\u0022\u003E\nThe term \u201Csystems theory\u201D was introduced by the biologist L. von Bertalanffy. He defined a system as a set of related components that work together in a particular environment to perform whatever functions are required to achieve the system\u0027s objective\u003Csup\u003E\u003Ca href=\u0022#1\u0022 id=\u0022ref1\u0022\u003E1\u003C/a\u003E\u003C/sup\u003E. The hierarchical organization orchestrating the interaction of thousands of molecules with individual properties allows complex biological functions. Biological processes like cell division, biomass production, or a systemic response to perturbations are molecular physiological functions which result from a complex dynamic interplay between genes, proteins and metabolites (\u003Ca href=\u0022#figure1\u0022\u003EFigure 1\u003C/a\u003E). To gain a holistic understanding of a biological system, all parts of the system need to be studied simultaneously by quantitative measures\u003Csup\u003E\u003Ca id=\u0022ref2\u0022 href=\u0022#2\u0022\u003E2\u003C/a\u003E\u003C/sup\u003E. The focus on a system-wide perspective lies on the quantitative understanding of the organizational structure, functional state, robustness and dynamics of a biological system and led to the coining of the term \u201CSystems Biology\u201D\u003Csup\u003E\u003Ca href=\u0022#3\u0022\u003E3\u003C/a\u003E\u003C/sup\u003E.\n\nThe current challenges of Systems Biology approaches are mainly along four lines\u003Csup\u003E\u003Ca href=\u0022#2\u0022\u003E2\u003C/a\u003E,\u003Ca href=\u0022#4\u0022\u003E4\u003C/a\u003E\u003C/sup\u003E: \n\n - (**i**) - system-wide quantification of transcriptome, proteome (including protein modifications) and metabolome\n \n - (**ii**) - identification of physical interactions between these components\n \n - (**iii**) - inference of structure, type and quantity of found interactions\n \n - (**iv**) - analysis and integration of the resulting large amounts of heterogeneous data. It becomes obvious that an interdisciplinary effort is needed to resolve these challenges in Systems Biology\u003Csup\u003E\u003Ca href=\u0022#5\u0022\u003E5\u003C/a\u003E\u003C/sup\u003E. Here Biology dictates which analytical, experimental and computational methods are required.\n\nModern analytical methods to measure the identity and quantity of biomolecules system-wide, summarized under the term \u201Cquantitative omics\u201D-technologies, address the first two mentioned challenges of Systems Biology. Among these \u201Comics\u201D-technologies are transcriptomics based on microarrays/next generation sequencing and proteomics/metabolomics based on mass-spectrometry.\n\nTying in with the area of genome sequencing, the focus is set on the accurate profiling of gene/protein expression and metabolite concentrations, as well as on the determination of biological protein modifications and of physical interactions between proteins.\n\nAddressing the abovementioned challenges three and four of Systems Biology, the development of numerous computational approaches reaches out to unravel the intrinsic complexity of biological systems\u003Csup\u003E\u003Ca href=\u0022#6\u0022\u003E6\u003C/a\u003E\u003C/sup\u003E. These computational approaches focus on knowledge discovery and on in silico simulation or modeling\u003Csup\u003E\u003Ca href=\u0022#7\u0022\u003E7\u003C/a\u003E\u003C/sup\u003E. In the latter approach knowledge on a biological process is converted into a mathematical model. In silico simulations based on such a model can provide predictions that may subsequently be tested experimentally. Computation-based knowledge discovery (also known as data mining) aims to extract hidden patterns from complex and high-dimensional data to generate hypotheses. Therefore, the first step is to describe information on a biological system such that it is sustainably stored in a format rendering it readable and manipulable for machines and humans. The second step is to integrate the huge amount of differently structured data, often referred to as the \u201Cbig data\u201D challenge. In a last step, statistical or machine learning methods are applied to extract the information or underlying principles hidden in the data.\n\nThe most flexible way of working with huge amounts of data is using a lightweight programming language with a succinct syntax. Therefore, it becomes necessary that biologist become familiar with a suitable programming language to solve real world problems in (Systems) Biology.\n\u003C/div\u003E\n\u003Cdiv class=\u0022column is-4\u0022\u003E\n![](img/OmicSpace.png)\n\u003Cb\u003EFigure 1: A conceptual view of the omic space.\u003C/b\u003E The omics space comprises of genomic, transcriptomic, proteomic, metabolomic and phenomic systems level represented as a plane. Complex biological function is the result of the interplay between molecules of one and/or different systems level.\n\u003C/div\u003E\n\u003C/div\u003E\n\n## Starting with FSharp\n\n\nF# (pronounced \u201CF Sharp\u201D) is a simple and expressive programming language. It can be described as statically typed impure functional language that supports functional, imperative and object-oriented paradigm and also several other programming styles including data-driven, event-driven and parallel programming. This makes it an excellent tool for introducing programming as well as programming paradigms.\n\nF# is supported by the \u003Ca href=\u0022http://fsharp.org\u0022\u003EF# Software Foundation\u003C/a\u003E and a worldwide community of contributors. Microsoft and other companies develop professional tooling for F#. The \u003Ca href=\u0022https://docs.microsoft.com/en-us/dotnet/articles/fsharp/\u0022\u003EF# Language Reference\u003C/a\u003E is a reference for the F# language, and the \u003Ca href=\u0022https://docs.microsoft.com/en-us/dotnet/articles/fsharp/\u0022\u003EF# Guide\u003C/a\u003E covers general topics. There are lots of excellent \u003Ca href=\u0022http://fsharp.org/learn.html\u0022\u003EF# learning resources\u003C/a\u003E available online.\n   \nTo learn more about how to use Jupyter notebooks, see the [Jupyter documentation](http://jupyter-notebook.readthedocs.io/) and the [Jupyter keyboard shortcuts](https://www.cheatography.com/weidadeyue/cheat-sheets/jupyter-notebook/). You can find more information baoutthe F# and Jupyter tooling locally using \u003Ca href=\u0022https://github.com/fsprojects/IfSharp\u0022\u003EIfSharp\u003C/a\u003E.\n  \nWith the help of the following FSharp coding information/examples, you will be able to solve all exercises in \u003Ca href=\u0022JP01_FSharpExcercises.ipynb\u0022 style=\u0022color: orange\u0022\u003EJP01_FsharpExcercises\u003C/a\u003E!\n   \nLet\u0027s start with our basic introduction:\n\n## Functions\n\nThe impetus behind functional programming comes from mathematics. Mathematical functions have a number of very nice features that functional languages try to emulate in the real world.\nSo first, let\u2019s start with a mathematical function that adds 1 to a number.\n\n\u0060\u0060\u0060\nAdd1(x) = x\u002B1\n\u0060\u0060\u0060\n\nWhat does this really mean? Well it seems pretty straightforward. It means that there is an operation that starts with a number, and adds one to it.\n   \n**Let\u2019s introduce some terminology:**\n\n - The set of values that can be used as input to the function is called the domain. In this case, it could be the set of real numbers, but to make life simpler for now, let\u2019s restrict it to integers only.\n\n - The set of possible output values from the function is called the range (technically, the image on the codomain). In this case, it is also the set of integers.\n\n - The function is said to map the domain to the range.\n\nA diagram of a general function would be:\n\n![](img/function.png)\n\n\u003Cb\u003EFigure 2: diagram of a general function\u003C/b\u003E\n\n## Binding function values and simple values\n\nThe process of using a name to represent a function or a value is called \u201Cbinding\u201C. A binding is done by using the \u0060let\u0060 keyword in F#. Let\u2019s look at the simple function we used previously:\n\n*)\n\nlet add1 x = x \u002B 1\n// evaluate\nadd1\n\n(**\n\u0060\u0060\u0060\nval add1: \n   x: int \n   -\u003E int\n\u0060\u0060\u0060\n\nWhat does the \u201Cx\u201D mean here? It means:\n\n - Accept some value from the input domain.\n\n - Use the name \u201Dx\u201D to represent that value so that we can refer to it later. The name \u201Cx\u201D is \u0022bound\u0022 to the input value. So if we evaluate the function with the input 5 say, what is happening is that everywhere we see \u201Cx\u201D in the original definition, we replace it with \u201C5\u201D, sort of like search and replace in a word processor\n\n*)\n\nadd1 5\n// replace \u0022x\u0022 with \u00225\u0022\n// add1 5 = 5 \u002B 1 = 6\n// result is 6\n\n(***include-it***)\n\n(**\nIf you think about this a bit more, you will see that the name \u0060add1\u0060 itself is just a binding to _the function that adds one to its input_. \nThe function itself is independent of the name it is bound to. When you type let \u0060add1\u0060 x = x \u002B 1 you are telling the F# compiler \u201Cevery time you see the name add1, \nreplace it with _the function that adds one to its input_\u201D. \u0060add1\u0060 is called a function value. To see that the function is independent of its name, try:\n*)\n\nlet plus1 = add1\nadd1 5 = plus1 5\n\n(***include-it***)\n\n(**\nYou can see that \u0060add1\u0060 and \u0060plus1\u0060 are two names that refer (\u0022bound to\u0022) to the same function. You can always identify a function value because its signature has the standard form domain -\u003E range. \nHere is a generic function value signature:\n\n\u0060\u0060\u0060\nval functionName : domain -\u003E range\n\u0060\u0060\u0060\n\nSide note: Lambda expressions\n\nIn F# it is possible to use function without giving them a name and use the keyword \u0060fun\u0060 instead and the \u0060=\u0060 becomes \u0060-\u003E\u0060. \nThis is called anonymous function, or - referring to lambda calculus - **lambda expression**. This kind of functions are often used for convenience. To write \u0060add1\u0060 as lambda expression:\n*)\n\nfun x -\u003E x \u002B 1\n\n(**\n## Simple values\n\n![](img/valueBinding.png)\n      \nImagine an operation that always returned the integer 5 and didn\u2019t have any input.\n   \nThis would be a \u201Cconstant\u201D operation.\nHow would we write this in F#? We want to tell the F# compiler \u201Cevery time you see the name c, replace it with 5\u201D. Here\u2019s how:\n*)\n\nlet c = 5\n// evaluate\nc\n\n(***include-it***)\n\n(**\nThere is no mapping arrow this time, just a single int. What\u2019s new is an equals sign with the actual value printed after it. The F# compiler knows that this binding has a known value which it will always return, namely the value 5.\nIn other words, we\u2019ve just defined a constant, or in F# terms, a simple value.\n\n## Lists \u0026 Arrays\n\nSquare brackets \u0060[]\u0060 create a list with semicolon \u0060;\u0060 delimiters.\n*)\n\nlet twoToFive = [2; 3; 4; 5]\ntwoToFive\n\n(***include-it***)\n\n(**\n\u0060::\u0060 creates a list with a new element appended to the front of the list.\n*)\n\nlet oneToFive = 1::twoToFive\noneToFive\n\n(***include-it***)\n\n(**\nSquare brackets with dashes \u0060[||]\u0060 create an array with semicolon \u0060;\u0060 delimiters.\n*)\n\nlet oneToFour = [|1; 2; 3; 4|]\n\n(**\nElements can be accessed using dot \u0060.[i]\u0060, where i is the (zero-based) index of the desired element\n*)\n\noneToFour.[0]\n\n(***include-it***)\n\n(**\n_Note_: commas are **never** used as delimiters in collection types, only semicolons!\n\n## Higher-order functions\n\n\u003Cdiv class=\u0022columns\u0022\u003E\n\u003Cdiv class=\u0022column is-8\u0022\u003E\nA higher-order function is a function that takes another function as a parameter. \nThis is simple, but leads to one of the most important concepts of functional programming: The conceptual operation: \u003Cstrong\u003Emap\u003C/strong\u003E\n\nThe higher-order and polytypic function \u0060map\u0060 applies a function working on the normal space to an elevated space.\nThis concept is so important that all collection types (lists, arrays, ...) have a build in \u0060map\u0060 function. \nLet\u0027s look at an example of what that means. Therefore, we first define a function working on the normal space:\n\u003C/div\u003E\n\u003Cdiv class=\u0022column is-4\u0022\u003E\n![](img/map.png)\n\u003Cb\u003EFigure 3: A conceptual view of the \u0060map\u0060 concept.\u003C/b\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n*)\n\nlet square x = x * x\n// evaluate\nsquare 3\n\n(***include-it***)\n\n(**\nNow, let\u0027s apply this function to every number in a list.\n*)\n\nList.map square [3;2;6;7]\n\n(***include-it***)\n\n(**\nBe aware, that this concept of mapping is restricted to the actual function called \u0060map\u0060. A \u0060filter\u0060 function, for example, is also the same kind of operation.\n*)\n\nlet evens list =\n   let isEven x = x%2 = 0\n   List.filter isEven list \n   \n//isEven 5      // the value or constructor isEven is not defined. .. this is because it is only defined inside \n                // of the functional scope of \u0060evens\u0060.\n\n(**\nAdditionaly, you can see in this example how to define a multiline function. Just use indents! No \u0060;\u0060 needed.\nDefine \u0060isEven\u0060 as an inner (\u0022nested\u0022) function. In this case the function \u0060isEven\u0060 is defined in the scope of the function \u0060evens\u0060. It cannot be accessed outside of this scope.\n\u0060List.filter\u0060 is a library function with two parameters: a \u0060predicate\u0060 function, returning \u0060true\u0060 or \u0060false\u0060 depending on the input - and a \u0060list\u0060 to work on.\n*)\n\nevens [1..5]\n\n(***include-it***)\n\n(**\nYou can use \u0060()\u0060 to clarify precedence (think brackets in math). In this example, do \u0060List.map\u0060 first, with two parameters. Then do \u0060List.sum\u0060 on the result. \u0060List.map\u0060 applies a function to all elements in the list.\n*)\n\nlet sumOfSquaresTo100 =\n   List.sum (List.map square [1..100])\n\nsumOfSquaresTo100\n\n(***include-it***)\n\n(**\nWithout the \u0060()\u0060, \u0060List.map\u0060 would be passed as an parameter to \u0060List.sum\u0060.\n\n## Side Note: Pipe-forward operator \u0060|\u003E\u0060\n\nThe Pipe-forward operator lets you pass an intermediate result (value) onto the next function, it\u2019s defined as: \n\n*)\n\nlet (|\u003E) x f = f x \n\n(**\n\nNow, you can pipe the output of one operation to the next using \u0060|\u003E\u0060.\nHere is the same \u0060sumOfSquares\u0060 function written using pipes.\n\n*)\n\nlet sumOfSquaresTo100piped =\n   [1..100] \n   |\u003E List.map square \n   |\u003E List.sum\n\nsumOfSquaresTo100piped\n\n(***include-it***)\n\n(**\nIn this case one often uses anonymous functions using the \u0060fun\u0060 keyword. This saves time to think about a name and the function can be writen inline.\n*)\n\nlet sumOfSquaresTo100withFun =\n   [1..100] \n   |\u003E List.map (fun x -\u003E x * x) \n   |\u003E List.sum\n   \nsumOfSquaresTo100withFun\n\n(***include-it***)\n\n(**\n\u003Cdiv class=\u0022columns\u0022\u003E\n\u003Cdiv class=\u0022column is-8\u0022\u003E\n\nYou already used the \u0060List.sum\u0060 function. It is important to notice that this function doesn\u2019t follow the \u0060map\u0060 concept. There is a second related concept called \u0060fold\u0060.  The higher-order and polytypic function \u0060fold\u0060 applies a function working on the normal space to an elevated space and reduces the elevated space into the normal space. This results in an aggregation. A simple but concreate example would be to sum a list of numeric values.\n\n\u003C/div\u003E\n\u003Cdiv class=\u0022column is-4\u0022\u003E\n\n![](img/fold.png)\n\n\u003Cb\u003EFigure 4: A conceptual view of the \u0060fold\u0060 concept.\u003C/b\u003E\n\n\u003C/div\u003E\n\u003C/div\u003E\n\n## Control flow expressions\n\nControl flow expressions are used to determine the program pathing under multiple possible conditions. These different paths must always lead to the same \u0060Type\u0060 (e.g. \u0060string\u0060).\n\n### if-then-else\n\n\u0060if-then-else\u0060 is an expression and must return a value of a particular type.\nIt evaluates to a different value depending on the \u0060boolean\u0060 expression given.\n\nBoth branches must return the same type!\n\n*)\n\nlet v = if true then \u0022a\u0022 else \u0022b\u0022\nv\n\n(***include-it***)\n\n(**\n\n### Pattern Matching\n\nPattern matchings are one method to apply these control flow expressions. These function similiar to the \u003Ca href=\u0022#if-then-else\u0022\u003Eif then else\u003C/a\u003E expression, but much more powerful.\n\n*)\n\nlet simplePatternMatch x =\n   match x with\n    | \u0022a\u0022 -\u003E printfn \u0022input is a\u0022\n    | \u0022b\u0022 -\u003E printfn \u0022input is b\u0022\n    | _   -\u003E printfn \u0022input is something else\u0022\n\n(**\n\u003Cdiv Style=\u0022text-align: justify ; font-size: 1.8rem ; margin-top: 2rem ; line-height: 1.5\u0022\u003E\n    Underscore \u0060_\u0060 matches anything\n\u003C/div\u003E\n*)\n\nsimplePatternMatch \u0022a\u0022 \n\n(***include-output***)\n\nsimplePatternMatch \u0022I will not match\u0022\n\n(***include-output***)\n\n(**\nIn the following we will use a \u0060printfn\u0060 function. Normally in FSharp only the last output is returned, but side effects, can always be returned. As a rule of thumb: All Unit outputs are side effects. \u003Cbr\u003E\nIn this case, this means, we will print the result and still can keep working with the output.\nAlso you will notice, that the last output is only \u0060f (1=3)\u0060 -\u003E \u0022b\u0022, but we still will get all other results, as we print them below.\n*)\n\nlet f x = \n    if x then \n        printfn \u0022a\u0022;\n        \u0022a\u0022 \n    else\n        printfn \u0022b\u0022\n        \u0022b\u0022\n\nf false\n\n(***include-it***)\n\nf true\n\n(***include-it***)\n\nf (1=1)\n\n(***include-it***)\n\nf (1=3)\n\n(***include-it***)\n\n(**\n## Complex Data Types\n\n### Tuples\n\nTuple types are pairs, triples, and so on of values.\n\nTuples use commas \u0060,\u0060 as delimiter.\n\n*)\n\nlet twoTuple = 1,2\ntwoTuple\n\n(***include-it***)\n\nlet threeTuple = \u0022a\u0022,2,true\nthreeTuple\n\n(***include-it***)\n\n(**\n### Record Types\n\nRecord types have named fields. They use Semicolons \u0060;\u0060 as separators.\n\n*)\n\ntype Person = {FirstName:string; LastName:string}\n\nlet person1 = {FirstName = \u0022John\u0022; LastName = \u0022Doe\u0022}\nperson1\n\n(***include-it***)\n\n(**\nField of a record type can be acessed individually with a dot \u0060.Name\u0060\n*)\n\nperson1.FirstName\n\n(***include-it***)\n\n(**\n## Code organization\n\nSometimes it can be necessary to organize code for example to ship a library to other users. Namespaces und Modules are top-level and low-level constructs to organize code. \n\n### Namespaces and modules\n\nYou can think of namespaces and modules as containers and sub containers, respectively, in which you can put function and type definitions. The hierarchy is defined that you can have multiple modules in one namespace, also nested modules in a module, but no namespace in another namespace. You can acces namespaces and modules with the \u0060.\u0060 operator.\n\n*)\n\n//Module \u201Ccontainer\u201D \nmodule WidgetsModule =\n    let widgetName = \u0022FSharp\u0022\n    let widgetFunction x y =\n        sprintf \u0022%s %s\u0022 x y\n        // printfn \u0022%s %s\u0022 x y\n\n// Calls the function from the module\nWidgetsModule.widgetFunction \u0022Hello\u0022 WidgetsModule.widgetName\n\n(***include-it***)\n\n(**\n### Comments\n\nComments also help to write organized code.\n\n**Comments are text written in code area (often marked green) which will be ignored by the compiler and not be executed.**\n\n\u0060//\u0060 single line comments use a double slash\n\n(* multi-line or in-line comments use \u0060(* . . . *)\u0060 pair -end of multi line comment- *)\n\n*)\n\ntype PersonalInformation =\n    {\n        //First name of a person\n        FirstName  :string\n        //Last name of a person\n        LastName   :string\n        (*Address and\n        phone number of a person*)\n        Address    : (*int*) string\n        PhoneNumber: int\n    }\n\n(**\n\u003Cnav class=\u0022level is-mobile\u0022\u003E\n    \u003Cdiv class=\u0022level-left\u0022\u003E\n    \u003C/div\u003E\n    \u003Cdiv class=\u0022level-right\u0022\u003E\n        \u003Cdiv class=\u0022level-item\u0022\u003E\n            \u003Cbutton class=\u0022button is-primary is-outlined\u0022 onclick=\u0022location.href=\u0027/JP01_FSharpExcercises.html\u0027;\u0022\u003EJP01 \u0026#187;\u003C/button\u003E\n        \u003C/div\u003E\n    \u003C/div\u003E\n\u003C/nav\u003E\n*)\n\n(**\n\n## References\n\n\u003Col\u003E\n\u003Cli Id=\u00221\u0022\u003E Bertalanffy, L. von. Zu einer allgemeinen Systemlehre. Bl\u00E4tter f\u00FCr deutsche Philosophie 18 (1945).\u003C/li\u003E\n\n\u003Cli Id=\u00222\u0022\u003E Sauer, U., Heinemann, M. \u0026 Zamboni, N. Genetics. Getting closer to the whole picture. Science 316, 550\u2013551; 10.1126/science.1142502 (2007).\u003C/li\u003E\n\n\u003Cli Id=\u00223\u0022\u003E Kitano, H. Systems biology. a brief overview. Science 295, 1662\u20131664; 10.1126/science.1069492 (2002).\u003C/li\u003E\n\n\u003Cli Id=\u00224\u0022\u003E Joyce, A. R. \u0026 Palsson, B. O. The model organism as a system. integrating \u0027omics\u0027 data sets. Nat Rev Mol Cell Bio 7, 198\u2013210; 10.1038/Nrm1857 (2006).\u003C/li\u003E\n\n\u003Cli Id=\u00225\u0022\u003E Aderem, A. Systems biology. Its practice and challenges. Cell 121, 511\u2013513; 10.1016/j.cell.2005.04.020 (2005).\u003C/li\u003E\n\n\u003Cli Id=\u00226\u0022\u003E Kahlem, P. \u0026 Birney, E. Dry work in a wet world. computation in systems biology. Mol Syst Biol 2 (2006).\u003C/li\u003E\n\n\u003Cli Id=\u00227\u0022\u003E Kitano, H. Computational systems biology. Nature 420, 206\u2013210; 10.1038/nature01254 (2002). \u003C/li\u003E\n\u003C/ol\u003E\n*)"},{"uri":"/BIO-BTE-06-L-7/index.html","title":"The fslab documentation template\n","content":"(**\n# The fslab documentation template\n\nThis template scaffolds the necessary folder structure for FSharp.Formatting \nand adds custom styles in the **fslab** theme. \n\nThe provided stylesheet was compiled from sass (before uploading the nuget package) and\nuses the [Bulma](https://bulma.io/) CSS framework instead of bootstrap which is used by FSharp.Formatting per default.\n\n#### Table of contents \n\n- [Installation](#Installation)\n- [Usage](#Usage)\n- [Quick content rundown](#Quick-content-rundown)\n- [Creating new content](#Creating-new-content)\n- [Customization options](#Customization-options)\n    - [Style sheet options](#Style-sheet-options)\n    - [Inclusion of sample content](#Inclusion-of-sample-content)\n    - [Create notebooks](#Create-notebooks)\n\n\n## Installation\n\nThis template is available as a _dotnet new_ template (from [nuget](https://www.nuget.org/packages/FsLab.DocumentationTemplate/)):\n\n\u0060\u0060\u0060no-highlight\ndotnet new -i FsLab.DocumentationTemplate\n\u0060\u0060\u0060\n\n## Usage\n\nIf not already present, create a _local tool manifest_ in the root of your project that you want to write documentation for:\n\n\u0060\u0060\u0060no-highlight\ndotnet new tool-manifest\n\u0060\u0060\u0060\n\nThen, still in the root of your project, run:\n\n\u0060\u0060\u0060no-highlight\ndotnet new fslab-docs\n\u0060\u0060\u0060\n\n## Quick content rundown:\n\nThe default template initializes the following folder structure when you initialize it in the root of your project.\n\nSee [further below](#Customization-options) for command line customization options of the template.\n\n\u003Cpre\u003E\ndocs\n\u2502   index.fsx\n\u2502   _template.html\n|   _template.ipynb\n|   \n\u2502   0_Markdown-Cheatsheet.md\n\u2502   1_fsharp-code-example.fsx\n\u2502   2_inline-references.fsx\n\u2502   3_notebooks.fsx\n|\n\u251C\u2500\u2500\u2500content\n\u2502   fsdocs-custom.css\n\u2502\n\u251C\u2500\u2500\u2500img\n\u2502       favicon.ico\n\u2502       logo.png\n\u2502\n\u2514\u2500\u2500\u2500reference\n        _template.html\n\u003C/pre\u003E\n\n- \u0060index.fsx\u0060 is the file you are reading just now. It contains the very content you are reading at the moment \nin a markdown block indicated by \u0060(** *)\u0060 guards. It will be rendered as the root \u0060index.html\u0060 file of your documentation.\n\n- \u0060_template.html\u0060 is the root html scaffold (sidebar to the left, script and style loading) where all of the individual docs will be injected into\n\n- \u00600_Markdown-Cheatsheet.md\u0060 is a adaption of [this markdown cheat sheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) that shows how to write markdown and showcases the rendered equivalents. It can also be viewed in all its glory [here](https://fslab.org/docs-template/0_Markdown-Cheatsheet.html).\n\n- \u00601_fsharp-code-example.fsx\u0060 is a script file that showcases the syntax highlighting style for F# snippets. It can also be viewed in all its glory [here](https://fslab.org/docs-template/1_fsharp-code-example.html).\n\n- \u00602_inline-references.fsx\u0060 is a script file that explains how to use inline references and use Plotly.NET for charting. It can also be viewed in all its glory [here](https://fslab.org/docs-template/2_inline-references.html).\n\n- \u00603_notebooks.fsx\u0060 is a script file that showcases conditional content in documentation and how to use that to create dotnet interactive notebooks besides your html documentation. It can also be viewed in all its glory [here](https://fslab.org/docs-template/3_notebooks.html).\n\n- \u0060fsdocs-custom.css\u0060 contains the custom styling that applies the fslab styles.\n\n - the \u0060img\u0060 folder contains the fslab logo and favicon. replace these files (with the same names) to youse sours\n\n - \u0060reference/_template.html\u0060 is a slightly adapted version of the template above for the API documentation\n\n## Creating new content\n\n- run \u0060dotnet fsdocs watch --eval\u0060 to spawn a watcher and dev server that hosts your docs on http://localhost:8901/ (You currently will still have to refresh the page when you make changes to files)\n\n- add a new .md or .fsx file to the \u0060content\u0060 directory (or into a new subdirectory there)\n\n- the sidebar title for the document will be either the file name or, if existent, the first level 1 header in the file\n\n- when writing a .fsx file, code will automatically become syntax-highlighted code snippets. \n\n- use \u0060(** \u003Cmarkdown here\u003E *)\u0060 to guard markdown sections in .fsx files\n\n- use \u0060(*** include-value:\u003Cval name\u003E ***)\u0060 to include the value of a binding\n\n- use \u0060(*** include-it ***)\u0060 to include the evaluation of the previous snippet block \n\nFor more info please refer to the [FSharp.Formatting documentation](http://fsprojects.github.io/FSharp.Formatting/).\n\n\n## Customization options\n\n### Style sheet options\n\n\u0060\u0060\u0060no-highlight\n-s|--styles             Set the type of style content the template will initialize. For the sass file to work, you will have to download bulma\n\n        all             - sass file, compiled csss, and minified css\n\n        sass            - only include the sass file\n\n        minified        - only include the minified css file\n\n        css             - only include the compiled css file\n\n        Default:        css\n\u0060\u0060\u0060\n\n### Inclusion of sample content\n\n\u0060\u0060\u0060no-highlight\n-is|--include-samples   wether to include sample files in the generated content\n\n        bool            - Optional\n\n        Default:        true\n\u0060\u0060\u0060\n\n### Create notebooks\n\n\u0060\u0060\u0060no-highlight\n-in|--include-notebooks  wether to include the notebook template file\n        \n        bool            - Optional\n\n        Default:        true\n\u0060\u0060\u0060\n\n*)\n"},{"uri":"/BIO-BTE-06-L-7/JP01_FSharpExcercises.html","title":"FSharp Introduction Excercises\n","content":"(** \nThis notebook contains introductional excercises for the FSharp programming language and also some small code examples for correct formatting.\nIf you have questions at any point please ask us. We will discuss the first batch (task 1-6) before you can start the rest.\n\n# FSharp Introduction Excercises\n\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/CSBiology/BIO-BTE-06-L-7/gh-pages?filepath=JP01_FSharpExcercises.ipynb)\n\n\n1. [Code Examples](#Code-Examples)\n2. [Excercises](#Excercises)\n    * [Task 1](#Task-1)\n    * [Task 2](#Task-2)\n    * [Task 3](#Task-3)\n    * [Task 4](#Task-4)\n    * [Task 5](#Task-5)\n    * [Task 6](#Task-6)\n    * [Task 7](#Task-7)\n    * [Task 8](#Task-8)\n    * [Task 9](#Task-9)\n    * [Task 10](#Task-10)\n    * [Task 11](#Task-11)\n\n\u003Chr\u003E\n\n## Code Examples\n\u003Ca href=\u0022#FSharp-Introduction-Excercises\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n\n\nWe will beginn with some minor code examples to show you correct formatting. You can even use these examples to help you understand minor programming logics for your excercises below.\n\n*)\n\n// Define a function \u0027mulitplyBy2\u0027, which should double any input Float.\n\nlet mulitplyBy2 x = x * 2.\n\nmulitplyBy2 3.\n\n(*** include-it ***)\n\n(**\nIf a excercise asks you to bind something to a specific name, keep that name! It might be used later on!\nAlso remember to use camel case for names. This works by having a regular first letter and then have a capital letter at the start of each new word.\n\nexmp: \u003Ccode\u003EthisIsACamelCaseExample\u003C/code\u003E\n\n*)\n\n// Create a function \u0027calculateCylinderVolume\u0027, which should, with a given radius and lenght, \n// calculate and return the volume of a cylinder AND print \u0022The volume of the cylinder is: XX.\u0022 into the console. \u0027XX\u0027 is,\n// of course, the correct volume for the cylinder. (The output of a printfn function is Unit.)\n\nlet calculateCylinderVolume radius length : float =\n   // function body\n   let pi = 3.14159 //or System.Math.PI\n   let volume = length * pi * radius * radius\n   printfn \u0022Das Volumen des Zylinders ist: %f\u0022 volume\n   volume\n\ncalculateCylinderVolume 2. 10.\n   \n(*** include-it ***)\n(*** include-output ***)\n\n(**\n\n\u003Cul\u003E\n    \u003Cli\u003ETry to follow the excercise as close as possible, to not overlook something like \u0022.. calculate (..) the volume of a cylinder AND print ..\u0022 as these small differences migth be a valuable part of the excercise.\u003C/li\u003E\n    \u003Cli\u003ELines of code do not have any cost, don\u0027t be to stingy about them, e.g. have an extra line with a binding of \u003Ccode\u003Elet pi = 3.14159\u003C/code\u003E, so you can just use \u0022pi\u0022 instead of the number. \u003C/li\u003E\n    \u003Cli\u003EThis improves readability and keeps the function modular.\u003C/li\u003E\n    \u003Cli\u003EBy defining pi inside of the scope of \u003Ccode\u003EcalculateCylinderVolume\u003C/code\u003E it cannot be accessed from outside, keeping your overall code nice and clean.\u003C/li\u003E\n\u003C/ul\u003E\n\n*)\n\n// A chessboard is a 8x8 field. The rows and columns have the indices 0 - 7.\n// Create a function, which should return true if two queens can hit each other or false if they can\u0027t.\n// The functions parameters should be two Tuples (int*int).\n\nlet canHit (queen1 : int*int) (queen2 : int*int) =\n    let (posX1, posY1),(posX2, posY2)= (queen1,queen2)\n    if \n        // check if both queens are on the same x-axis\n        (posX1 = posX2) \n        // check if both queens are on the same y-axis\n        || (posY1 = posY2) \n        // check if both queens are on the same diagonal\n        || (abs (posX1 - posX2) = abs (posY1 - posY2))\n    then\n        printfn \u0022Both queens can hit each other\u0022\n        true\n    else \n        printfn \u0022Both queen cannot hit each other\u0022\n        false\n        \ncanHit (3,5) (5,7)\n\n(*** include-it ***)\n(*** include-output ***)\n\n(**\n\u003Chr\u003E\n \n## Excercises \n\u003Ca href=\u0022#FSharp-Introduction-Excercises\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n\n### Task 1\n\u003Ca href=\u0022#FSharp-Introduction-Excercises\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n\n*)\n\n// Bind a String of your name (\u0022Name\u0022) to the name \u0027myFirstName\u0027.\n\n// Solution\n\nlet myFirstName = \u0022Kevin\u0022\n\nmyFirstName\n\n(*** include-it ***)\n\n(**\n### Task 2\n\u003Ca href=\u0022#FSharp-Introduction-Excercises\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n*)\n\n// Define a variable \u0027myName\u0027, by adding \u0027myFirstName\u0027 to the rest of your name.\n\n// Solution\n\nlet myName = myFirstName \u002B \u0022 Frey\u0022\n\nmyName\n\n(*** include-it ***)\n\n(** \n### Task 3\n\u003Ca href=\u0022#FSharp-Introduction-Excercises\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n*)\n\n// Define a variable \u0027summeXY\u0027 as the sum of any two Integer numbers. Do this, by defining x and y as separate \n// let - bindings inside the functional scope of the \u0027summeXY\u0027 function. \n// (The function MUST contain three let - bindings)\n\n// Solution\n\nlet summeXY =\n    let x = 2\n    let y = 34\n    x \u002B y\n\n\n(*** include-value:summeXY ***)\n\n(** \n### Task 4\n\u003Ca href=\u0022#FSharp-Introduction-Excercises\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n*)\n\n// Declare a Tuple, consisting of 2 and \u0022February\u0022 and bind the Tuple to the name \u0027tuple1\u0027\n\n// Solution \n\nlet tuple1 = (2,\u0022February\u0022)\n\n(*** include-value:tuple1 ***)\n\n(**\n### Task 5\n\u003Ca href=\u0022#FSharp-Introduction-Excercises\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n*)\n\n// Declare a Tuple, consisting of 2, \u0022February\u0022 and \u0022spring\u0022 and bind the Tuple to the name \u0027tuple2\u0027\n\n// Solution \n\nlet tuple2 = (2,\u0022February\u0022,\u0022spring\u0022)\n\n(*** include-value:tuple2 ***)\n\n(**\n### Task 6 \n\u003Ca href=\u0022#FSharp-Introduction-Excercises\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n*)\n\n// Access the second variable of the Tuple \u0027tuple1\u0027.\n// Access the second variable of the Tuple \u0027tuple2\u0027.\n\n// Solution \n\nlet solution1 = snd tuple1\n\nlet solution2 = (fun (x,y,z) -\u003E y) tuple2 // or: let (x,y,z) = tuple2\n\n(*** include-value:solution1 ***)\n(*** include-value:solution2 ***)\n\n(** \n### Task 7\n\u003Ca href=\u0022#FSharp-Introduction-Excercises\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n*)\n\n// Create a Record Type with the name \u0027Month\u0027. \u0027Month\u0027 should contain the fields \u0027Number\u0027 (int),\n// \u0027Name\u0027 (string) and \u0027Season\u0027 (string).\n\n// Solution\n\ntype Month =\n    {\n        Number: int\n        Name:   string\n        Season: string\n    }\n    \n(** \n### Task 8\n\u003Ca href=\u0022#FSharp-Introduction-Excercises\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n*)\n\n// Declare a function \u0027createMonth\u0027 with three input parameters and which should return a \u0027Month\u0027 - Record Type.\n// Use the values from \u0027tuple2\u0027 and create a month with these as input.  \n\n// Solution\n\nlet createMonth number name season =\n    {\n        Number = number\n        Name   = name\n        Season = season\n    }\n    \nlet feb = createMonth 2 \u0022February\u0022 \u0022spring\u0022\nfeb\n\n(*** include-value:feb ***)\n\n(** \n### Task 9\n\u003Ca href=\u0022#FSharp-Introduction-Excercises\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n*)\n\n// Create a function called \u0027myMonthsPrinter\u0027 which should take a \u0027Month\u0027 as input and return a unit output \n// (printfn - command) in the form of \u0022My favorite month is [Month Name]. It is the [Number of Month] month\n// in the year and i especially like this time because it is part of [Season].\u0022\n\n// Solution\n\nlet myMonthsPrinter (month:Month) =\n    printfn \u0022\n        My favorite month is %s. It is the %i month in the year \n        and i especially like this time because it is part of %s.\u0022\n        month.Name\n        month.Number\n        month.Season\n        \nmyMonthsPrinter feb\n\n(*** include-output ***)\n\n(** \n### Task 10\n\u003Ca href=\u0022#FSharp-Introduction-Excercises\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n*)\n\n// We want to put additional emphasis on readability of code ...\n\n// Oh no, the following function is not readable. Write the function new and use pipe operators!\n\nlet unreadableFunc x = (string ((x - 7) * 2) \u002B \u0022Generic\u0022).ToUpper().ToCharArray()\n\n// Solution\n\nlet readableFunc (x:int) = \n    x\n    |\u003E fun x -\u003E x - 7\n    |\u003E fun x -\u003E x * 2\n    |\u003E string\n    |\u003E fun x -\u003E x \u002B \u0022Generic\u0022\n    |\u003E fun x -\u003E x.ToUpper().ToCharArray()\n    \nreadableFunc 4 = unreadableFunc 4\n\n(*** include-it ***)\n\n(** \n### Task 11\n\u003Ca href=\u0022#FSharp-Introduction-Excercises\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n*)\n\n// Create a function \u0027replaceSmallNumbers\u0027, which should replace all \n// integers in a list with a 0 if the integer is smaller than 5.\n\nlet numList = [0 .. 20]\n\n// Solution\n\nlet replaceSmallNumbers (numList:int list) =\n    numList\n    |\u003E List.map (\n        fun x -\u003E\n            if x \u003C 5 then\n                0\n            else x\n        )\n    \nreplaceSmallNumbers numList\n\n(*** include-it ***)\n(**\n\u003Cnav class=\u0022level is-mobile\u0022\u003E\n    \u003Cdiv class=\u0022level-left\u0022\u003E\n        \u003Cdiv class=\u0022level-item\u0022\u003E\n            \u003Cbutton class=\u0022button is-primary is-outlined\u0022 onclick=\u0022location.href=\u0027/JP00_Systems_Biology_FSharp_Introduction.html\u0027;\u0022\u003E\u0026#171; JP00\u003C/button\u003E\n        \u003C/div\u003E\n    \u003C/div\u003E\n    \u003Cdiv class=\u0022level-right\u0022\u003E\n        \u003Cdiv class=\u0022level-item\u0022\u003E\n            \u003Cbutton class=\u0022button is-primary is-outlined\u0022 onclick=\u0022location.href=\u0027/JP02_Plant_Systems_Biology.html\u0027;\u0022\u003EJP02 \u0026#187;\u003C/button\u003E\n        \u003C/div\u003E\n    \u003C/div\u003E\n\u003C/nav\u003E\n*)"}]