[{"uri":"/BIO-BTE-06-L-7/JP00_Systems_Biology_FSharp_Introduction.html","title":"Systems Biology\n","content":"(**\n# Systems Biology\n\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/CSBiology/BIO-BTE-06-L-7/gh-pages?filepath=JP00_Systems_Biology_FSharp_Introduction.ipynb)\n\n\nThis notebook introduces the field of Systems Biology and explains why programming is a necessary skill to it. You will get a short introduction to the programming language F# and some links to resource for further studies.\n\n1. [Systems Biology: A brief introduction](#Systems-Biology-A-brief-introduction)\n2. [Starting with FSharp](#Starting-with-FSharp)\u003Cbr\u003E\n    1. [Functions](#Functions)\u003Cbr\u003E\n    2. [Binding function values and simple values](#Binding-function-values-and-simple-values)\u003Cbr\u003E\n        1. [Side note: Lambda expressions](#Side-note:-Lambda-expressions)\u003Cbr\u003E\n    3. [Simple values](#Simple-values)\n    4. [Lists \u0026 Arrays](#Lists-\u0026-Arrays)\n    5. [Higher-order functions](#Higher-order-functions)\n        1. [Side Note: Pipe-forward operator |\u003E](#Side-Note:-Pipe-forward-operator-|\u003E)\n    6. [Control flow expressions](#Control-flow-expressions)\n        1. [if-then-else](#if-then-else)\n        2. [Pattern Matching](#Pattern-Matching)\n    7. [Complex Data Types](#Complex-Data-Types)\n        1. [Tuples](#Tuples)\n        2. [Record Types](#Record-Types)\n    8. [Code organization](#Code-organization)\n        1. [Namespaces and modules](#Namespaces-and-modules)\n        2. [Comments](#Comments)\n3. [References](#References)\n\n## Systems Biology: A brief introduction\n\n\u003Cdiv class=\u0022columns\u0022\u003E\n\u003Cdiv class=\u0022column is-8\u0022\u003E\nThe term \u201Csystems theory\u201D was introduced by the biologist L. von Bertalanffy. He defined a system as a set of related components that work together in a particular environment to perform whatever functions are required to achieve the system\u0027s objective\u003Csup\u003E\u003Ca href=\u0022#1\u0022 id=\u0022ref1\u0022\u003E1\u003C/a\u003E\u003C/sup\u003E. The hierarchical organization orchestrating the interaction of thousands of molecules with individual properties allows complex biological functions. Biological processes like cell division, biomass production, or a systemic response to perturbations are molecular physiological functions which result from a complex dynamic interplay between genes, proteins and metabolites (\u003Ca href=\u0022#figure1\u0022\u003EFigure 1\u003C/a\u003E). To gain a holistic understanding of a biological system, all parts of the system need to be studied simultaneously by quantitative measures\u003Csup\u003E\u003Ca id=\u0022ref2\u0022 href=\u0022#2\u0022\u003E2\u003C/a\u003E\u003C/sup\u003E. The focus on a system-wide perspective lies on the quantitative understanding of the organizational structure, functional state, robustness and dynamics of a biological system and led to the coining of the term \u201CSystems Biology\u201D\u003Csup\u003E\u003Ca href=\u0022#3\u0022\u003E3\u003C/a\u003E\u003C/sup\u003E.\n\nThe current challenges of Systems Biology approaches are mainly along four lines\u003Csup\u003E\u003Ca href=\u0022#2\u0022\u003E2\u003C/a\u003E,\u003Ca href=\u0022#4\u0022\u003E4\u003C/a\u003E\u003C/sup\u003E: \n\n - (**i**) - system-wide quantification of transcriptome, proteome (including protein modifications) and metabolome\n \n - (**ii**) - identification of physical interactions between these components\n \n - (**iii**) - inference of structure, type and quantity of found interactions\n \n - (**iv**) - analysis and integration of the resulting large amounts of heterogeneous data. It becomes obvious that an interdisciplinary effort is needed to resolve these challenges in Systems Biology\u003Csup\u003E\u003Ca href=\u0022#5\u0022\u003E5\u003C/a\u003E\u003C/sup\u003E. Here Biology dictates which analytical, experimental and computational methods are required.\n\nModern analytical methods to measure the identity and quantity of biomolecules system-wide, summarized under the term \u201Cquantitative omics\u201D-technologies, address the first two mentioned challenges of Systems Biology. Among these \u201Comics\u201D-technologies are transcriptomics based on microarrays/next generation sequencing and proteomics/metabolomics based on mass-spectrometry.\n\nTying in with the area of genome sequencing, the focus is set on the accurate profiling of gene/protein expression and metabolite concentrations, as well as on the determination of biological protein modifications and of physical interactions between proteins.\n\nAddressing the abovementioned challenges three and four of Systems Biology, the development of numerous computational approaches reaches out to unravel the intrinsic complexity of biological systems\u003Csup\u003E\u003Ca href=\u0022#6\u0022\u003E6\u003C/a\u003E\u003C/sup\u003E. These computational approaches focus on knowledge discovery and on in silico simulation or modeling\u003Csup\u003E\u003Ca href=\u0022#7\u0022\u003E7\u003C/a\u003E\u003C/sup\u003E. In the latter approach knowledge on a biological process is converted into a mathematical model. In silico simulations based on such a model can provide predictions that may subsequently be tested experimentally. Computation-based knowledge discovery (also known as data mining) aims to extract hidden patterns from complex and high-dimensional data to generate hypotheses. Therefore, the first step is to describe information on a biological system such that it is sustainably stored in a format rendering it readable and manipulable for machines and humans. The second step is to integrate the huge amount of differently structured data, often referred to as the \u201Cbig data\u201D challenge. In a last step, statistical or machine learning methods are applied to extract the information or underlying principles hidden in the data.\n\nThe most flexible way of working with huge amounts of data is using a lightweight programming language with a succinct syntax. Therefore, it becomes necessary that biologist become familiar with a suitable programming language to solve real world problems in (Systems) Biology.\n\u003C/div\u003E\n\u003Cdiv class=\u0022column is-4\u0022\u003E\n![](img/OmicSpace.png)\n\u003Cb\u003EFigure 1: A conceptual view of the omic space.\u003C/b\u003E The omics space comprises of genomic, transcriptomic, proteomic, metabolomic and phenomic systems level represented as a plane. Complex biological function is the result of the interplay between molecules of one and/or different systems level.\n\u003C/div\u003E\n\u003C/div\u003E\n\n## Starting with FSharp\n\n\nF# (pronounced \u201CF Sharp\u201D) is a simple and expressive programming language. It can be described as statically typed impure functional language that supports functional, imperative and object-oriented paradigm and also several other programming styles including data-driven, event-driven and parallel programming. This makes it an excellent tool for introducing programming as well as programming paradigms.\n\nF# is supported by the \u003Ca href=\u0022http://fsharp.org\u0022\u003EF# Software Foundation\u003C/a\u003E and a worldwide community of contributors. Microsoft and other companies develop professional tooling for F#. The \u003Ca href=\u0022https://docs.microsoft.com/en-us/dotnet/articles/fsharp/\u0022\u003EF# Language Reference\u003C/a\u003E is a reference for the F# language, and the \u003Ca href=\u0022https://docs.microsoft.com/en-us/dotnet/articles/fsharp/\u0022\u003EF# Guide\u003C/a\u003E covers general topics. There are lots of excellent \u003Ca href=\u0022http://fsharp.org/learn.html\u0022\u003EF# learning resources\u003C/a\u003E available online.\n   \nTo learn more about how to use Jupyter notebooks, see the [Jupyter documentation](http://jupyter-notebook.readthedocs.io/) and the [Jupyter keyboard shortcuts](https://www.cheatography.com/weidadeyue/cheat-sheets/jupyter-notebook/). You can find more information baoutthe F# and Jupyter tooling locally using \u003Ca href=\u0022https://github.com/fsprojects/IfSharp\u0022\u003EIfSharp\u003C/a\u003E.\n  \nWith the help of the following FSharp coding information/examples, you will be able to solve all exercises in \u003Ca href=\u0022JP01_FSharpExcercises.ipynb\u0022 style=\u0022color: orange\u0022\u003EJP01_FsharpExcercises\u003C/a\u003E!\n   \nLet\u0027s start with our basic introduction:\n\n## Functions\n\nThe impetus behind functional programming comes from mathematics. Mathematical functions have a number of very nice features that functional languages try to emulate in the real world.\nSo first, let\u2019s start with a mathematical function that adds 1 to a number.\n\n\u0060\u0060\u0060\nAdd1(x) = x\u002B1\n\u0060\u0060\u0060\n\nWhat does this really mean? Well it seems pretty straightforward. It means that there is an operation that starts with a number, and adds one to it.\n   \n**Let\u2019s introduce some terminology:**\n\n - The set of values that can be used as input to the function is called the domain. In this case, it could be the set of real numbers, but to make life simpler for now, let\u2019s restrict it to integers only.\n\n - The set of possible output values from the function is called the range (technically, the image on the codomain). In this case, it is also the set of integers.\n\n - The function is said to map the domain to the range.\n\nA diagram of a general function would be:\n\n![](img/function.png)\n\n\u003Cb\u003EFigure 2: diagram of a general function\u003C/b\u003E\n\n## Binding function values and simple values\n\nThe process of using a name to represent a function or a value is called \u201Cbinding\u201C. A binding is done by using the \u0060let\u0060 keyword in F#. Let\u2019s look at the simple function we used previously:\n\n*)\n\nlet add1 x = x \u002B 1\n// evaluate\nadd1\n\n(**\n\u0060\u0060\u0060\nval add1: \n   x: int \n   -\u003E int\n\u0060\u0060\u0060\n\nWhat does the \u201Cx\u201D mean here? It means:\n\n - Accept some value from the input domain.\n\n - Use the name \u201Dx\u201D to represent that value so that we can refer to it later. The name \u201Cx\u201D is \u0022bound\u0022 to the input value. So if we evaluate the function with the input 5 say, what is happening is that everywhere we see \u201Cx\u201D in the original definition, we replace it with \u201C5\u201D, sort of like search and replace in a word processor\n\n*)\n\nadd1 5\n// replace \u0022x\u0022 with \u00225\u0022\n// add1 5 = 5 \u002B 1 = 6\n// result is 6\n\n(***include-it***)\n\n(**\nIf you think about this a bit more, you will see that the name \u0060add1\u0060 itself is just a binding to _the function that adds one to its input_. \nThe function itself is independent of the name it is bound to. When you type let \u0060add1\u0060 x = x \u002B 1 you are telling the F# compiler \u201Cevery time you see the name add1, \nreplace it with _the function that adds one to its input_\u201D. \u0060add1\u0060 is called a function value. To see that the function is independent of its name, try:\n*)\n\nlet plus1 = add1\nadd1 5 = plus1 5\n\n(***include-it***)\n\n(**\nYou can see that \u0060add1\u0060 and \u0060plus1\u0060 are two names that refer (\u0022bound to\u0022) to the same function. You can always identify a function value because its signature has the standard form domain -\u003E range. \nHere is a generic function value signature:\n\n\u0060\u0060\u0060\nval functionName : domain -\u003E range\n\u0060\u0060\u0060\n\nSide note: Lambda expressions\n\nIn F# it is possible to use function without giving them a name and use the keyword \u0060fun\u0060 instead and the \u0060=\u0060 becomes \u0060-\u003E\u0060. \nThis is called anonymous function, or - referring to lambda calculus - **lambda expression**. This kind of functions are often used for convenience. To write \u0060add1\u0060 as lambda expression:\n*)\n\nfun x -\u003E x \u002B 1\n\n(**\n## Simple values\n\n![](img/valueBinding.png)\n      \nImagine an operation that always returned the integer 5 and didn\u2019t have any input.\n   \nThis would be a \u201Cconstant\u201D operation.\nHow would we write this in F#? We want to tell the F# compiler \u201Cevery time you see the name c, replace it with 5\u201D. Here\u2019s how:\n*)\n\nlet c = 5\n// evaluate\nc\n\n(***include-it***)\n\n(**\nThere is no mapping arrow this time, just a single int. What\u2019s new is an equals sign with the actual value printed after it. The F# compiler knows that this binding has a known value which it will always return, namely the value 5.\nIn other words, we\u2019ve just defined a constant, or in F# terms, a simple value.\n\n## Lists \u0026 Arrays\n\nSquare brackets \u0060[]\u0060 create a list with semicolon \u0060;\u0060 delimiters.\n*)\n\nlet twoToFive = [2; 3; 4; 5]\ntwoToFive\n\n(***include-it***)\n\n(**\n\u0060::\u0060 creates a list with a new element appended to the front of the list.\n*)\n\nlet oneToFive = 1::twoToFive\noneToFive\n\n(***include-it***)\n\n(**\nSquare brackets with dashes \u0060[||]\u0060 create an array with semicolon \u0060;\u0060 delimiters.\n*)\n\nlet oneToFour = [|1; 2; 3; 4|]\n\n(**\nElements can be accessed using dot \u0060.[i]\u0060, where i is the (zero-based) index of the desired element\n*)\n\noneToFour.[0]\n\n(***include-it***)\n\n(**\n_Note_: commas are **never** used as delimiters in collection types, only semicolons!\n\n## Higher-order functions\n\n\u003Cdiv class=\u0022columns\u0022\u003E\n\u003Cdiv class=\u0022column is-8\u0022\u003E\nA higher-order function is a function that takes another function as a parameter. \nThis is simple, but leads to one of the most important concepts of functional programming: The conceptual operation: \u003Cstrong\u003Emap\u003C/strong\u003E\n\nThe higher-order and polytypic function \u0060map\u0060 applies a function working on the normal space to an elevated space.\nThis concept is so important that all collection types (lists, arrays, ...) have a build in \u0060map\u0060 function. \nLet\u0027s look at an example of what that means. Therefore, we first define a function working on the normal space:\n\u003C/div\u003E\n\u003Cdiv class=\u0022column is-4\u0022\u003E\n![](img/map.png)\n\u003Cb\u003EFigure 3: A conceptual view of the \u0060map\u0060 concept.\u003C/b\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n*)\n\nlet square x = x * x\n// evaluate\nsquare 3\n\n(***include-it***)\n\n(**\nNow, let\u0027s apply this function to every number in a list.\n*)\n\nList.map square [3;2;6;7]\n\n(***include-it***)\n\n(**\nBe aware, that this concept of mapping is restricted to the actual function called \u0060map\u0060. A \u0060filter\u0060 function, for example, is also the same kind of operation.\n*)\n\nlet evens list =\n   let isEven x = x%2 = 0\n   List.filter isEven list \n   \n//isEven 5      // the value or constructor isEven is not defined. .. this is because it is only defined inside \n                // of the functional scope of \u0060evens\u0060.\n\n(**\nAdditionaly, you can see in this example how to define a multiline function. Just use indents! No \u0060;\u0060 needed.\nDefine \u0060isEven\u0060 as an inner (\u0022nested\u0022) function. In this case the function \u0060isEven\u0060 is defined in the scope of the function \u0060evens\u0060. It cannot be accessed outside of this scope.\n\u0060List.filter\u0060 is a library function with two parameters: a \u0060predicate\u0060 function, returning \u0060true\u0060 or \u0060false\u0060 depending on the input - and a \u0060list\u0060 to work on.\n*)\n\nevens [1..5]\n\n(***include-it***)\n\n(**\nYou can use \u0060()\u0060 to clarify precedence (think brackets in math). In this example, do \u0060List.map\u0060 first, with two parameters. Then do \u0060List.sum\u0060 on the result. \u0060List.map\u0060 applies a function to all elements in the list.\n*)\n\nlet sumOfSquaresTo100 =\n   List.sum (List.map square [1..100])\n\nsumOfSquaresTo100\n\n(***include-it***)\n\n(**\nWithout the \u0060()\u0060, \u0060List.map\u0060 would be passed as an parameter to \u0060List.sum\u0060.\n\n## Side Note: Pipe-forward operator \u0060|\u003E\u0060\n\nThe Pipe-forward operator lets you pass an intermediate result (value) onto the next function, it\u2019s defined as: \n\n*)\n\nlet (|\u003E) x f = f x \n\n(**\n\nNow, you can pipe the output of one operation to the next using \u0060|\u003E\u0060.\nHere is the same \u0060sumOfSquares\u0060 function written using pipes.\n\n*)\n\nlet sumOfSquaresTo100piped =\n   [1..100] \n   |\u003E List.map square \n   |\u003E List.sum\n\nsumOfSquaresTo100piped\n\n(***include-it***)\n\n(**\nIn this case one often uses anonymous functions using the \u0060fun\u0060 keyword. This saves time to think about a name and the function can be writen inline.\n*)\n\nlet sumOfSquaresTo100withFun =\n   [1..100] \n   |\u003E List.map (fun x -\u003E x * x) \n   |\u003E List.sum\n   \nsumOfSquaresTo100withFun\n\n(***include-it***)\n\n(**\n\u003Cdiv class=\u0022columns\u0022\u003E\n\u003Cdiv class=\u0022column is-8\u0022\u003E\n\nYou already used the \u0060List.sum\u0060 function. It is important to notice that this function doesn\u2019t follow the \u0060map\u0060 concept. There is a second related concept called \u0060fold\u0060.  The higher-order and polytypic function \u0060fold\u0060 applies a function working on the normal space to an elevated space and reduces the elevated space into the normal space. This results in an aggregation. A simple but concreate example would be to sum a list of numeric values.\n\n\u003C/div\u003E\n\u003Cdiv class=\u0022column is-4\u0022\u003E\n\n![](img/fold.png)\n\n\u003Cb\u003EFigure 4: A conceptual view of the \u0060fold\u0060 concept.\u003C/b\u003E\n\n\u003C/div\u003E\n\u003C/div\u003E\n\n## Control flow expressions\n\nControl flow expressions are used to determine the program pathing under multiple possible conditions. These different paths must always lead to the same \u0060Type\u0060 (e.g. \u0060string\u0060).\n\n### if-then-else\n\n\u0060if-then-else\u0060 is an expression and must return a value of a particular type.\nIt evaluates to a different value depending on the \u0060boolean\u0060 expression given.\n\nBoth branches must return the same type!\n\n*)\n\nlet v = if true then \u0022a\u0022 else \u0022b\u0022\nv\n\n(***include-it***)\n\n(**\n\n### Pattern Matching\n\nPattern matchings are one method to apply these control flow expressions. These function similiar to the \u003Ca href=\u0022#if-then-else\u0022\u003Eif then else\u003C/a\u003E expression, but much more powerful.\n\n*)\n\nlet simplePatternMatch x =\n   match x with\n    | \u0022a\u0022 -\u003E printfn \u0022input is a\u0022\n    | \u0022b\u0022 -\u003E printfn \u0022input is b\u0022\n    | _   -\u003E printfn \u0022input is something else\u0022\n\n(**\n\u003Cdiv Style=\u0022text-align: justify ; font-size: 1.8rem ; margin-top: 2rem ; line-height: 1.5\u0022\u003E\n    Underscore \u0060_\u0060 matches anything\n\u003C/div\u003E\n*)\n\nsimplePatternMatch \u0022a\u0022 \n\n(***include-output***)\n\nsimplePatternMatch \u0022I will not match\u0022\n\n(***include-output***)\n\n(**\nIn the following we will use a \u0060printfn\u0060 function. Normally in FSharp only the last output is returned, but side effects, can always be returned. As a rule of thumb: All Unit outputs are side effects. \u003Cbr\u003E\nIn this case, this means, we will print the result and still can keep working with the output.\nAlso you will notice, that the last output is only \u0060f (1=3)\u0060 -\u003E \u0022b\u0022, but we still will get all other results, as we print them below.\n*)\n\nlet f x = \n    if x then \n        printfn \u0022a\u0022;\n        \u0022a\u0022 \n    else\n        printfn \u0022b\u0022\n        \u0022b\u0022\n\nf false\n\n(***include-it***)\n\nf true\n\n(***include-it***)\n\nf (1=1)\n\n(***include-it***)\n\nf (1=3)\n\n(***include-it***)\n\n(**\n## Complex Data Types\n\n### Tuples\n\nTuple types are pairs, triples, and so on of values.\n\nTuples use commas \u0060,\u0060 as delimiter.\n\n*)\n\nlet twoTuple = 1,2\ntwoTuple\n\n(***include-it***)\n\nlet threeTuple = \u0022a\u0022,2,true\nthreeTuple\n\n(***include-it***)\n\n(**\n### Record Types\n\nRecord types have named fields. They use Semicolons \u0060;\u0060 as separators.\n\n*)\n\ntype Person = {FirstName:string; LastName:string}\n\nlet person1 = {FirstName = \u0022John\u0022; LastName = \u0022Doe\u0022}\nperson1\n\n(***include-it***)\n\n(**\nField of a record type can be acessed individually with a dot \u0060.Name\u0060\n*)\n\nperson1.FirstName\n\n(***include-it***)\n\n(**\n## Code organization\n\nSometimes it can be necessary to organize code for example to ship a library to other users. Namespaces und Modules are top-level and low-level constructs to organize code. \n\n### Namespaces and modules\n\nYou can think of namespaces and modules as containers and sub containers, respectively, in which you can put function and type definitions. The hierarchy is defined that you can have multiple modules in one namespace, also nested modules in a module, but no namespace in another namespace. You can acces namespaces and modules with the \u0060.\u0060 operator.\n\n*)\n\n//Module \u201Ccontainer\u201D \nmodule WidgetsModule =\n    let widgetName = \u0022FSharp\u0022\n    let widgetFunction x y =\n        sprintf \u0022%s %s\u0022 x y\n        // printfn \u0022%s %s\u0022 x y\n\n// Calls the function from the module\nWidgetsModule.widgetFunction \u0022Hello\u0022 WidgetsModule.widgetName\n\n(***include-it***)\n\n(**\n### Comments\n\nComments also help to write organized code.\n\n**Comments are text written in code area (often marked green) which will be ignored by the compiler and not be executed.**\n\n\u0060//\u0060 single line comments use a double slash\n\n(* multi-line or in-line comments use \u0060(* . . . *)\u0060 pair -end of multi line comment- *)\n\n*)\n\ntype PersonalInformation =\n    {\n        //First name of a person\n        FirstName  :string\n        //Last name of a person\n        LastName   :string\n        (*Address and\n        phone number of a person*)\n        Address    : (*int*) string\n        PhoneNumber: int\n    }\n\n(**\n\u003Cnav class=\u0022level is-mobile\u0022\u003E\n    \u003Cdiv class=\u0022level-left\u0022\u003E\n    \u003C/div\u003E\n    \u003Cdiv class=\u0022level-right\u0022\u003E\n        \u003Cdiv class=\u0022level-item\u0022\u003E\n            \u003Cbutton class=\u0022button is-primary is-outlined\u0022 onclick=\u0022location.href=\u0027/JP01_FSharpExcercises.html\u0027;\u0022\u003EJP01 \u0026#187;\u003C/button\u003E\n        \u003C/div\u003E\n    \u003C/div\u003E\n\u003C/nav\u003E\n*)\n\n(**\n\n## References\n\n\u003Col\u003E\n\u003Cli Id=\u00221\u0022\u003E Bertalanffy, L. von. Zu einer allgemeinen Systemlehre. Bl\u00E4tter f\u00FCr deutsche Philosophie 18 (1945).\u003C/li\u003E\n\n\u003Cli Id=\u00222\u0022\u003E Sauer, U., Heinemann, M. \u0026 Zamboni, N. Genetics. Getting closer to the whole picture. Science 316, 550\u2013551; 10.1126/science.1142502 (2007).\u003C/li\u003E\n\n\u003Cli Id=\u00223\u0022\u003E Kitano, H. Systems biology. a brief overview. Science 295, 1662\u20131664; 10.1126/science.1069492 (2002).\u003C/li\u003E\n\n\u003Cli Id=\u00224\u0022\u003E Joyce, A. R. \u0026 Palsson, B. O. The model organism as a system. integrating \u0027omics\u0027 data sets. Nat Rev Mol Cell Bio 7, 198\u2013210; 10.1038/Nrm1857 (2006).\u003C/li\u003E\n\n\u003Cli Id=\u00225\u0022\u003E Aderem, A. Systems biology. Its practice and challenges. Cell 121, 511\u2013513; 10.1016/j.cell.2005.04.020 (2005).\u003C/li\u003E\n\n\u003Cli Id=\u00226\u0022\u003E Kahlem, P. \u0026 Birney, E. Dry work in a wet world. computation in systems biology. Mol Syst Biol 2 (2006).\u003C/li\u003E\n\n\u003Cli Id=\u00227\u0022\u003E Kitano, H. Computational systems biology. Nature 420, 206\u2013210; 10.1038/nature01254 (2002). \u003C/li\u003E\n\u003C/ol\u003E\n*)"},{"uri":"/BIO-BTE-06-L-7/index.html","title":"The fslab documentation template\n","content":"(**\n# The fslab documentation template\n\nThis template scaffolds the necessary folder structure for FSharp.Formatting \nand adds custom styles in the **fslab** theme. \n\nThe provided stylesheet was compiled from sass (before uploading the nuget package) and\nuses the [Bulma](https://bulma.io/) CSS framework instead of bootstrap which is used by FSharp.Formatting per default.\n\n#### Table of contents \n\n- [Installation](#Installation)\n- [Usage](#Usage)\n- [Quick content rundown](#Quick-content-rundown)\n- [Creating new content](#Creating-new-content)\n- [Customization options](#Customization-options)\n    - [Style sheet options](#Style-sheet-options)\n    - [Inclusion of sample content](#Inclusion-of-sample-content)\n    - [Create notebooks](#Create-notebooks)\n\n\n## Installation\n\nThis template is available as a _dotnet new_ template (from [nuget](https://www.nuget.org/packages/FsLab.DocumentationTemplate/)):\n\n\u0060\u0060\u0060no-highlight\ndotnet new -i FsLab.DocumentationTemplate\n\u0060\u0060\u0060\n\n## Usage\n\nIf not already present, create a _local tool manifest_ in the root of your project that you want to write documentation for:\n\n\u0060\u0060\u0060no-highlight\ndotnet new tool-manifest\n\u0060\u0060\u0060\n\nThen, still in the root of your project, run:\n\n\u0060\u0060\u0060no-highlight\ndotnet new fslab-docs\n\u0060\u0060\u0060\n\n## Quick content rundown:\n\nThe default template initializes the following folder structure when you initialize it in the root of your project.\n\nSee [further below](#Customization-options) for command line customization options of the template.\n\n\u003Cpre\u003E\ndocs\n\u2502   index.fsx\n\u2502   _template.html\n|   _template.ipynb\n|   \n\u2502   0_Markdown-Cheatsheet.md\n\u2502   1_fsharp-code-example.fsx\n\u2502   2_inline-references.fsx\n\u2502   3_notebooks.fsx\n|\n\u251C\u2500\u2500\u2500content\n\u2502   fsdocs-custom.css\n\u2502\n\u251C\u2500\u2500\u2500img\n\u2502       favicon.ico\n\u2502       logo.png\n\u2502\n\u2514\u2500\u2500\u2500reference\n        _template.html\n\u003C/pre\u003E\n\n- \u0060index.fsx\u0060 is the file you are reading just now. It contains the very content you are reading at the moment \nin a markdown block indicated by \u0060(** *)\u0060 guards. It will be rendered as the root \u0060index.html\u0060 file of your documentation.\n\n- \u0060_template.html\u0060 is the root html scaffold (sidebar to the left, script and style loading) where all of the individual docs will be injected into\n\n- \u00600_Markdown-Cheatsheet.md\u0060 is a adaption of [this markdown cheat sheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) that shows how to write markdown and showcases the rendered equivalents. It can also be viewed in all its glory [here](https://fslab.org/docs-template/0_Markdown-Cheatsheet.html).\n\n- \u00601_fsharp-code-example.fsx\u0060 is a script file that showcases the syntax highlighting style for F# snippets. It can also be viewed in all its glory [here](https://fslab.org/docs-template/1_fsharp-code-example.html).\n\n- \u00602_inline-references.fsx\u0060 is a script file that explains how to use inline references and use Plotly.NET for charting. It can also be viewed in all its glory [here](https://fslab.org/docs-template/2_inline-references.html).\n\n- \u00603_notebooks.fsx\u0060 is a script file that showcases conditional content in documentation and how to use that to create dotnet interactive notebooks besides your html documentation. It can also be viewed in all its glory [here](https://fslab.org/docs-template/3_notebooks.html).\n\n- \u0060fsdocs-custom.css\u0060 contains the custom styling that applies the fslab styles.\n\n - the \u0060img\u0060 folder contains the fslab logo and favicon. replace these files (with the same names) to youse sours\n\n - \u0060reference/_template.html\u0060 is a slightly adapted version of the template above for the API documentation\n\n## Creating new content\n\n- run \u0060dotnet fsdocs watch --eval\u0060 to spawn a watcher and dev server that hosts your docs on http://localhost:8901/ (You currently will still have to refresh the page when you make changes to files)\n\n- add a new .md or .fsx file to the \u0060content\u0060 directory (or into a new subdirectory there)\n\n- the sidebar title for the document will be either the file name or, if existent, the first level 1 header in the file\n\n- when writing a .fsx file, code will automatically become syntax-highlighted code snippets. \n\n- use \u0060(** \u003Cmarkdown here\u003E *)\u0060 to guard markdown sections in .fsx files\n\n- use \u0060(*** include-value:\u003Cval name\u003E ***)\u0060 to include the value of a binding\n\n- use \u0060(*** include-it ***)\u0060 to include the evaluation of the previous snippet block \n\nFor more info please refer to the [FSharp.Formatting documentation](http://fsprojects.github.io/FSharp.Formatting/).\n\n\n## Customization options\n\n### Style sheet options\n\n\u0060\u0060\u0060no-highlight\n-s|--styles             Set the type of style content the template will initialize. For the sass file to work, you will have to download bulma\n\n        all             - sass file, compiled csss, and minified css\n\n        sass            - only include the sass file\n\n        minified        - only include the minified css file\n\n        css             - only include the compiled css file\n\n        Default:        css\n\u0060\u0060\u0060\n\n### Inclusion of sample content\n\n\u0060\u0060\u0060no-highlight\n-is|--include-samples   wether to include sample files in the generated content\n\n        bool            - Optional\n\n        Default:        true\n\u0060\u0060\u0060\n\n### Create notebooks\n\n\u0060\u0060\u0060no-highlight\n-in|--include-notebooks  wether to include the notebook template file\n        \n        bool            - Optional\n\n        Default:        true\n\u0060\u0060\u0060\n\n*)\n"},{"uri":"/BIO-BTE-06-L-7/JP01_FSharpExcercises.html","title":"FSharp Introduction Excercises\n","content":"(** \nThis notebook contains introductional excercises for the FSharp programming language and also some small code examples for correct formatting.\nIf you have questions at any point please ask us. We will discuss the first batch (task 1-6) before you can start the rest.\n\n# FSharp Introduction Excercises\n\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/CSBiology/BIO-BTE-06-L-7/gh-pages?filepath=JP01_FSharpExcercises.ipynb)\n\n\n1. [Code Examples](#Code-Examples)\n2. [Excercises](#Excercises)\n    * [Task 1](#Task-1)\n    * [Task 2](#Task-2)\n    * [Task 3](#Task-3)\n    * [Task 4](#Task-4)\n    * [Task 5](#Task-5)\n    * [Task 6](#Task-6)\n    * [Task 7](#Task-7)\n    * [Task 8](#Task-8)\n    * [Task 9](#Task-9)\n    * [Task 10](#Task-10)\n    * [Task 11](#Task-11)\n\n\u003Chr\u003E\n\n## Code Examples\n\u003Ca href=\u0022#FSharp-Introduction-Excercises\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n\n\nWe will beginn with some minor code examples to show you correct formatting. You can even use these examples to help you understand minor programming logics for your excercises below.\n\n*)\n\n// Define a function \u0027mulitplyBy2\u0027, which should double any input Float.\n\nlet mulitplyBy2 x = x * 2.\n\nmulitplyBy2 3.\n\n(*** include-it ***)\n\n(**\nIf a excercise asks you to bind something to a specific name, keep that name! It might be used later on!\nAlso remember to use camel case for names. This works by having a regular first letter and then have a capital letter at the start of each new word.\n\nexmp: \u003Ccode\u003EthisIsACamelCaseExample\u003C/code\u003E\n\n*)\n\n// Create a function \u0027calculateCylinderVolume\u0027, which should, with a given radius and lenght, \n// calculate and return the volume of a cylinder AND print \u0022The volume of the cylinder is: XX.\u0022 into the console. \u0027XX\u0027 is,\n// of course, the correct volume for the cylinder. (The output of a printfn function is Unit.)\n\nlet calculateCylinderVolume radius length : float =\n   // function body\n   let pi = 3.14159 //or System.Math.PI\n   let volume = length * pi * radius * radius\n   printfn \u0022Das Volumen des Zylinders ist: %f\u0022 volume\n   volume\n\ncalculateCylinderVolume 2. 10.\n   \n(*** include-it ***)\n(*** include-output ***)\n\n(**\n\n\u003Cul\u003E\n    \u003Cli\u003ETry to follow the excercise as close as possible, to not overlook something like \u0022.. calculate (..) the volume of a cylinder AND print ..\u0022 as these small differences migth be a valuable part of the excercise.\u003C/li\u003E\n    \u003Cli\u003ELines of code do not have any cost, don\u0027t be to stingy about them, e.g. have an extra line with a binding of \u003Ccode\u003Elet pi = 3.14159\u003C/code\u003E, so you can just use \u0022pi\u0022 instead of the number. \u003C/li\u003E\n    \u003Cli\u003EThis improves readability and keeps the function modular.\u003C/li\u003E\n    \u003Cli\u003EBy defining pi inside of the scope of \u003Ccode\u003EcalculateCylinderVolume\u003C/code\u003E it cannot be accessed from outside, keeping your overall code nice and clean.\u003C/li\u003E\n\u003C/ul\u003E\n\n*)\n\n// A chessboard is a 8x8 field. The rows and columns have the indices 0 - 7.\n// Create a function, which should return true if two queens can hit each other or false if they can\u0027t.\n// The functions parameters should be two Tuples (int*int).\n\nlet canHit (queen1 : int*int) (queen2 : int*int) =\n    let (posX1, posY1),(posX2, posY2)= (queen1,queen2)\n    if \n        // check if both queens are on the same x-axis\n        (posX1 = posX2) \n        // check if both queens are on the same y-axis\n        || (posY1 = posY2) \n        // check if both queens are on the same diagonal\n        || (abs (posX1 - posX2) = abs (posY1 - posY2))\n    then\n        printfn \u0022Both queens can hit each other\u0022\n        true\n    else \n        printfn \u0022Both queen cannot hit each other\u0022\n        false\n        \ncanHit (3,5) (5,7)\n\n(*** include-it ***)\n(*** include-output ***)\n\n(**\n\u003Chr\u003E\n \n## Excercises \n\u003Ca href=\u0022#FSharp-Introduction-Excercises\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n\n### Task 1\n\u003Ca href=\u0022#FSharp-Introduction-Excercises\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n\n*)\n\n// Bind a String of your name (\u0022Name\u0022) to the name \u0027myFirstName\u0027.\n\n// Solution\n\nlet myFirstName = \u0022Kevin\u0022\n\nmyFirstName\n\n(*** include-it ***)\n\n(**\n### Task 2\n\u003Ca href=\u0022#FSharp-Introduction-Excercises\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n*)\n\n// Define a variable \u0027myName\u0027, by adding \u0027myFirstName\u0027 to the rest of your name.\n\n// Solution\n\nlet myName = myFirstName \u002B \u0022 Frey\u0022\n\nmyName\n\n(*** include-it ***)\n\n(** \n### Task 3\n\u003Ca href=\u0022#FSharp-Introduction-Excercises\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n*)\n\n// Define a variable \u0027summeXY\u0027 as the sum of any two Integer numbers. Do this, by defining x and y as separate \n// let - bindings inside the functional scope of the \u0027summeXY\u0027 function. \n// (The function MUST contain three let - bindings)\n\n// Solution\n\nlet summeXY =\n    let x = 2\n    let y = 34\n    x \u002B y\n\n\n(*** include-value:summeXY ***)\n\n(** \n### Task 4\n\u003Ca href=\u0022#FSharp-Introduction-Excercises\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n*)\n\n// Declare a Tuple, consisting of 2 and \u0022February\u0022 and bind the Tuple to the name \u0027tuple1\u0027\n\n// Solution \n\nlet tuple1 = (2,\u0022February\u0022)\n\n(*** include-value:tuple1 ***)\n\n(**\n### Task 5\n\u003Ca href=\u0022#FSharp-Introduction-Excercises\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n*)\n\n// Declare a Tuple, consisting of 2, \u0022February\u0022 and \u0022spring\u0022 and bind the Tuple to the name \u0027tuple2\u0027\n\n// Solution \n\nlet tuple2 = (2,\u0022February\u0022,\u0022spring\u0022)\n\n(*** include-value:tuple2 ***)\n\n(**\n### Task 6 \n\u003Ca href=\u0022#FSharp-Introduction-Excercises\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n*)\n\n// Access the second variable of the Tuple \u0027tuple1\u0027.\n// Access the second variable of the Tuple \u0027tuple2\u0027.\n\n// Solution \n\nlet solution1 = snd tuple1\n\nlet solution2 = (fun (x,y,z) -\u003E y) tuple2 // or: let (x,y,z) = tuple2\n\n(*** include-value:solution1 ***)\n(*** include-value:solution2 ***)\n\n(** \n### Task 7\n\u003Ca href=\u0022#FSharp-Introduction-Excercises\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n*)\n\n// Create a Record Type with the name \u0027Month\u0027. \u0027Month\u0027 should contain the fields \u0027Number\u0027 (int),\n// \u0027Name\u0027 (string) and \u0027Season\u0027 (string).\n\n// Solution\n\ntype Month =\n    {\n        Number: int\n        Name:   string\n        Season: string\n    }\n    \n(** \n### Task 8\n\u003Ca href=\u0022#FSharp-Introduction-Excercises\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n*)\n\n// Declare a function \u0027createMonth\u0027 with three input parameters and which should return a \u0027Month\u0027 - Record Type.\n// Use the values from \u0027tuple2\u0027 and create a month with these as input.  \n\n// Solution\n\nlet createMonth number name season =\n    {\n        Number = number\n        Name   = name\n        Season = season\n    }\n    \nlet feb = createMonth 2 \u0022February\u0022 \u0022spring\u0022\nfeb\n\n(*** include-value:feb ***)\n\n(** \n### Task 9\n\u003Ca href=\u0022#FSharp-Introduction-Excercises\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n*)\n\n// Create a function called \u0027myMonthsPrinter\u0027 which should take a \u0027Month\u0027 as input and return a unit output \n// (printfn - command) in the form of \u0022My favorite month is [Month Name]. It is the [Number of Month] month\n// in the year and i especially like this time because it is part of [Season].\u0022\n\n// Solution\n\nlet myMonthsPrinter (month:Month) =\n    printfn \u0022\n        My favorite month is %s. It is the %i month in the year \n        and i especially like this time because it is part of %s.\u0022\n        month.Name\n        month.Number\n        month.Season\n        \nmyMonthsPrinter feb\n\n(*** include-output ***)\n\n(** \n### Task 10\n\u003Ca href=\u0022#FSharp-Introduction-Excercises\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n*)\n\n// We want to put additional emphasis on readability of code ...\n\n// Oh no, the following function is not readable. Write the function new and use pipe operators!\n\nlet unreadableFunc x = (string ((x - 7) * 2) \u002B \u0022Generic\u0022).ToUpper().ToCharArray()\n\n// Solution\n\nlet readableFunc (x:int) = \n    x\n    |\u003E fun x -\u003E x - 7\n    |\u003E fun x -\u003E x * 2\n    |\u003E string\n    |\u003E fun x -\u003E x \u002B \u0022Generic\u0022\n    |\u003E fun x -\u003E x.ToUpper().ToCharArray()\n    \nreadableFunc 4 = unreadableFunc 4\n\n(*** include-it ***)\n\n(** \n### Task 11\n\u003Ca href=\u0022#FSharp-Introduction-Excercises\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n*)\n\n// Create a function \u0027replaceSmallNumbers\u0027, which should replace all \n// integers in a list with a 0 if the integer is smaller than 5.\n\nlet numList = [0 .. 20]\n\n// Solution\n\nlet replaceSmallNumbers (numList:int list) =\n    numList\n    |\u003E List.map (\n        fun x -\u003E\n            if x \u003C 5 then\n                0\n            else x\n        )\n    \nreplaceSmallNumbers numList\n\n(*** include-it ***)\n(**\n\u003Cnav class=\u0022level is-mobile\u0022\u003E\n    \u003Cdiv class=\u0022level-left\u0022\u003E\n        \u003Cdiv class=\u0022level-item\u0022\u003E\n            \u003Cbutton class=\u0022button is-primary is-outlined\u0022 onclick=\u0022location.href=\u0027/JP00_Systems_Biology_FSharp_Introduction.html\u0027;\u0022\u003E\u0026#171; JP00\u003C/button\u003E\n        \u003C/div\u003E\n    \u003C/div\u003E\n    \u003Cdiv class=\u0022level-right\u0022\u003E\n        \u003Cdiv class=\u0022level-item\u0022\u003E\n            \u003Cbutton class=\u0022button is-primary is-outlined\u0022 onclick=\u0022location.href=\u0027/JP02_Plant_Systems_Biology.html\u0027;\u0022\u003EJP02 \u0026#187;\u003C/button\u003E\n        \u003C/div\u003E\n    \u003C/div\u003E\n\u003C/nav\u003E\n*)"},{"uri":"/BIO-BTE-06-L-7/JP02_Plant_Systems_Biology.html","title":"Plant Systems Biology\n","content":"(** \n# Plant Systems Biology\n\n1. [Plant Systems Biology](#Plant-Systems-Biology)\n2. [Modeling growth for a defined cell number](#Modeling-growth-for-a-defined-cell-number)\n1. [Insert Growth Data and Display as Chart](#Insert-Growth-Data-and-Display-as-Chart)\n2. [Calculation of growth rate and doubling time for cell cultures](#Calculation-of-growth-rate-and-doubling-time-for-cell-cultures)\n3. [Fitting biological growth curves](#Fitting-biological-growth-curves)\u003Cbr\u003E\n    1. [Theory](#Theory)\u003Cbr\u003E\n    2. [Model selection](#Model-selection)\u003Cbr\u003E\n    3. [Exponential Fit](#Exponential-Fit)\u003Cbr\u003E\n4. [Calculate Doubling Time](#Calculate-Doubling-Time)\n5. [References](#References)\n*)\n\n(** \n## Plant Systems Biology\n\u003Ca href=\u0022#Plant-Systems-Biology\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n\n\u003Cdiv class=\u0022container\u0022\u003E\nThe general paradigm of Systems Biology clearly applies to plants, as they represent complex biological systems. \nThe functioning of a plant as a biological system is the result of a combination of multiple intertwined and dynamic interactions between its components. \nIn addition, most plants are sessile systems that have to face fluctuating environmental conditions, including biotic and abiotic stresses\u003Csup\u003E\u003Ca href=\u0022#8\u0022\u003E8\u003C/a\u003E\u003C/sup\u003E.\nThe process of a biological system responding to changes in environmental conditions is termed acclimation. These molecular physiological responses represent a complex \ndynamic adjustment of the interplay between genes, proteins and metabolites that allows the organism to acclimate to the changing environment. \nThe ability to acclimate ensures the survival of all living organisms and is therefore fundamental for the understanding of biological systems. \nDetailed knowledge about how plants acclimate to a changing environment is crucial especially in times of global climate changes, \nas plants are of great importance for our quality of life as a key source of food, shelter, fiber, medicine, and fuel\u003Csup\u003E\u003Ca href=\u0022#9\u0022\u003E9\u003C/a\u003E\u003C/sup\u003E.\n\nThe prominent model plant \u003Ci\u003EArabidopsis thaliana\u003C/i\u003E is well suited for plant Systems Biology studies because sophisticated experimental tools and extensive data \ncollections are readily available\u003Csup\u003E\u003Ca href=\u0022#10\u0022\u003E10\u003C/a\u003E\u003C/sup\u003E. However, the importance of a model organism is not only coined by the availability of molecular \ntools to manipulate the organism, but also by its agricultural and economic impact like in the cases of tobacco, rice, maize or \nbarley\u003Csup\u003E\u003Ca href=\u0022#11\u0022\u003E11\u003C/a\u003E\u003C/sup\u003E. Also microalgae are of special economic interest due to their potential as biofuel producers\u003Csup\u003E\u003Ca href=\u0022#12\u0022\u003E12\u003C/a\u003E\u003C/sup\u003E. \nAdditionally, the use of organisms with lower biological complexity facilitates the feasibility of System Biology studies and is an important factor to consider \nfor the choice of a suitable model organism in Systems Biology.\n\nThe eukaryotic green alga \u003Ci\u003EChlamydomonas reinhardtii\u003C/i\u003E is particularly well suited for plant Systems Biology approaches. \nThis unicellular freshwater and soil-dwelling alga has a single, cup-shaped chloroplast with a photosynthetic apparatus that is similar to \nthat of higher plants\u003Csup\u003E\u003Ca href=\u0022#13\u0022\u003E13\u003C/a\u003E,\u003Ca href=\u0022#14\u0022\u003E14\u003C/a\u003E\u003C/sup\u003E. Hence, results gained on photosynthesis processes in \u003Ci\u003EChlamydomonas\u003C/i\u003E \nare likely to be transferable to higher plants. The nuclear, mitochondrial, and chloroplast genomes have been sequenced and tools for manipulating them \nare available\u003Csup\u003E\u003Ca href=\u0022#14\u0022\u003E14\u003C/a\u003E\u003C/sup\u003E. \u003Ci\u003EChlamydomonas\u003C/i\u003E cells have a size of ~10 \u00B5m and grow under photo-, mixo-, and heterotrophic conditions \nwith a generation time of ~5-8 h\u003Csup\u003E\u003Ca href=\u0022#15\u0022\u003E15\u003C/a\u003E\u003C/sup\u003E. \u003Ci\u003EChlamydomonas\u003C/i\u003E can be maintained under controlled conditions and environmental \nchanges can be applied homogeneously and rapidly to all cells in a liquid culture. In contrast to multicellular organisms there are no influences by \ntissue heterogeneity. Even the influence of different cell cycle stages may be ruled out by performing experiments with asynchronous cell cultures \n\u003Csup\u003E\u003Ca href=\u0022#16\u0022\u003E16\u003C/a\u003E,\u003Ca href=\u0022#17\u0022\u003E17\u003C/a\u003E\u003C/sup\u003E. Finally, gene families in Chlamydomonas have fewer members than those in higher plants thus facilitating the \ninterpretation of results involving many genes/proteins\u003Csup\u003E\u003Ca href=\u0022#14\u0022\u003E14\u003C/a\u003E\u003C/sup\u003E.\n\u003C/div\u003E\n*)\n\n(** \n## Modeling growth for a defined cell number\n\u003Ca href=\u0022#Plant-Systems-Biology\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n\n\u003Cdiv class=\u0022container\u0022\u003E\nIn order to solves real world task more convenient, F# provides a huge collection of additional programming libraries. \nAnything that extends beyond the basics must be written by a user. If the chunk of code is useful to multiple different users, \nit\u0027s often put into a library to make it easily reusable. A library is a collection of related pieces of code that have been compiled \nand stored together in a single file and can than be used an included. The most important libraries in F# for bioinformatics are:\n\n\u003Cul\u003E\n    \u003Cli\u003E\u003Ca href=\u0022https://csbiology.github.io/BioFSharp/\u0022\u003EBioFSharp\u003C/a\u003E: Open source bioinformatics and computational biology toolbox written in F#\u003C/li\u003E\n    \u003Cli\u003E\u003Ca href=\u0022https://csbiology.github.io/FSharp.Stats/\u0022\u003EFSharp.Stats\u003C/a\u003E: F# project for statistical computing \u003C/li\u003E\n    \u003Cli\u003E\u003Ca href=\u0022https://github.com/plotly/Plotly.NET\u0022\u003EPlotly.NET\u003C/a\u003E: .NET interface for plotly.js written in F# \uD83D\uDCC8 \u003C/li\u003E\n\u003C/ul\u003E\n\nThe first real world use case of F# in Systems Biology is to model growth for a defined cell number to see possible overexpression effects. \nBiologists often utilize growth experiments to analyze basic properties of a given organism or cellular model. For a solid comparison of data \nobtain from different experiment and to investigate the speci\uFB01c e\uFB00ect of a given experimental set up, modeling the growth is needed after recording the data. \n\nThis notebook introduces two basic ways to model growth of \u003Ci\u003EChlamydomonas reinhardtii\u003C/i\u003E using F#.\n\nNow, let\u0027s get started by loading our libraries first.\n\u003C/div\u003E\n*)\n\n#r \u0022nuget: FSharp.Stats, 0.4.0\u0022\n#r \u0022nuget: Plotly.NET, 2.0.0-beta6\u0022\n//#load \u0022..\\IfSharp\\Paket.Generated.Refs.fsx\u0022\n//#load \u0022..\\IfSharp\\FSharp.Plotly.fsx\u0022\nopen Plotly.NET\nopen FSharp.Stats\nopen FSharp.Stats.Fitting.NonLinearRegression\n\n(** \n## Insert Growth Data and Display as Chart\n\u003Ca href=\u0022#Plant-Systems-Biology\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n\nA normal cell culture experiment with measurements for the growth curve will return data like the following.\nMultiple cell counts (y_Count) each related to a specific timepoint (x_Hours).\n*)\n// Code-Block 1\n\nlet exmp_x_Hours = [|0.; 19.5; 25.5; 43.; 48.5; 51.25; 67.75|]\nlet exmp_y_Count = [|1659000.; 4169000.; 6585400.; 16608400.; 17257800.; nan; 18041000.|]\n\n/// filter out any nans. These could be introduced through missing measurements.\nlet exmp_x_Hours_Filtered,exmp_y_Count_Filtered =\n    Array.zip exmp_x_Hours exmp_y_Count\n    |\u003E Array.filter (fun (x,y) -\u003E isNan y = false \u0026\u0026 isNan x = false )\n    |\u003E Array.unzip\n\n// Such data can easily be display with the following code block.\n// Chart.Point takes a sequence of x-axis-points and a series of y-axis-points as input\nlet example_Chart_1 = \n    Chart.Point(exmp_x_Hours_Filtered,exmp_y_Count_Filtered)\n    // some minor styling with title and axis-titles.\n    |\u003E Chart.withTitle \u0022Growth curve of \u003Ci\u003EClamydomonas reinhardtii\u003C/i\u003E cell cultures\u0022\n    |\u003E Chart.withX_AxisStyle (\u0022Number of cells\u0022)\n    |\u003E Chart.withY_AxisStyle (\u0022Time [hours]\u0022)\n\n(***hide***)\nexample_Chart_1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Calculation of growth rate and doubling time for cell cultures\n\u003Ca href=\u0022#Plant-Systems-Biology\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n\n\u003Cdiv class=\u0022container\u0022\u003E\nThe normal growth of an in vitro cell culture is defined through three phases. The lag phase in which the cells still acclimate to the growth conditions, the exponential growth, also called log phase, during which cell growth is exponential due to the proliferation of cells into two daughter cells, and the stationary phase in which the growth rate and the death rate are equal. The stationary phase is typically initiated due to limitations in growth conditions, e.g. depletion of essential nutrients or accumulation of toxic/inhibitory excretions/products. The doubling time defines a time interval in which the quantity of cells doubles and is calculated as seen in Equation 1.\n\n\u003Ci\u003EEquation 1: Calculation of the doubling time. Growth rate is calculates as shown in Equation 2.\u003C/i\u003E\n\n\u003Cdiv class=\u0022container\u0022\u003E\n\u003Cimg src=\u0022https://latex.codecogs.com/gif.latex?doubling\u0026space;Time\u0026space;=\u0026space;\\frac{ln(2)}{growthRate}\u0022 title=\u0022doubling Time = \\frac{ln(2)}{growthRate}\u0022 style=\u0022margin: 1rem auto 0; display: block\u0022/\u003E\n\u003C/div\u003E\n\nGrowth rate can then be calculated as shown in Equation 2.\n\n\u003Ci\u003EEquation 2: Calculation of the growth rate. With N(t) = the number of cells at time t, N(0) = number of cells at time 0, gr = growth rate, and t = time.\u003C/i\u003E\n\n\u003Cdiv class=\u0022container\u0022\u003E\n\u003Cimg src=\u0022https://latex.codecogs.com/gif.latex?gr=\\frac{ln(\\frac{N(t)}{N(0)})}{t}\u0022 title=\u0022gr=\\frac{ln(\\frac{N(t)}{N(0)})}{t}\u0022 style=\u0022margin: 1rem auto 0; display: block\u0022/\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Chr\u003E\n*)\n\n(** \n## Fitting biological growth curves\n\u003Ca href=\u0022#Plant-Systems-Biology\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n\n\n### Theory\n\u003Ca href=\u0022#Plant-Systems-Biology\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n\n\u003Cdiv class=\u0022container\u0022\u003E\nTo derive parameters required for e.g. the doubling time calculation, the measured growth data points have to be modelled. \nIn order to obtain a continuous function with known coefficients, a suitable model function is fitted onto the existing data. \nMany models exist, each one of them optimized for a specific task\u003Csup\u003E\u003Ca href=\u0022#18\u0022\u003E18\u003C/a\u003E\u003C/sup\u003E.\n\nLinear model function example: \u003Cimg src=\u0022https://latex.codecogs.com/gif.latex?f(x)\u0026space;=\u0026space;mx\u0026space;\u0026plus;\u0026space;b\u0022 title=\u0022f(x) = mx \u002B b\u0022 /\u003E\n \nWhen a model is fitted onto the data, there are endless possibilities to choose coefficients of the model function. \nIn the case above there are two coefficients to be identified: The slope m and the y-intercept b. But how can the best fitting coefficients be determined?\n\nTherefore a quality measure called \u003Cb\u003EResidual Sum of Squares (RSS)\u003C/b\u003E is used. It describes the discrepancy of the measured points \nand the corresponding estimation model. If the discrepancy is small, the RSS is small too.\n\nIn regression analysis the optimal set of coefficients (m and b) that \u003Ca href= \u0022https://mathworld.wolfram.com/LeastSquaresFitting.html\u0022\u003E minimizes the RSS is searched\u003C/a\u003E.\n\nIf there is no straightforward way to identify the RSS-minimizing coefficient set, then the problem is part of nonlinear regression. \nHere, initial coefficients are guessed and the RSS is calculated. Thereafter, the coefficients are modified in tiny steps. \nIf the RSS decreases, the direction of the coefficient change seems to be correct. \nBy \u003Ca href= \u0022https://books.google.de/books?id=rs51DwAAQBAJ\u0026pg=PA422\u0026lpg=PA422\u0026dq=rss\u002Bminimizing\u002Bsolver\u0026source=bl\u0026ots=qZ0Y4cYtM-\u0026sig=ACfU3U0rHGWCmTo_kv5wqYMmSo8ZKyj5Pg\u0026hl=de\u0026sa=X\u0026ved=2ahUKEwjKtdf-oaHoAhUUwsQBHX07DTwQ6AEwBHoECAkQAQ#v=onepage\u0026q=rss%20minimizing%20solver\u0026f=false\u0022\u003E \niteratively changing coefficients\u003C/a\u003E, the optimal coefficient set is determined when no further change leads to an decrease in RSS. \nAlgorithms, that perform such a \u0027gradient descent\u0027 methods to solve nonlinear regression tasks are called \u003Cb\u003Esolver\u003C/b\u003E \n(e.g. Gauss-Newton algorithm or Levenberg\u2013Marquardt algorithm). \u003Ca href= \u0022https://www.youtube.com/watch?v=sDv4f4s2SB8\u0022\u003E Introduction to RSS and optimization problems. \u003C/a\u003E\n\u003C/div\u003E\n\n### Model selection\n\u003Ca href=\u0022#Plant-Systems-Biology\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n     \n\u003Cdiv class=\u0022container\u0022\u003E\nUnder certain circumstances, more than one solution may arise out of a optimization process. \nIf the solutions are based on the same data and the same fitting model, the function minimizing the RSS can be selected as best estimator. \n\u003C/div\u003E\n\n### Exponential Fit\n\u003Ca href=\u0022#Plant-Systems-Biology\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n\n\u003Cdiv class=\u0022container\u0022\u003E\nSince cellular growth behaves in an exponential manner, it seems to make sense to use an exponential fitting function. \n\n\u003Cimg src=\u0022https://latex.codecogs.com/gif.latex?f(x)\u0026space;=\u0026space;ae^{bx}\u0022 title=\u0022f(x) = ae^{bx}\u0022 /\u003E\n\nAs seen below, the resulting \u003Ca href=\u0022https://da.khanacademy.org/science/biology/ecology/population-growth-and-regulation/a/exponential-logistic-growth\u0022\u003E exponential fit\u003C/a\u003E does not represent the data sufficiently, even though it is the best fit, that a exponential model can provide. This is caused by the lag- and stationary phase, both not following an exponential increase. \nIn order to use an exponential function as model, it would be necessary to discard data points from lag- and stationary phases and model the remaining data points. \n\n \nThere are two main problems regarding this workflow: \n\u003Col\u003E\n    \u003Cli value=\u0022(1)\u0022\u003E The assignment of points to lag-, log-, and stationary phases is a nontrivial task.\u003C/li\u003E\n    \u003Cli value=\u0022(2)\u0022\u003E The exponential phase only lasts a short period of time and therefore the number of points that can be assigned to the log phase is (very) low.\u003C/li\u003E \n\u003C/ol\u003E\nConsequential the fitted function is not robust against variance introduced during cell count measurements.\n\n\u003C/div\u003E\n\n*)\n\n// Code-Block 2\n\n// An template exponential function has the form f(x) = a * exp(b * x) with the two unknowns a and b. \n\n// The model we need already exists in FSharp.Stats and can be taken from the \u0022Table\u0022 module.\nlet expModel = Table.expModel\n\n// the solver needs additional information like the initial coefficient guesses or the coefficient accuracy\n// FSharp.Stats assists by estimating the required parameters based on the original input data\nlet solverOptions = Table.expSolverOptions exmp_x_Hours_Filtered exmp_y_Count_Filtered\n\n// The Gauss-Newton solver is used to find the optimal coefficients for an exponential function (expModel)\n// The result is a vector, containing parameter a and b as floats.\nlet coefficientsExp = GaussNewton.estimatedParams expModel solverOptions exmp_x_Hours_Filtered exmp_y_Count_Filtered\n\n// The determined coefficients can be inserted into the exponential template function\nlet fittingExpFunction x = coefficientsExp.[0] * System.Math.Exp(coefficientsExp.[1] * x)\n\n// create a chart with \nlet exp_Chart_1 = \n    [|0. .. (Array.last exmp_x_Hours_Filtered)|]\n    |\u003E Array.map (fun xValue -\u003E xValue,fittingExpFunction xValue) // gives tuples of (xValue,yValue)\n    |\u003E Chart.Line\n    |\u003E Chart.withTraceName \u0022exponential fit\u0022\n\n// styling of the chart axis\nlet templateAxis title = Axis.LinearAxis.init(Title=title,Showgrid=false,Showline=true,Mirror=StyleParam.Mirror.All)       \n\nlet exponentialFitChart =\n    [\n        example_Chart_1\n        |\u003E Chart.withTraceName \u0022data points\u0022\n        exp_Chart_1\n    ]\n    |\u003E Chart.Combine\n    |\u003E Chart.withX_Axis (templateAxis \u0022time [hours]\u0022)\n    |\u003E Chart.withY_Axis (templateAxis \u0022number of cells\u0022)\n    |\u003E Chart.withSize (900.,600.)\n\n(***hide***)\nexponentialFitChart |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n    \n(**\n## Logistic regression fit\n\u003Ca href=\u0022#Plant-Systems-Biology\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n\n\u003Cdiv class=\u0022container\u0022\u003E\nAs seen above, the model selection is a crucial step for obtaining reasonable functions and to derive function properties with \nwhich further studies are examined. The selected model should match the theoretical (time) course of the studied signal, but under \nconsideration of Occams razor principle. It states, that a approriate model with a low number of coefficients should be preferred over a \nmodel with many coefficients, since the excessive use of coefficients leads to overfitting.\n\nA better model that can be used in growth curve fitting, is a \u003Ca href= \u0022https://en.wikipedia.org/wiki/Logistic_function\u0022\u003Elogistic function\u003C/a\u003E. \nIt is defined by a minimum, a maximum, and a sigmoidal transition between those two. Thereby, the lag, log, and stationary phase are covered.\n\nThe function has the form: \u003Cimg src=\u0022https://latex.codecogs.com/gif.latex?f(x)=\\frac{L}{1\u0026plus;e^{-k(x-x_{0})}}\u0026plus;N\u0022 title=\u0022f(x)=\\frac{L}{1\u002Be^{-k(x-x_{0})}}\u002BN\u0022 /\u003E\n\nwhere:\n        \n__L__ = curve maximum\n\n__k__ = steepness\n\n__x0__ = xValue of sigmoid\u0027s midpoint\n\n__N__ = curve minimum\n\nIn the following, we will go through the necessary steps to calculate the doubling time with the help of a logistic fit. \nThis is more complex than the exponential fit, but the given problem requires a more sophisticated method.\n\u003C/div\u003E\n*)\n\n// Code-Block 3\n\n// The model we need already exists in FSharp.Stats and can be taken from the \u0022Table\u0022 module.\nlet modelLogistic = Table.LogisticFunctionVarYAscending\n\n// To fit the logistic function, the solver requires more parameters. Some of them are stored in the solverOption type\nlet lineSolverOptions initialParamGuess = {\n    // defines the stepwidth of the x_value change\n    MinimumDeltaValue       = 0.00001\n    // defines the stepwidth of the parameter change\n    MinimumDeltaParameters  = 0.00001\n    // defines the number of iterations until the solver converges to a solution\n    MaximumIterations       = 10000\n    // initial parameters to start the solving algorithms\n    // vector containing all coefficients of the function: vector [L;k;x0;N]\n    InitialParamGuess       = initialParamGuess\n    }\n\n// Generation of solverOptions with varying steepnesses\nlet initialGuess = \n    // maximum measured intensity/cell count\n    let l  = exmp_y_Count_Filtered |\u003E Array.max\n    // estimate of the xValue of sigmoid\u0027s midpoint\n    let x0 = (exmp_x_Hours_Filtered |\u003E Array.max) / 2.\n    // minimum measured intensity/cell count.\n    let n  = exmp_y_Count_Filtered |\u003E Array.min \n    \n    //since steepness in unknown, a variety of steepnesses is provided \n    let steepnessRange = [|0.01 .. 0.01 .. 1.|]\n    \n    steepnessRange\n    |\u003E Array.map (fun steepness -\u003E lineSolverOptions [|l; steepness; x0; n|])\n\n// Estimate coefficients for a possible solution based on residual sum \n// of squares. Besides the solverOptions, an upper and lower bound for \n// the parameters are required. It is recommended to define them depending \n// on the initial param guess.\n// It reports coefficients tupled with a corresponding RSS value.\nlet estimateCoefficientsRSS =\n    initialGuess\n    |\u003E Array.map (fun solvOpt -\u003E\n        let lowerBound =\n            solvOpt.InitialParamGuess\n            |\u003E Array.map (fun param -\u003E param - (abs param) * 0.2)\n            |\u003E vector\n        let upperBound =\n            solvOpt.InitialParamGuess\n            |\u003E Array.map (fun param -\u003E param \u002B (abs param) * 0.2)\n            |\u003E vector\n        // all parameters are given to the solver and the set of coefficients that minimize the RSS are reported\n        LevenbergMarquardtConstrained.estimatedParamsWithRSS \n            modelLogistic         // logistic function model\n            solvOpt               // solver options with optimization parameters and initial guess\n            0.001                 //\n            10.                   //\n            lowerBound            // lower bound of coefficient space\n            upperBound            // upper bound of coefficient space\n            exmp_x_Hours_Filtered // x data\n            exmp_y_Count_Filtered // y data\n    )\n    |\u003E Array.filter (fun (coeffs,rss) -\u003E not(coeffs |\u003E Vector.exists System.Double.IsNaN)) // discard solutions with nan as coefficients\n    |\u003E Array.minBy snd // minimize all possible solutions based on RSS quality measure\n    |\u003E fun (solCoeffs,rss) -\u003E\n        printfn \u0022Chosen Estimate: %A\u0022 solCoeffs\n        printfn \u0022Equation: (%.1f / (1. \u002B exp(-%.3f * (x - %.3f)))) \u002B %.1f\u0022 solCoeffs.[0] solCoeffs.[1] solCoeffs.[2] solCoeffs.[3]\n        solCoeffs\n        \n// Create fitting function from optimal coefficients\nlet fittingLogisticFunction = modelLogistic.GetFunctionValue estimateCoefficientsRSS\n\n// Code-Block 4\n\n// fit of the optimized logistic function over all x Values\nlet fittedY = \n     [|0. .. exmp_x_Hours |\u003E Array.max|]\n     |\u003E Array.map (fun x -\u003E x, fittingLogisticFunction x) //tupled (xValue,yValue)\n\nlet fittedLogisticFunc =\n    [\n        // raw chart\n        Chart.Point (exmp_x_Hours, exmp_y_Count) |\u003E Chart.withTraceName\u0022data points\u0022\n        // logistic fit\n        Chart.Line fittedY                       |\u003E Chart.withTraceName \u0022logistic fit\u0022\n    ]\n    |\u003E Chart.Combine\n    |\u003E Chart.withY_Axis (templateAxis \u0022cell count\u0022)\n    |\u003E Chart.withX_Axis (templateAxis \u0022time [Hours]\u0022)\n\n(***hide***)\nfittedLogisticFunc |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n    \n## Calculate Doubling Time\n\u003Ca href=\u0022#Plant-Systems-Biology\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n\n\u003Cdiv class=\u0022container\u0022\u003E\nTo calculate the doubling time it is necessary to determine the growth rate (gr) for \u003Ci\u003Eequation 1\u003C/i\u003E.\nTo get gr we make use of the first and second derivative of the logistic function. They can be calculated by hand or with help \nof \u003Ca href=\u0022https://www.ableitungsrechner.net/\u0022\u003Ederivative calculator\u003C/a\u003E.\n\nThe first derivative of the logistic function is: \n\n\u003Cdiv class=\u0022container\u0022\u003E\n\u003Cimg src=\u0022https://latex.codecogs.com/gif.latex?\\dfrac{kl\\mathrm{e}^{k\\left(x-m\\right)}}{\\left(\\mathrm{e}^{k\\left(x-m\\right)}\u0026plus;1\\right)^2}\u0022 title=\u0022\\dfrac{kl\\mathrm{e}^{k\\left(x-m\\right)}}{\\left(\\mathrm{e}^{k\\left(x-m\\right)}\u002B1\\right)^2}\u0022 style=\u0022margin: 1rem auto 0; display: block\u0022 /\u003E\n\u003C/div\u003E\n\nThe second derivative of the logistic function is: \n\n\u003Cdiv class=\u0022container\u0022\u003E\n\u003Cimg src=\u0022https://latex.codecogs.com/gif.latex?-\\dfrac{k^2l\\left(\\mathrm{e}^{k\\left(x-m\\right)}-1\\right)\\mathrm{e}^{k\\left(x-m\\right)}}{\\left(\\mathrm{e}^{k\\left(x-m\\right)}\u0026plus;1\\right)^3}\u0022 title=\u0022-\\dfrac{k^2l\\left(\\mathrm{e}^{k\\left(x-m\\right)}-1\\right)\\mathrm{e}^{k\\left(x-m\\right)}}{\\left(\\mathrm{e}^{k\\left(x-m\\right)}\u002B1\\right)^3}\u0022 style=\u0022margin: 1rem auto 0; display: block\u0022 /\u003E\n\u003C/div\u003E\n\n\u003C/div\u003E\n*)\n\n// Code-Block 5\n\n// calculate fst derivative of logistic function\nlet fstDerivative x = \n    let l  = estimateCoefficientsRSS.[0]\n    let k  = estimateCoefficientsRSS.[1]\n    let x0 = estimateCoefficientsRSS.[2]\n    let n  = estimateCoefficientsRSS.[3]\n    let exp = System.Math.Exp(k*(x-x0))\n    - (k**2.*l*(exp - 1.)* exp ) / (exp \u002B 1.)**3.\n\n// calculate snd derivative of logistic function \nlet sndDerivative x = \n    let l  = estimateCoefficientsRSS.[0]\n    let k  = estimateCoefficientsRSS.[1]\n    let x0 = estimateCoefficientsRSS.[2]\n    let n  = estimateCoefficientsRSS.[3]\n    let exp = System.Math.Exp(k*(x-x0))\n    (k*l*exp) / (exp \u002B 1.)**2.\n\n// calculate derivatives to corresponding x values\nlet yValuesOfDerivative fkt = \n    [|0. .. 0.5 .. exmp_x_Hours |\u003E Array.max|]\n    |\u003E Array.map (fun x -\u003E x,fkt x)\n    \nlet fitAllLogisticFunc =\n    [\n        Chart.Line (yValuesOfDerivative fstDerivative)|\u003E Chart.withTraceName \u0022fst derivative\u0022\n        Chart.Line (yValuesOfDerivative sndDerivative)|\u003E Chart.withTraceName \u0022snd derivative\u0022\n    ]\n    |\u003E Chart.Combine\n    |\u003E Chart.withY_Axis (templateAxis \u0022slope or curvature\u0022)\n    |\u003E Chart.withX_Axis (templateAxis \u0022time [hours]\u0022)\n\n(***hide***)\nfitAllLogisticFunc |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n\u003Cdiv class=\u0022container\u0022\u003E\nWe define the region between the maximal and minimal curvature (second derivative) as the time period to derive the growth rate from. \nAn alternative is to just use the slope at the midpoint because this is the point of maximal slope (minimal generation time), but since \nthis calculation would be only dependent from this particular point we go for the more conservative approach.\n    \nWhen the xValues of the maximal curvatures are identified (either by calculus or by plotting the derivatives) the generation time calculation\n is straight forward (\u003Ca href=\u0022https://en.wikipedia.org/wiki/Doubling_time\u0022\u003EWikipedia - Doubling time\u003C/a\u003E).\n\u003C/div\u003E\n*)\n\n// Code-Block 6\n\n// The exponential phase is considered to be between the maximal positive curvature\n// and the minimal negative curvature of the fitting functions (other interpretations possible).\nlet xValuesOfMaximalCurvature = [| 23.5 ; 44.0 |]\n\nlet calculateDoublingTimeLogistic fittingFunction =\n\n    //https://en.wikipedia.org/wiki/Doubling_time\n    // -\u003E Cell culture doubling time\n    let growthRate nCells0 nCellsT t =\n        log(nCellsT/nCells0)\n        |\u003E fun x -\u003E x/t\n\n    let doublingTime growthRate =\n        (log(2.))/growthRate\n\n    /// get the corresponding cell counts around the midpoint of the logistic function\n    let rootsYY = xValuesOfMaximalCurvature |\u003E Array.map fittingFunction\n    \n    /// calculate the time difference between both roots\n    let diff = xValuesOfMaximalCurvature.[1] - xValuesOfMaximalCurvature.[0]\n    \n    /// get the minimum measured cell count and the maximum measured cell count\n    let min,max = rootsYY.[0], rootsYY.[1]\n\n    let doublingTime =\n        growthRate min max diff\n        |\u003E doublingTime\n\n    doublingTime\n    \nlet doublingTime = \n    calculateDoublingTimeLogistic fittingLogisticFunction\n    \nsprintf \u0022The doubling time is %.2f hours.\u0022 doublingTime\n\n(*** include-it ***)\n\n(**\n\u003Cnav class=\u0022level is-mobile\u0022\u003E\n    \u003Cdiv class=\u0022level-left\u0022\u003E\n        \u003Cdiv class=\u0022level-item\u0022\u003E\n            \u003Cbutton class=\u0022button is-primary is-outlined\u0022 onclick=\u0022location.href=\u0027/JP01_FSharpExcercises.html\u0027;\u0022\u003E\u0026#171; JP01\u003C/button\u003E\n        \u003C/div\u003E\n    \u003C/div\u003E\n    \u003Cdiv class=\u0022level-right\u0022\u003E\n        \u003Cdiv class=\u0022level-item\u0022\u003E\n            \u003Cbutton class=\u0022button is-primary is-outlined\u0022 onclick=\u0022location.href=\u0027/JP03_Mass_spectrometry_based_proteomics.html\u0027;\u0022\u003EJP03 \u0026#187;\u003C/button\u003E\n        \u003C/div\u003E\n    \u003C/div\u003E\n\u003C/nav\u003E\n*)\n\n(**\n## References\n\u003Ca href=\u0022#Plant-Systems-Biology\u0022 style=\u0022display: inline-block\u0022\u003E\u003Csup\u003E\u0026#8593;back\u003C/sup\u003E\u003C/a\u003E\u003Cbr\u003E\n\n\u003Cbr\u003E\n\n\u003Col\u003E\n\u003Cli Value=\u00228\u0022 Id=\u00228\u0022\u003ERuffel, S., Krouk, G. \u0026 Coruzzi, G. M. A systems view of responses to nutritional cues in Arabidopsis: toward a paradigm shift for predictive network modeling. Plant physiology 152, 445\u2013452; 10.1104/pp.109.148502 (2010).\u003C/li\u003E\n\u003Cli Id=\u00229\u0022\u003E Minorsky, P. V. Achieving the in Silico Plant. Systems Biology and the Future of Plant Biological Research. Plant physiology 132, 404\u2013409; 10.1104/pp.900076 (2003). \u003Cdiv\u003E\n\u003Cli Id=\u002210\u0022\u003EVan Norman, Jaimie M \u0026 Benfey, P. N. Arabidopsis thaliana as a model organism in systems biology. Wiley interdisciplinary reviews. Systems biology and medicine 1, 372\u2013379; 10.1002/wsbm.25 (2009).\u003C/li\u003E\n\u003Cli Id=\u002211\u0022\u003EP\u00E3curar, D. I. Model organisms - a journey from the dawn of biological research to the post-genomic era. Romanian Society of Biological Sciences, 4087\u20134094 (2009).\u003C/li\u003E\n\u003Cli Id=\u002212\u0022\u003ECagnon, C. et al. Development of a forward genetic screen to isolate oil mutants in the green microalga Chlamydomonas reinhardtii. Biotechnology for biofuels 6, 178; 10.1186/1754-6834-6-178 (2013).\u003C/li\u003E\n\u003Cli Id=\u002213\u0022\u003EEberhard, S., Finazzi, G. \u0026 Wollman, F.-A. The dynamics of photosynthesis. Annual review of genetics 42, 463\u2013515; 10.1146/annurev.genet.42.110807.091452 (2008).\u003C/li\u003E\n\u003Cli Id=\u002214\u0022\u003EMerchant, S. S. et al. The Chlamydomonas genome reveals the evolution of key animal and plant functions. Science (New York, N.Y.) 318, 245\u2013250; 10.1126/science.1143609 (2007).\u003C/li\u003E\n\u003Cli Id=\u002215\u0022\u003EHarris, E. H. The chlamydomonas sourcebook. 2nd ed. (Academic, London, 2008).\u003C/li\u003E\n\u003Cli Id=\u002216\u0022\u003EBruggeman, F. J. \u0026 Westerhoff, H. V. The nature of systems biology. Trends in microbiology 15, 45\u201350; 10.1016/j.tim.2006.11.003 (2007).\u003C/li\u003E\n\u003Cli Id=\u002217\u0022\u003EHarris, E. H. CHLAMYDOMONAS AS A MODEL ORGANISM. Annual review of plant physiology and plant molecular biology 52, 363\u2013406; 10.1146/annurev.arplant.52.1.363 (2001).\u003C/li\u003E\n\u003Cli Id=\u002218\u0022\u003EKaplan, S. et al. Comparison of growth curves using non-linear regression function in Japanese squail. Journal of Applied Animal Research 46, 112-117; 10.1080/09712119.2016.1268965 (2018).\u003C/li\u003E.\n\u003C/ol\u003E\n*)"}]