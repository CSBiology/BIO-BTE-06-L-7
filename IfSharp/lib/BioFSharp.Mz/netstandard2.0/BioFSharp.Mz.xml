<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>BioFSharp.Mz</name></assembly>
<members>
<member name="M:BioFSharp.Mz.PeakDetection.Wavelet.identifyPeaks(BioFSharp.Mz.PeakDetection.Wavelet.Parameters,System.Tuple{System.Double,System.Double}[])">

</member>
<member name="M:BioFSharp.Mz.PeakDetection.Wavelet.identifyPeaksBy(System.Int32,FSharp.Stats.Signal.Padding.BorderPaddingMethod,FSharp.Stats.Signal.Padding.InternalPaddingMethod,FSharp.Stats.Signal.Padding.HugeGapPaddingMethod,System.Double,System.Double,System.Double,System.Double,System.Tuple{System.Double,System.Double}[])">

</member>
<member name="M:BioFSharp.Mz.PeakDetection.Wavelet.optimizeWaveletFits(System.Tuple{System.Double,System.Double}[],Microsoft.FSharp.Collections.FSharpList{System.Tuple{BioFSharp.Mz.PeakDetection.Wavelet.WaveletPeak,BioFSharp.Mz.PeakDetection.Wavelet.Gaussian}})">

</member>
<member name="M:BioFSharp.Mz.PeakDetection.Wavelet.aic(System.Int32,System.Int32,System.Double)">

</member>
<member name="M:BioFSharp.Mz.PeakDetection.Wavelet.getMinPeakDistance(System.Double)">

</member>
<member name="M:BioFSharp.Mz.PeakDetection.Wavelet.getScales(System.Double,System.Double)">

</member>
<member name="M:BioFSharp.Mz.PeakDetection.Wavelet.getColHighBound(System.Double[],System.Int32,System.Double)">

</member>
<member name="M:BioFSharp.Mz.PeakDetection.Wavelet.getColLowBound(System.Double[],System.Int32,System.Double)">

</member>
<member name="M:BioFSharp.Mz.TaggedPeak.createTaggedPeakOf(BioFSharp.Mz.TaggedMass.TaggedMass,Microsoft.FSharp.Core.FSharpFunc{BioFSharp.Mz.Ions.IonTypeFlag,System.Double})">

</member>
<member name="M:BioFSharp.Mz.TaggedPeak.createTaggedPeak(BioFSharp.Mz.Ions.IonTypeFlag,System.Double,System.Double)">

</member>
<member name="M:BioFSharp.Mz.TaggedMass.createTaggedNH3Loss(BioFSharp.Mz.Ions.IonTypeFlag,System.Double)">

</member>
<member name="M:BioFSharp.Mz.TaggedMass.createTaggedH2OLoss(BioFSharp.Mz.Ions.IonTypeFlag,System.Double)">

</member>
<member name="M:BioFSharp.Mz.TaggedMass.createTaggedMass(BioFSharp.Mz.Ions.IonTypeFlag,System.Double)">

</member>
<member name="M:BioFSharp.Mz.Peaks.createPeakFamily``1(``0,Microsoft.FSharp.Collections.FSharpList{``0})">

</member>
<member name="M:BioFSharp.Mz.Peaks.createPeak(System.Double,System.Double)">

</member>
<member name="M:BioFSharp.Mz.PeakArray.peaksToNearestUnitDaltonBinVector``1(``0[],System.Double,System.Double)">
<summary>
 Bins peaks to their nearest 1 Da bin. Filters out peaks where the mz &lt; minMassBoarder &amp; &gt; maxMassBoarder
</summary>
</member>
<member name="M:BioFSharp.Mz.PeakArray.peaksToNearestUnitDaltonBin``1(``0[],System.Int32,System.Int32)">
<summary>
 Bins peaks to their nearest 1 Da bin
</summary>
</member>
<member name="M:BioFSharp.Mz.PeakArray.binToUpperIntergerMass``1(``0[],System.Int32,System.Int32)">
<summary>
 Bins peaks to their next upperIntegerMass bin
</summary>
</member>
<member name="M:BioFSharp.Mz.PeakArray.unzipMzInt``1(``0[])">
<summary>
 Iterates the PeakArray and unzips the value fields of each peak into two seperate arrays, the first containing 
 the mz values, the second the intensities. 
</summary>
</member>
<member name="M:BioFSharp.Mz.PeakArray.zipMzInt(System.Double[],System.Double[])">
<summary>
 Iterates the mz and intensity array and creates a Peak(mz,intensity) for each value pair. 
 Returns a new Peak array. 
</summary>
</member>
<member name="M:BioFSharp.Mz.PeakArray.map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])">
<summary>
 Builds a new PeakArray whose elements are the results of applying the given function to each 
 of the elements of the PeakArray.
</summary>
</member>
<member name="M:BioFSharp.Mz.PeakList.unzipMzInt``1(Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Iterates the PeakList and unzips the fields of each peak into two seperate lists, the first containing 
 the mz values, the second the intensities. 
</summary>
</member>
<member name="M:BioFSharp.Mz.PeakList.zipMzInt(Microsoft.FSharp.Collections.FSharpList{System.Double},Microsoft.FSharp.Collections.FSharpList{System.Double})">
<summary>
 Iterates the mz and intensity lists and creates a Peak(mz,intensity) for each value pair. 
 Returns a new PeakList. 
</summary>
</member>
<member name="M:BioFSharp.Mz.PeakList.map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Builds a new PeakArray whose elements are the results of applying the given function to each 
 of the elements of the PeakArray.
</summary>
</member>
<member name="M:BioFSharp.Mz.Fragmentation.isAminoLoss(BioFSharp.AminoAcids.AminoAcid)">
<summary>
 Returns true if the amino acid &quot;a&quot; is prone to cleave off an NH2 molecule of their side chain uppon fragmentation.
</summary>
</member>
<member name="M:BioFSharp.Mz.Fragmentation.isWaterLoss(BioFSharp.AminoAcids.AminoAcid)">
<summary>
 Returns true if the amino acid &quot;a&quot; is prone to cleave off an H2O molecule of their side chain uppon fragmentation.
</summary>
</member>
<member name="P:BioFSharp.Mz.Fragmentation.aminoLossSet">
<summary>
 Set of amino acids that are prone to cleave off an NH2 molecule of their side chain uppon fragmentation.
</summary>
</member>
<member name="P:BioFSharp.Mz.Fragmentation.waterLossSet">
<summary>
 Set of amino acids that are prone to cleave off an H2O molecule of their side chain uppon fragmentation.
</summary>
</member>
<member name="M:BioFSharp.Mz.Fragmentation.setIsotopicModification(BioFSharp.ModificationInfo.Modification,BioFSharp.ModificationInfo.Modification)">
<summary>
 Modifies existing modification (md) using (md&apos;)
</summary>
</member>
<member name="M:BioFSharp.Mz.Fragmentation.Series.fragmentMasses``2(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{``0,System.Double},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid},Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.PeakFamily{BioFSharp.Mz.TaggedMass.TaggedMass}}}},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{``1,System.Double},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid},Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.PeakFamily{BioFSharp.Mz.TaggedMass.TaggedMass}}}},Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">
<summary>
 Returns the fragment masses of the amino acid sequence specified by aal. The ionseries are specified by functions
 &quot;nTerminalSeries&quot; and &quot;cTerminalSeries&quot;. The mass accuracy is determined by the massfunction applied.
</summary>
</member>
<member name="M:BioFSharp.Mz.Fragmentation.Series.zOfBioList(Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">
<summary>
 Returns the z series of the given amino acids list. The mass accuracy is determined by the massfunction applied.
</summary>
</member>
<member name="M:BioFSharp.Mz.Fragmentation.Series.yOfBioList(Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">
<summary>
 Returns the y series of the given amino acids list. The mass accuracy is determined by the massfunction applied.
</summary>
</member>
<member name="M:BioFSharp.Mz.Fragmentation.Series.xOfBioList(Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">
<summary>
 Returns the x series of the given amino acids list. The mass accuracy is determined by the massfunction applied.
</summary>
</member>
<member name="M:BioFSharp.Mz.Fragmentation.Series.yzOfBioList(Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">
<summary>
 Returns the y and z series of the given amino acids list. The mass accuracy is determined by the massfunction applied.
</summary>
</member>
<member name="M:BioFSharp.Mz.Fragmentation.Series.xzOfBioList(Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">
<summary>
 Returns the x and z series of the given amino acids list. The mass accuracy is determined by the massfunction applied.
</summary>
</member>
<member name="M:BioFSharp.Mz.Fragmentation.Series.xyOfBioList(Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">
<summary>
 Returns the x and y series of the given amino acids list. The mass accuracy is determined by the massfunction applied.
</summary>
</member>
<member name="M:BioFSharp.Mz.Fragmentation.Series.xyzOfBioList(Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">
<summary>
 Returns the x y and z series of the given amino acids list. The mass accuracy is determined by the massfunction applied.
</summary>
</member>
<member name="M:BioFSharp.Mz.Fragmentation.Series.cOfBioList(Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">
<summary>
 Returns the c series of the given amino acids list. The mass accuracy is determined by the massfunction applied.
</summary>
</member>
<member name="M:BioFSharp.Mz.Fragmentation.Series.bOfBioList(Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">
<summary>
 Returns the b series of the given amino acids list. The mass accuracy is determined by the massfunction applied.
</summary>
</member>
<member name="M:BioFSharp.Mz.Fragmentation.Series.aOfBioList(Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">
<summary>
 Returns the a series of the given amino acids list. The mass accuracy is determined by the massfunction applied.
</summary>
</member>
<member name="M:BioFSharp.Mz.Fragmentation.Series.bcOfBioList(Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">
<summary>
 Returns the b and c series of the given amino acids list. The mass accuracy is determined by the massfunction applied.
</summary>
</member>
<member name="M:BioFSharp.Mz.Fragmentation.Series.acOfBioList(Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">
<summary>
 Returns the a and c series of the given amino acids list. The mass accuracy is determined by the massfunction applied.
</summary>
</member>
<member name="M:BioFSharp.Mz.Fragmentation.Series.abOfBioList(Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">
<summary>
 Returns the a and b series of the given amino acids list. The mass accuracy is determined by the massfunction applied.
</summary>
</member>
<member name="M:BioFSharp.Mz.Fragmentation.Series.abcOfBioList(Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">
<summary>
 Retunrs the a b and c series of the given amino acids list. The mass accuracy is determined by the massfunction applied.
</summary>
</member>
<member name="M:BioFSharp.Mz.Fragmentation.BioList.xyzfragmentMassesOf(Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},BioFSharp.Mz.Ions.IonTypeFlag,Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">
<summary>
 Returns the masses of x, y and z series, specified by the ionSeries parameter. The mass accuracy is determined by the massfunction applied.
</summary>
</member>
<member name="M:BioFSharp.Mz.Fragmentation.BioList.abcfragmentMassesOf(Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},BioFSharp.Mz.Ions.IonTypeFlag,Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">
<summary>
 Returns the masses of a, b and c series, specified by the ionSeries parameter. The mass accuracy is determined by the massfunction applied.        
</summary>
</member>
<member name="M:BioFSharp.Mz.Fragmentation.BioList.peptideLadderElementOf(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},Microsoft.FSharp.Core.FSharpFunc{System.Double,Microsoft.FSharp.Core.FSharpFunc{BioFSharp.AminoAcids.AminoAcid,BioFSharp.Mz.TaggedMass.TaggedMass}}},Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},System.Boolean,System.Boolean,System.Double,BioFSharp.AminoAcids.AminoAcid)">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.BioList.createZIonTaggedMass(Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},System.Double,BioFSharp.AminoAcids.AminoAcid)">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.BioList.createXIonTaggedMass(Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},System.Double,BioFSharp.AminoAcids.AminoAcid)">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.BioList.createYIonTaggedMass(Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},System.Double,BioFSharp.IBioItem)">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.BioList.createCIonTaggedMass(Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},System.Double,BioFSharp.AminoAcids.AminoAcid)">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.BioList.createAIonTaggedMass(Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},System.Double,BioFSharp.AminoAcids.AminoAcid)">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.BioList.createBIonTaggedMass(Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},System.Double,BioFSharp.IBioItem)">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.BioList.calcZIonFragMass(Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},System.Double,BioFSharp.AminoAcids.AminoAcid)">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.BioList.calcXIonFragMass(Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},System.Double,BioFSharp.AminoAcids.AminoAcid)">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.BioList.calcCIonFragMass(Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},System.Double,BioFSharp.AminoAcids.AminoAcid)">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.BioList.calcAIonFragMass(Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},System.Double,BioFSharp.AminoAcids.AminoAcid)">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.BioList.calcBorYIonFragMass(Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},System.Double,BioFSharp.IBioItem)">

</member>
<member name="T:BioFSharp.Mz.Cache.Border">

</member>
<member name="T:BioFSharp.Mz.Cache.Cache`2">
<summary>
 Wraps a SortedList to be used as a in memory cache. Especially usefull if computed theoretical fragmentation pattern
 or spectra are to be reused
</summary>
</member>
<member name="M:BioFSharp.Mz.Cache.containsItemsBetween``2(System.Collections.Generic.SortedList{``0,``1},``0,``0)">
<summary>
 Returns the indices of the items in the sorted cache including items at the border of the input range of keys. 
</summary>
</member>
<member name="M:BioFSharp.Mz.Cache.getValuesByIdx``2(System.Collections.Generic.SortedList{``0,``1},System.Int32,System.Int32)">
<summary>
 Returns list of values of items with indices in the defined range. 
</summary>
</member>
<member name="M:BioFSharp.Mz.Cache.getValuesBy``2(System.Collections.Generic.SortedList{``0,``1},``0,``0)">
<summary>
 Returns list of values of items with keys in the defined range. 
</summary>
</member>
<member name="M:BioFSharp.Mz.Cache.getItemsByIdx``2(System.Collections.Generic.SortedList{``0,``1},System.Int32,System.Int32)">
<summary>
 Returns list of items with indices in the defined range. 
</summary>
</member>
<member name="M:BioFSharp.Mz.Cache.getItemsByRange``2(System.Collections.Generic.SortedList{``0,``1},``0,``0)">
<summary>
 Returns list of items with keys in the defined range. 
</summary>
</member>
<member name="M:BioFSharp.Mz.Cache.getItemBy``2(System.Collections.Generic.SortedList{``0,``1},``0)">
<summary>
 Returns with defined key
</summary>
</member>
<member name="M:BioFSharp.Mz.Cache.bulkDeleteBy``3(System.Collections.Generic.SortedList{``0,``1},``0)">
<summary>
 Deletes list of items to the cache. Deletes all items with a key smaller than the defined cutOff.
</summary>
</member>
<member name="M:BioFSharp.Mz.Cache.bulkInsertBy``2(System.Collections.Generic.SortedList{``0,``1},Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})">
<summary>
 Adds list of items to the cache
</summary>
</member>
<member name="M:BioFSharp.Mz.Cache.addItem``2(System.Collections.Generic.SortedList{``0,``1},``0,``1)">
<summary>
 Adds item to the Cache
</summary>
</member>
<member name="M:BioFSharp.Mz.Cache.binarySearch``2(BioFSharp.Mz.Cache.Border,System.Collections.Generic.SortedList{``0,``1},``0)">

</member>
<member name="M:BioFSharp.Mz.Cache.createCacheWith``2(System.Collections.Generic.IComparer{``0},System.Int32)">
<summary>
 Creates cache with defined comparer and defined capacity of items the list can contain, gets automatically increased if the limit is reached.
</summary>
</member>
<member name="M:BioFSharp.Mz.Cache.createCacheWithComp``2(System.Collections.Generic.IComparer{``0})">
<summary>
 Creates cache with defined comparer
</summary>
</member>
<member name="M:BioFSharp.Mz.Cache.createCacheWithCap``2(System.Int32)">
<summary>
 Creates cache with defined capacity of items the list can contain, gets automatically increased if the limit is reached.
</summary>
</member>
<member name="M:BioFSharp.Mz.Cache.createCache``2">
<summary>
 Creates cache with default constructor 
</summary>
</member>
<member name="M:BioFSharp.Mz.SignalDetection.upperIdxBy(System.Double[],System.Double,System.Double)">
<summary>
 Returns a Index that accesses the mzData Array at a position determined by a precursorMz at the upper end of a given windowwidth 
</summary>
</member>
<member name="M:BioFSharp.Mz.SignalDetection.lowerIdxBy(System.Double[],System.Double,System.Double)">
<summary>
 Returns a Index that accesses the mzData Array at a position determined by a precursorMz at the lower end of a given windowwidth 
</summary>
</member>
<member name="M:BioFSharp.Mz.SignalDetection.windowToCentroid(Microsoft.FSharp.Core.FSharpFunc{System.Double[],Microsoft.FSharp.Core.FSharpFunc{System.Double[],System.Tuple{System.Double[],System.Double[]}}},System.Double[],System.Double[],System.Int32,System.Int32)">
<summary>
 Returns mzIntensityArray consisting of centroided Peaks. 
</summary>
</member>
<member name="M:BioFSharp.Mz.SignalDetection.toCentroid``2(Microsoft.FSharp.Core.FSharpFunc{System.Double[],Microsoft.FSharp.Core.FSharpFunc{System.Double[],System.Tuple{``0[],``1[]}}},System.Double[],System.Double[])">
<summary>
 Returns mzIntensityArray consisting of centroided Peaks. 
</summary>
</member>
<member name="M:BioFSharp.Mz.SignalDetection.filterByIntensitySNR(System.Double,System.Double,System.Double[],System.Double[])">
<summary>
 Returns mzIntensityArray after noise reduction 
</summary>
</member>
<member name="T:BioFSharp.Mz.SignalDetection.Wavelet.WaveletParameters">

</member>
<member name="M:BioFSharp.Mz.SignalDetection.Wavelet.toCentroid(Microsoft.FSharp.Core.FSharpFunc{System.Double[],Microsoft.FSharp.Core.FSharpFunc{System.Double[],Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Double,Microsoft.FSharp.Core.FSharpFunc{System.Double,System.Double[]}}}}}}},System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double[],System.Double[])">
<summary>
 Returns a MzIntensityArray that containing the spectral centroids of the input spectra. 
</summary>
</member>
<member name="M:BioFSharp.Mz.SignalDetection.Wavelet.refinePeaks(System.Double,System.Double,System.Double[],System.Double[],System.Double[],System.Collections.Generic.List{BioFSharp.Mz.SignalDetection.Wavelet.RidgeLine},System.Double[])">

</member>
<member name="M:BioFSharp.Mz.SignalDetection.Wavelet.getSNRFilteredPeakLines(System.Double,System.Double,System.Double,System.Int32,System.Double[],System.Collections.Generic.List{BioFSharp.Mz.SignalDetection.Wavelet.RidgeLine},System.Double[0:, 0:])">

</member>
<member name="M:BioFSharp.Mz.SignalDetection.Wavelet.calcCorrWaveletAndDataMatrix(Microsoft.FSharp.Core.FSharpFunc{System.Double[],Microsoft.FSharp.Core.FSharpFunc{System.Double[],Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Double,Microsoft.FSharp.Core.FSharpFunc{System.Double,System.Double[]}}}}}}},System.Int32,System.Int32,System.Double[],System.Double[],System.Double[],System.Double[],System.Int32[0:, 0:, 0:],System.Double[],System.Double[],System.Double[0:, 0:])">

</member>
<member name="M:BioFSharp.Mz.SignalDetection.Wavelet.ricker2d(System.Double[],System.Double[],System.Int32,System.Int32,System.Int32,System.Double,System.Double)">

</member>
<member name="M:BioFSharp.Mz.SignalDetection.Wavelet.getScales(System.Int32,System.Double[],System.Int32,System.Int32,System.Double[],System.Double[],System.Double[],System.Int32[0:, 0:, 0:],System.Double[])">

</member>
<member name="M:BioFSharp.Mz.SignalDetection.Wavelet.convertColToMz(System.Double[],System.Int32)">
<summary>
 Helperfunction to get mz back of Columnnumber
</summary>
</member>
<member name="M:BioFSharp.Mz.SignalDetection.Wavelet.createPadding(System.Int32,System.Double[],System.Double[],System.Double[],System.Double[])">

</member>
<member name="M:BioFSharp.Mz.SignalDetection.Wavelet.getNpointsX(System.Int32,System.Int32,System.Double,System.Int32[0:, 0:, 0:],System.Double[])">
<summary>
 Helperfunction to calculate the mz values left and right from the target value which will be included in the computation of 
 the CWT correlation coefficient
</summary>
</member>
<member name="M:BioFSharp.Mz.SignalDetection.Wavelet.createWaveletParameters(System.Int32,System.Double,System.Double,System.Double,System.Double)">

</member>
<member name="M:BioFSharp.Mz.SignalDetection.Wavelet.createRidgeLine(System.Int32,System.Int32)">

</member>
<member name="T:BioFSharp.Mz.SignalDetection.Padding.PaddingParameters">

</member>
<member name="M:BioFSharp.Mz.SignalDetection.Padding.paddDataBy(BioFSharp.Mz.SignalDetection.Padding.PaddingParameters,System.Double[],System.Double[])">

</member>
<member name="M:BioFSharp.Mz.SignalDetection.Padding.paddDataExtensively(System.Double,System.Double,System.Int32,System.Double,System.Double[],System.Double[])">

</member>
<member name="M:BioFSharp.Mz.SignalDetection.Padding.paddDataWith(System.Double,Microsoft.FSharp.Core.FSharpOption{System.Int32},System.Double,System.Int32,System.Double,System.Double[],System.Double[])">

</member>
<member name="M:BioFSharp.Mz.SignalDetection.Padding.createPaddingParameters(System.Double,Microsoft.FSharp.Core.FSharpOption{System.Int32},System.Double,System.Int32,System.Double)">

</member>
<member name="M:BioFSharp.Mz.SignalDetection.Care.scoreAtPercentile(System.Double,System.Int32,System.Double[])">
<summary>
 Helper function for determining the score in a (sorted) vector at a given percentile
 end of getScoreAtPercentile. Allow passing of length of vector in case you only 
 want a slice of the first portion of a vector;
 perc should not be a fraction (e.g. 5th per centile = 5.0)
</summary>
</member>
<member name="M:BioFSharp.Mz.SignalDetection.Care.accumulate``2(System.Int32,System.Int32,``0,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``0}},``1[])">
<summary>
 Helper function to accumulate Array values
</summary>
</member>
<member name="M:BioFSharp.Mz.SignalDetection.Care.createXspacing(System.Double[])">
<summary>
 Returns a Array containing the distances between adjacent mz values of the input array.
</summary>
</member>
<member name="M:BioFSharp.Mz.SignalDetection.Care.calc``1(``0,System.Int32,System.Int32,System.Int32,System.Int32)">

</member>
<member name="M:BioFSharp.Mz.SignalDetection.Care.getColHighBound(System.Double[],System.Int32,System.Double)">

</member>
<member name="M:BioFSharp.Mz.SignalDetection.Care.getColLowBound(System.Double[],System.Int32,System.Double)">

</member>
<member name="P:BioFSharp.Mz.ChargeState.ChargeDetermParams.DeltaMinIntensity">
<summary>
 RelativeToPriorPeak
</summary>
</member>
<member name="P:BioFSharp.Mz.ChargeState.ChargeDetermParams.MinIntensity">
<summary>
 RelativeToStartPeak
</summary>
</member>
<member name="P:BioFSharp.Mz.ChargeState.ChargeDetermParams.Width">
<summary>
TODO: learn from Data
</summary>
</member>
<member name="P:BioFSharp.Mz.ChargeState.ChargeDetermParams.ExpectedMaximumCharge">
<summary>
TODO: learn from Data
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.kullbackLeiblerDivergenceOf(System.Double[],System.Double[])">

</member>
<member name="M:BioFSharp.Mz.ChargeState.poissonEstofMassTrunc(Microsoft.FSharp.Core.FSharpFunc{System.Double,System.Double},System.Int32,System.Double)">

</member>
<member name="M:BioFSharp.Mz.ChargeState.poissonProb(System.Double,System.Double)">

</member>
<member name="M:BioFSharp.Mz.ChargeState.n15MassToLambda(System.Double)">

</member>
<member name="M:BioFSharp.Mz.ChargeState.n14MassToLambda(System.Double)">

</member>
<member name="M:BioFSharp.Mz.ChargeState.normalizePeaksByIntensitySum(Microsoft.FSharp.Collections.FSharpSet{BioFSharp.Mz.Peak})">

</member>
<member name="M:BioFSharp.Mz.ChargeState.removeSubSetsOfBestHit(Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.ChargeState.AssignedCharge})">
<summary>
 Returns a List of tested AssignedCharges. 
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.peakPosStdDevBy(Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.ChargeState.AssignedCharge})">
<summary>
 Returns the StandardDeviation of the PeakDistances
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.putativePrecursorChargeStatesBy(BioFSharp.Mz.ChargeState.ChargeDetermParams,System.Double[],System.Double[],System.String,System.String,System.Double)">
<summary>
 Returns list of putative precursorChargeStates along with Properties used for evaluation.
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.empiricalRightPValueOf``1(``0[],``0)">
<summary>
 Returns the empirically determined PValue. The PValue is the quotient of simulated mzChargeDeviations lower than the mzChargeDeviation
 observed divided by their total number
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.empiricalPValueOfSim``2(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{System.Int32,``0},``1[]},System.Int32,``0,``1)">
<summary>
 Returns the empirically determined PValue. The PValue is the quotient of simulated mzChargeDeviations lower than the mzChargeDeviation
 observed divided by their total number
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.initMzDevOfRndSpec(System.Random,BioFSharp.Mz.ChargeState.ChargeDetermParams,System.Double)">
<summary>
 Returns Function to generate random spectra and to calculate their mzChargeDeviations.   
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.mzDevOfRndSpec(System.Random,BioFSharp.Mz.ChargeState.ChargeDetermParams,System.Double,System.Int32,System.Double)">
<summary>
 Creates a user defined amount of random spectra of defined length. Returns the mzChargeDeviation of each simulated Spectrum
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.rndMzIntensityEntityCollectionBy(System.Random,System.Int32,System.Double,System.Int32,System.Double,System.Int32)">
<summary>
 Creates a random MzIntensityEntityCollection  
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.interPeakDistanceBy(System.Double,System.Double)">
<summary>
 Returns a possible InterPeakDistance by a given charge state. The retrieved distance follows a normaldistribution
 centered around the theoretical interPeakDistance. The standardDeviation is dependent on the used mass spectrometer
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.rndIntBetween(System.Random,System.Int32,System.Int32)">
<summary>
 Returns a random integer between a lower and a upper Value
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.getScore(System.Int32,System.Int32,System.Double)">
<summary>
 Returns a empirically determined Score to achieve a Ranking of SubSets. The optimal weighting of the parameters was
 determined via Linear Discriminant Analysis.  
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.mzChargeDeviationBy(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
<summary>
 Returns the MZChargeDeviation based on the theoreticalInterIsotopeDistance as a Measure for central tendency
 at a given ChargeState. 
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.getChargeBy(BioFSharp.Mz.ChargeState.ChargeDetermParams,System.Double)">
<summary>
 Returns a charge state based on a given meanOfInterPeakDistances. The list of possible charge states is defined by
 the user.  
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.mzDistancesOf``1(Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Calculates the mzDistances of a List of MzIntensityPeaks
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.powerSetOf(BioFSharp.Mz.ChargeState.PutativeIsotopeCluster)">
<summary>
 Creates the PowerSet of a given Collection of MZIntensityPeaks. Adds a StartPeak with the relative Position 0 and the 
 relative Intensity 1 to each subSet. 
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.getRelPeakPosInWindowBy(System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Int32)">
<summary>
 Returns a Collection of MZIntensityPeaks, The Collection starts with the first Element on the right side of the startIdx. 
 and ends either with the last element of the mzIntensityArray or when the MzDistance to the highest Peak exceeds 
 the given windowwidth.   
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.getSDBParamsBy(System.String)">
<summary>
 Returns SearchDbParams of a existing database by filePath
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.getPeptideLookUpWithMemBy``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid},BioFSharp.Mz.Fragmentation.FragmentMasses}},``0,Microsoft.FSharp.Core.FSharpFunc{System.Double,Microsoft.FSharp.Core.FSharpFunc{System.Double,Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.SearchDB.LookUpResult{BioFSharp.AminoAcids.AminoAcid}}}},System.Collections.Generic.SortedList{System.Int64,Microsoft.FSharp.Collections.FSharpList{System.Tuple{BioFSharp.Mz.SearchDB.LookUpResult{BioFSharp.AminoAcids.AminoAcid},BioFSharp.Mz.Fragmentation.FragmentMasses}}},System.Double,System.Double)">

</member>
<member name="M:BioFSharp.Mz.SearchDB.getPeptideLookUpBy(BioFSharp.Mz.SearchDB.SearchDbParams)">
<summary>
 Returns a LookUpResult list 
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.getThreadSafePeptideLookUpFromFileBy(System.Data.SQLite.SQLiteConnection,BioFSharp.Mz.SearchDB.SearchDbParams)">
<summary>
 Returns a LookUpResult list
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.getPeptideLookUpFromFileBy(BioFSharp.Mz.SearchDB.SearchDbParams)">
<summary>
 Returns a LookUpResult list
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.getProteinLookUpFromFileBy(BioFSharp.Mz.SearchDB.SearchDbParams)">
<summary>
 Returns a list of proteins retrieved by PepsequenceID
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.connectOrCreateDB(BioFSharp.Mz.SearchDB.SearchDbParams)">

</member>
<member name="M:BioFSharp.Mz.SearchDB.getDBConnectionBy(BioFSharp.Mz.SearchDB.SearchDbParams)">

</member>
<member name="M:BioFSharp.Mz.SearchDB.getDBConnection(System.String)">
<summary>
 Opens a new connection to the database in given path
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.createLookUpResultBy``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Collections.FSharpList{``0}}},System.Int32,System.Int32,System.Double,System.Int64,System.String,System.Int32)">
<summary>
 Creates a LookUpResult out of a entry in the ModSequence table
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.initOfModAminoAcidString(Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.SearchDB.SearchInfoIsotopic},Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.SearchDB.SearchModification},System.Int32,System.String)">
<summary>
 Generates amino acid sequence of one-letter-code string containing modified AminoAcids indicated by 2 lowercase digits per modification. 
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.xModToMods(Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.SearchDB.SearchModification})">
<summary>
 Creates a mapping from the XModCode of a modification to the modification itself.
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.createPeptideWithFeature``2(System.Int32,``0,``1)">
<summary>
 Creates PeptideWithMass record
</summary>
</member>
<member name="P:BioFSharp.Mz.SearchDB.listOfAA">
<summary>
needed as input if element of SearchModSite is of UnionCase | Any
</summary>
</member>
<member name="T:BioFSharp.Mz.SearchDB.ModCombinator.AminoAcidWithFlag">
<summary>
 Flag indicates if potential modification is fixed
</summary>
</member>
<member name="T:BioFSharp.Mz.SearchDB.ModCombinator.ModLookUpFunc">
<summary>
 Type abreviation
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.ModCombinator.getModSequencesOf``1(Microsoft.FSharp.Core.FSharpRef{System.Int32},BioFSharp.Mz.SearchDB.ModCombinator.ModLookUp,System.Int32,Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},BioFSharp.Digestion.DigestedPeptide{``0}[])">

</member>
<member name="M:BioFSharp.Mz.SearchDB.ModCombinator.combineToModString(BioFSharp.Mz.SearchDB.ModCombinator.ModLookUp,System.Int32,Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">
<summary>
 Returns a list of all possible modified petide sequences and its masses according to the given modification-lookUp.
 The peptide sequence representation is ModString.
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.ModCombinator.ToModStringBy(Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpOption{System.String}},BioFSharp.AminoAcids.AminoAcid)">
<summary>
 Returns a ModString representation. 
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.ModCombinator.combine``1(BioFSharp.Mz.SearchDB.ModCombinator.ModLookUp,System.Int32,Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{BioFSharp.AminoAcids.AminoAcid,System.String}},``0,Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">
<summary>
 Returns a list of all possible modified petide sequences and its masses according to the given modification-lookUp.
 It uses the given bioitem -&gt; mass function and a function to aggregate the sequence.
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.ModCombinator.setVarModByLookUp(Microsoft.FSharp.Core.FSharpFunc{BioFSharp.AminoAcids.AminoAcid,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{BioFSharp.ModificationInfo.Modification}}},BioFSharp.Mz.SearchDB.ModCombinator.AminoAcidWithFlag)">
<summary>
Returns modified or unmodified AminoAcid depending on the matching expression in a AminoAcidWithFlag struct
The boolean value &quot;false&quot; is used to state that the Modification is fixed    
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.ModCombinator.setFixModByLookUp(Microsoft.FSharp.Core.FSharpFunc{BioFSharp.AminoAcids.AminoAcid,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{BioFSharp.ModificationInfo.Modification}}},BioFSharp.Mz.SearchDB.ModCombinator.AminoAcidWithFlag)">
<summary>
Returns modified or unmodified AminoAcid depending on the matching expression in a AminoAcidWithFlag struct
The boolean value &quot;false&quot; is used to state that the Modification is fixed    
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.ModCombinator.modLookUpOf(BioFSharp.Mz.SearchDB.SearchDbParams)">
<summary>
 Returns the ModLookup according to given SearchDbParams
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.ModCombinator.convertSearchModification(Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid},BioFSharp.Mz.SearchDB.SearchModification)">
<summary>
 Returns a list of all possible modified AminoAcids given the particular Searchmodification
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.bulkInsert(System.Data.SQLite.SQLiteConnection,System.Collections.Generic.IEnumerable{BioFSharp.Mz.SearchDB.ProteinContainer})">
<summary>
 Bulk insert for a sequence of ProteinContainers
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.initDB(System.String)">
<summary>
 Create a new file instance of the DB schema. Deletes already existing instance.
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.isExistsBy(BioFSharp.Mz.SearchDB.SearchDbParams)">
<summary>
 Returns true if a db exists with the same parameter content
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.xModOfSearchDbParams(System.Data.SQLite.SQLiteConnection,BioFSharp.Mz.SearchDB.SearchDbParams)">
<summary>
 Builds xModToSearchMod Map from DB by given SearchDbParams
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.xModToSearchModifications(Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.SearchDB.SearchModification})">

</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.selectSdbParamsby(System.Data.SQLite.SQLiteConnection,BioFSharp.Mz.SearchDB.SearchDbParams)">
<summary>
 Select SearchDbParams entry from DB by given SearchDbParams
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.insertSdbParams(System.Data.SQLite.SQLiteConnection,BioFSharp.Mz.SearchDB.SearchDbParams)">
<summary>
 Inserts SearchDbParams into DB
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.getJsonStringOf``1(``0)">
<summary>
 Returns a comma seperated string of given search modification list
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.getNameOf(BioFSharp.Mz.SearchDB.SearchDbParams)">
<summary>
 Returns the database name given the SearchDbParams
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareSelectMassByModSequenceAndGlobalMod(System.Data.SQLite.SQLiteConnection)">
<summary>
 Prepares statement to select a ModSequence entry by Massrange (Between selected Mass -/+ the selected toleranceWidth)
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareSelectModsequenceBySequence(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
<summary>
 Prepares statement to select a ModSequence entry by Sequence
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareSelectModsequenceByMassRange(System.Data.SQLite.SQLiteConnection)">
<summary>
 Prepares statement to select a ModSequence entry by Massrange (Between selected Mass -/+ the selected toleranceWidth)
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareSelectModsequenceByMassRangeWith(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
<summary>
 Prepares statement to select a ModSequence entry by Massrange (Between selected Mass -/+ the selected toleranceWidth)
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareSelectModsequenceByMass(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
<summary>
 Prepares statement to select a ModSequence entry by Mass
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareSelectModsequenceByPepSequenceID(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
<summary>
 Prepares statement to select a ModSequence entry by PepSequenceID
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareSelectModsequenceByModSequenceID(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
<summary>
 Prepares statement to select a ModSequence entry by ModSequenceID
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareSelectPepSequenceBySequence(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
<summary>
 Prepares statement to select a PepSequence entry by PepSequence - Version without try.. with pattern to enhance the Select performance
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareSelectPepSequenceBySequence'(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
<summary>
 Prepares statement to select a PepSequence entry by PepSequence 
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareSelectCleavageIndexByPepSequenceID(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
<summary>
 Prepares statement to select a CleavageIndex entry PepSequenceID 
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareSelectCleavageIndexByProteinID(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
<summary>
 Prepares statement to select a CleavageIndex entry ProteinID 
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareSelectProteinBySequence(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
<summary>
 Prepares statement to select a Protein entry by Sequence     
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareSelectProteinByAccession(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
<summary>
 Prepares statement to select a Protein entry by Accession     
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareSelectProteinByID(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
<summary>
 Prepares statement to select a Protein entry by ID        
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareSelectSearchModsbyParams(System.Data.SQLite.SQLiteConnection)">
<summary>
 Prepares statement to select all SearchModifications by SearchDbParams
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareSelectSearchDbParamsbyParams(System.Data.SQLite.SQLiteConnection)">
<summary>
 Prepares statement to select all SearchDbParams entries by FastaPath, Protease, MinmissedCleavages, MaxmissedCleavages, MaxMass, MinPepLength, MaxPepLength, IsotopicLabel, MassMode, FixedMods, VariableMods, VarModsThreshold
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.selectSearchDbParams(System.Data.SQLite.SQLiteConnection)">
<summary>
 Prepares statement to select all SearchDbParams 
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareInsertSearchDbParams(System.Data.SQLite.SQLiteConnection)">
<summary>
 Prepares statement to insert a SearchDBParams entry
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareInsertModSequence(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
<summary>
 Prepares statement to insert a ModSequence entry
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareInsertPepSequence(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
<summary>
 Prepares statement to insert a PepSequence entry
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareInsertCleavageIndex(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
<summary>
 Prepares statement to insert a CleavageIndex entry
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareInsertProtein(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
<summary>
 Prepares statement to insert a Protein entry
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.setIndexOnModSequenceAndGlobalMod(System.Data.SQLite.SQLiteConnection)">

</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.createTableModSequence(System.Data.SQLite.SQLiteConnection)">
<summary>
 Creates Table ModSequence
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.createTablePepSequence(System.Data.SQLite.SQLiteConnection)">
<summary>
 Creates Table PepSequence
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.createTableCleavageIndex(System.Data.SQLite.SQLiteConnection)">
<summary>
 Creates Table CleavageIndex
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.createTableProtein(System.Data.SQLite.SQLiteConnection)">
<summary>
 Creates Table Protein
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.createTableSearchDbParams(System.Data.SQLite.SQLiteConnection)">
<summary>
 Creates Table SearchDbParams
</summary>
</member>
<member name="T:BioFSharp.Mz.SearchDB.Db.SQLiteQuery">
<summary>
  Prepared statements via Closure
</summary>
</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Parent.prepareSelectParentbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Parent.prepareSelectParentbyCountry``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Parent.prepareSelectParentbyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Parent.prepareSelectParentbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.AnalysisSoftware.prepareSelectAnalysisSoftwarebyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.AnalysisSoftware.prepareSelectAnalysisSoftwarebyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.AnalysisSoftware.prepareSelectAnalysisSoftwarebyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Organization.prepareSelectOrganizationbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Organization.prepareSelectOrganizationbyParent_ID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Organization.prepareSelectOrganizationbyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Organization.prepareSelectOrganizationbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Person.prepareSelectPersonbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Person.prepareSelectPersonbyOrganisationID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Person.prepareSelectPersonbyMiddleName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Person.prepareSelectPersonbyLastName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Person.prepareSelectPersonbyFirstName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Person.prepareSelectPersonbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinDetectionProtocol.prepareSelectProteinDetectionProtocolbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinDetectionProtocol.prepareSelectProteinDetectionProtocolbyAnalysisSoftwareID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinDetectionProtocol.prepareSelectProteinDetectionProtocolbyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinDetectionProtocol.prepareSelectProteinDetectionProtocolbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationProtocol.prepareSelectSpectrumIdentificationProtocolbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationProtocol.prepareSelectSpectrumIdentificationProtocolbyAnalysisSoftwareID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationProtocol.prepareSelectSpectrumIdentificationProtocolbyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationProtocol.prepareSelectSpectrumIdentificationProtocolbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentification.prepareSelectSpectrumIdentificationbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentification.prepareSelectSpectrumIdentificationbySpectrumIdentficationProtocolID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentification.prepareSelectSpectrumIdentificationbySpectrumIdentficationListID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentification.prepareSelectSpectrumIdentificationbyActivityDate``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentification.prepareSelectSpectrumIdentificationbyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentification.prepareSelectSpectrumIdentificationbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinAmbiguityGroup.prepareSelectProteinAmbiguityGroupbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinAmbiguityGroup.prepareSelectProteinAmbiguityGroupbyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinAmbiguityGroup.prepareSelectProteinAmbiguityGroupbyProteinDetectionListID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinAmbiguityGroup.prepareSelectProteinAmbiguityGroupbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.PeptideHypothesis.prepareSelectPeptideHypothesisbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.PeptideHypothesis.prepareSelectPeptideHypothesisbyProteinDetectionHypothesisID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.PeptideHypothesis.prepareSelectPeptideHypothesisbyPeptideEvidenceID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.PeptideHypothesis.prepareSelectPeptideHypothesisbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinDetectionList.prepareSelectProteinDetectionListbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinDetectionList.prepareSelectProteinDetectionListbySearchDBID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinDetectionList.prepareSelectProteinDetectionListbyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinDetectionList.prepareSelectProteinDetectionListbyAccession``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinDetectionList.prepareSelectProteinDetectionListbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinDetectionHypothesis.prepareSelectProteinDetectionHypothesisbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinDetectionHypothesis.prepareSelectProteinDetectionHypothesisbyPassThreshold``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinDetectionHypothesis.prepareSelectProteinDetectionHypothesisbyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinDetectionHypothesis.prepareSelectProteinDetectionHypothesisbyProteinAmbiguityGroupID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinDetectionHypothesis.prepareSelectProteinDetectionHypothesisbyDBSequenceID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinDetectionHypothesis.prepareSelectProteinDetectionHypothesisbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.TermRelationShip.prepareSelectTermRelationShipbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.TermRelationShip.prepareSelectTermRelationShipbyFKRelatedTerm``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.TermRelationShip.prepareSelectTermRelationShipbyRelationShipType``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.TermRelationShip.prepareSelectTermRelationShipbyTermID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.TermRelationShip.prepareSelectTermRelationShipbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.TermTag.prepareSelectTermTagbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.TermTag.prepareSelectTermTagbyValue``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.TermTag.prepareSelectTermTagbyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.TermTag.prepareSelectTermTagbyTermID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.TermTag.prepareSelectTermTagbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Ontology.prepareSelectOntologybyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Ontology.prepareSelectOntologybyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Modification.prepareSelectModificationbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Modification.prepareSelectModificationbyAvgMassDelta``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Modification.prepareSelectModificationbyMonoisotopicMassDelta``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Modification.prepareSelectModificationbyResidues``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Modification.prepareSelectModificationbyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Modification.prepareSelectModificationbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ModLocation.prepareSelectModLocationbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ModLocation.prepareSelectModLocationbyResidue``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ModLocation.prepareSelectModLocationbyLocation``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ModLocation.prepareSelectModLocationbyModificationID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ModLocation.prepareSelectModLocationbyPeptideID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ModLocation.prepareSelectModLocationbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationList.prepareSelectSpectrumIdentificationListbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationList.prepareSelectSpectrumIdentificationListbyNumSequencesSearched``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationList.prepareSelectSpectrumIdentificationListbyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationList.prepareSelectSpectrumIdentificationListbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationResult.prepareSelectSpectrumIdentificationResultbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationResult.prepareSelectSpectrumIdentificationResultbyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationResult.prepareSelectSpectrumIdentificationResultbySpectrumIdentficationListID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationResult.prepareSelectSpectrumIdentificationResultbySpectraDataID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationResult.prepareSelectSpectrumIdentificationResultbySpectrumID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationResult.prepareSelectSpectrumIdentificationResultbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Term.prepareSelectTermbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Term.prepareSelectTermbyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Term.prepareSelectTermbyOntologyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Term.prepareSelectTermbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationItem.prepareSelectSpectrumIdentificationItembyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationItem.prepareSelectSpectrumIdentificationItembyFragmentation``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationItem.prepareSelectSpectrumIdentificationItembyCalculatedPI``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationItem.prepareSelectSpectrumIdentificationItembyChargeState``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationItem.prepareSelectSpectrumIdentificationItembyExperimentalMassToCharge``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationItem.prepareSelectSpectrumIdentificationItembyCalculatedMassToCharge``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationItem.prepareSelectSpectrumIdentificationItembyRank``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationItem.prepareSelectSpectrumIdentificationItembyPassThreshold``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationItem.prepareSelectSpectrumIdentificationItembyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationItem.prepareSelectSpectrumIdentificationItembyMassTableID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationItem.prepareSelectSpectrumIdentificationItembyPeptideID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationItem.prepareSelectSpectrumIdentificationItembySampleID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationItem.prepareSelectSpectrumIdentificationItembySpectrumIdentificationResultID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationItem.prepareSelectSpectrumIdentificationItembyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Peptide.prepareSelectPeptidebyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Peptide.prepareSelectPeptidebySequence``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Peptide.prepareSelectPeptidebyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.PeptideEvidence.prepareSelectPeptideEvidencebyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.PeptideEvidence.prepareSelectPeptideEvidencebyTranslationsID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.PeptideEvidence.prepareSelectPeptideEvidencebyPost``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.PeptideEvidence.prepareSelectPeptideEvidencebyPre``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.PeptideEvidence.prepareSelectPeptideEvidencebyEnd``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.PeptideEvidence.prepareSelectPeptideEvidencebyStart``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.PeptideEvidence.prepareSelectPeptideEvidencebyFrame``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.PeptideEvidence.prepareSelectPeptideEvidencebyisDecoy``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.PeptideEvidence.prepareSelectPeptideEvidencebyPeptideID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.PeptideEvidence.prepareSelectPeptideEvidencebyDBSequenceID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.PeptideEvidence.prepareSelectPeptideEvidencebyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.DBSequence.prepareSelectDBSequencebyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.DBSequence.prepareSelectDBSequencebySearchDBID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.DBSequence.prepareSelectDBSequencebyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.DBSequence.prepareSelectDBSequencebyAccession``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.DBSequence.prepareSelectDBSequencebyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="T:BioFSharp.Mz.MzIdentMLModel.ParamContainer.ParamContainer">
<summary>
 Type ParamContainer
</summary>
</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.ParamContainer.getValueAsString(System.String,System.Collections.Generic.Dictionary{System.String,BioFSharp.Mz.MzIdentMLModel.DataModel.CvParam})">
<summary>
 Get value as string by termid or empty string
</summary>
</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.ParamContainer.getValueAsInt(System.String,System.Collections.Generic.Dictionary{System.String,BioFSharp.Mz.MzIdentMLModel.DataModel.CvParam})">
<summary>
 Get value as int32 by termid or &apos;-1&apos;
</summary>
</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.ParamContainer.getValueAsFloat(System.String,System.Collections.Generic.Dictionary{System.String,BioFSharp.Mz.MzIdentMLModel.DataModel.CvParam})">
<summary>
 Get value as float by termid or &apos;nan&apos;
</summary>
</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.ParamContainer.tryGetCvParam(System.String,System.Collections.Generic.Dictionary{System.String,BioFSharp.Mz.MzIdentMLModel.DataModel.CvParam})">
<summary>
 Get optional CvParam by id 
</summary>
</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.ParamContainer.getCvParam(System.String,System.Collections.Generic.Dictionary{System.String,BioFSharp.Mz.MzIdentMLModel.DataModel.CvParam})">
<summary>
 Get CvParam by id (Function can fail)
</summary>
</member>
<member name="T:BioFSharp.Mz.MzIdentMLModel.ParamContainer">
<summary>
 Module containing functions to operate on ParamContainer
</summary>
</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.CvParam.createCvParamValueWithUnit(BioFSharp.Mz.MzIdentMLModel.DataModel.Term,System.IConvertible,BioFSharp.Mz.MzIdentMLModel.DataModel.Term)">
<summary>
 Creates a controlled vocabulary parameter value with unit term 
</summary>
</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.CvParam.ofValue(BioFSharp.Mz.MzIdentMLModel.DataModel.Term,System.IConvertible)">
<summary>
 Creates a controlled vocabulary parameter value
</summary>
</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.CvParam.createWithUnit(System.Guid,BioFSharp.Mz.MzIdentMLModel.DataModel.Term,System.IConvertible,BioFSharp.Mz.MzIdentMLModel.DataModel.Term)">
<summary>
 Creates a controlled vocabulary parameter with unit term 
</summary>
</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.CvParam.create(System.Guid,BioFSharp.Mz.MzIdentMLModel.DataModel.Term,System.IConvertible)">
<summary>
 Creates a controlled vocabulary parameter
</summary>
</member>
<member name="T:BioFSharp.Mz.MzIdentMLModel.CvParam">
<summary>
 Module containing functions to operate on controlled vocabulary parameter
</summary>
</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Term.create(System.String,System.String,System.String)">
<summary>
 Creates a controlled vocabulary term
</summary>
</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Term.initOf(System.String,System.String,System.String,System.DateTime)">
<summary>
 Creates a controlled vocabulary term with rowVersion
</summary>
</member>
<member name="T:BioFSharp.Mz.MzIdentMLModel.Term">
<summary>
 Module containing functions to operate on controlled vocabulary term
</summary>
</member>
<member name="T:BioFSharp.Mz.MzIdentMLModel.DataModel.CvParam">
<summary>
 Define a controlled vocabulary parameter
</summary>
</member>
<member name="P:BioFSharp.Mz.MzIdentMLModel.DataModel.Term.Id">
<summary>
 accession number
</summary>
</member>
<member name="T:BioFSharp.Mz.MzIdentMLModel.DataModel.Term">
<summary>
 Define a controlled vocabulary term
</summary>
</member>
<member name="T:BioFSharp.Mz.MzIdentMLModel.DataModel.TermId">
<summary>
 Term (cv) accession number
</summary>
</member>
<member name="T:BioFSharp.Mz.MzIdentMLModel.DataModel">
<summary>
 Module containing all data types used in the model
</summary>
</member>
<member name="M:BioFSharp.Mz.TheoreticalSpectra.getTheoSpecs``1(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{System.Double,System.Double},Microsoft.FSharp.Core.FSharpFunc{System.Double,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.PeakFamily{BioFSharp.Mz.TaggedMass.TaggedMass}},``0}}},System.Double,System.Double,System.Int32,Microsoft.FSharp.Collections.FSharpList{System.Tuple{BioFSharp.Mz.SearchDB.LookUpResult{BioFSharp.AminoAcids.AminoAcid},BioFSharp.Mz.Fragmentation.FragmentMasses}})">

</member>
<member name="M:BioFSharp.Mz.TheoreticalSpectra.getTheoSpec``1(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{System.Double,System.Double},Microsoft.FSharp.Core.FSharpFunc{System.Double,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.PeakFamily{BioFSharp.Mz.TaggedMass.TaggedMass}},``0}}},System.Double,System.Double,System.Int32,BioFSharp.Mz.SearchDB.LookUpResult{BioFSharp.AminoAcids.AminoAcid},BioFSharp.Mz.Fragmentation.FragmentMasses)">

</member>
<member name="M:BioFSharp.Mz.TheoreticalSpectra.createTheoreticalSpectrum``1(BioFSharp.Mz.SearchDB.LookUpResult{BioFSharp.AminoAcids.AminoAcid},``0,``0)">

</member>
<member name="M:BioFSharp.Mz.SearchEngineResult.calcNormDeltaNext(Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.SearchEngineResult.SearchEngineResult{System.Double}})">
<summary>
 if the best Score equals 0., this function returns returns 0 for every PSM.
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchEngineResult.calcNormDeltaBestToRest(Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.SearchEngineResult.SearchEngineResult{System.Double}})">
<summary>
 Calculates sequest-like delta normalized by best score to the best score.
  (Xcorr(top hit) - Xcorr(n)) / Xcorr(top hit). Thus, the deltaCn for the top hit is
  (Xcorr(top hit) - Xcorr(top hit)) / Xcorr(top hit) = 0.
 if the best Score equals 0. this function returns returns 1 for every PSM
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchEngineResult.createSearchEngineResult``1(BioFSharp.Mz.SearchEngineResult.SearchEngine,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Double,System.String,System.Int32,System.Double,System.Double,System.Double,System.Int32,``0,System.Double,System.Double)">

</member>
<member name="M:BioFSharp.Mz.SequestLike.calcSequestScoreParallel``1(System.Double,System.Double,``0[],System.Double,System.Int32,System.Double,Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.TheoreticalSpectra.TheoreticalSpectrum{FSharp.Stats.Vector{System.Double}}},System.String)">
<summary>
 Calculates the sequestLike Scores for all theoretical spectra. Implemented using Async parallel. 
</summary>
</member>
<member name="M:BioFSharp.Mz.SequestLike.calcSequestScore``1(System.Double,System.Double,``0[],System.Double,System.Int32,System.Double,Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.TheoreticalSpectra.TheoreticalSpectrum{FSharp.Stats.Vector{System.Double}}},System.String)">
<summary>
 Calculates the SequestLike Scores for all theoretical spectra.    
</summary>
</member>
<member name="M:BioFSharp.Mz.SequestLike.calcSequestLikeScoresRevDecoy``2(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{``0,System.Double},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid},Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.PeakFamily{BioFSharp.Mz.TaggedMass.TaggedMass}}}},Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},System.Double,System.Double,``1[],System.Double,System.Int32,System.Double,Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.SearchDB.LookUpResult{BioFSharp.AminoAcids.AminoAcid}},System.String)">
<summary>
 Calculates the SequestLike Scores for all peptides (possiblePeptideInfos).
</summary>
</member>
<member name="M:BioFSharp.Mz.SequestLike.getTheoSpecs(System.Double,System.Double,System.Int32,Microsoft.FSharp.Collections.FSharpList{System.Tuple{BioFSharp.Mz.SearchDB.LookUpResult{BioFSharp.AminoAcids.AminoAcid},BioFSharp.Mz.Fragmentation.FragmentMasses}})">
<summary>
 Converts the fragment ion ladders to a theoretical Sequestlike spectrum at a given charge state. 
 Subsequently, the spectrum is binned to the nearest mz bin (binwidth = 1 Da). Filters out peaks 
 that are not within the scanLimits.
</summary>
</member>
<member name="M:BioFSharp.Mz.SequestLike.calcXCorr(FSharp.Stats.Vector{System.Double},FSharp.Stats.Vector{System.Double})">
<summary>
 Calculates the Cross-Correlation of p_nis and ms_nis
</summary>
</member>
<member name="M:BioFSharp.Mz.SequestLike.spectrumToIntensityArrayMinusAutoCorrelation``1(System.Double,System.Double,``0[])">
<summary>
 Measured spectrum to sequest-like normalized intensity array
 minus auto-correlation (delay 75 -&gt; like in original sequest algorithm)
 ! Uses 10 as number of windows for window normalization (like in original sequest algorithm)    
</summary>
</member>
<member name="M:BioFSharp.Mz.SequestLike.predictOf(System.Double,System.Double,System.Double,Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.PeakFamily{BioFSharp.Mz.TaggedMass.TaggedMass}})">
<summary>
 Converts the fragment ion ladder to a theoretical Sequestlike spectrum at a given charge state. 
 Subsequently, the spectrum is binned to the nearest mz bin (binwidth = 1 Da). Filters out peaks 
 that are not within the scanLimits.
</summary>
</member>
<member name="M:BioFSharp.Mz.SequestLike.autoCorrelation(System.Int32,FSharp.Stats.Vector{System.Double})">
<summary>
 Computes the autocorrelation of the vector +/- plusMinusMaxDelay.
</summary>
</member>
<member name="M:BioFSharp.Mz.SequestLike.theoSpecOf(System.Double,System.Double,System.Double,Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.PeakFamily{BioFSharp.Mz.TaggedMass.TaggedMass}})">
<summary>
 Converts the fragment ion ladder to a theoretical Sequestlike spectrum at a given charge state. 
</summary>
</member>
<member name="M:BioFSharp.Mz.SequestLike.predictIntensitySimpleModel(BioFSharp.Mz.Ions.IonTypeFlag,System.Double)">
<summary>
 Predicts the intensity of a theoretical peak based on the given charge and iontype.
</summary>
</member>
<member name="M:BioFSharp.Mz.SequestLike.windowNormalizeIntensities(FSharp.Stats.Vector{System.Double},System.Int32)">
<summary>
 normalize the intensities within a window to maximum of the window
 Attention shortens the array  (cuts)
</summary>
</member>
<member name="M:BioFSharp.Mz.AndromedaLike.calcAndromedaScoreParallel``1(System.Int32,System.Int32,System.Double,System.Double,System.Double,``0[],System.Double,System.Int32,System.Double,Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.TheoreticalSpectra.TheoreticalSpectrum{BioFSharp.Mz.PeakFamily{BioFSharp.Mz.TaggedPeak.TaggedPeak}[]}},System.String)">
<summary>
 Calculates the AndromedaLike scores for all theoretical spectra. Implemented using Async parallel. 
</summary>
</member>
<member name="M:BioFSharp.Mz.AndromedaLike.calcAndromedaScore``1(System.Int32,System.Int32,System.Double,System.Double,System.Double,``0[],System.Double,System.Int32,System.Double,Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.TheoreticalSpectra.TheoreticalSpectrum{BioFSharp.Mz.PeakFamily{BioFSharp.Mz.TaggedPeak.TaggedPeak}[]}},System.String)">
<summary>
 Calculates the AndromedaLike scores for all theoretical spectra.
</summary>
</member>
<member name="M:BioFSharp.Mz.AndromedaLike.calcAndromedaLikeScoresRevDecoy``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid},Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.PeakFamily{BioFSharp.Mz.TaggedMass.TaggedMass}}}},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},System.Int32,System.Int32,System.Double,System.Double,System.Double,``0[],System.Double,System.Int32,System.Double,Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.SearchDB.LookUpResult{BioFSharp.AminoAcids.AminoAcid}},System.String)">
<summary>
 Calculates the AndromedaLike Scores for all peptides (possiblePeptideInfos).
</summary>
</member>
<member name="M:BioFSharp.Mz.AndromedaLike.getTheoSpecs(System.Double,System.Double,System.Int32,Microsoft.FSharp.Collections.FSharpList{System.Tuple{BioFSharp.Mz.SearchDB.LookUpResult{BioFSharp.AminoAcids.AminoAcid},BioFSharp.Mz.Fragmentation.FragmentMasses}})">
<summary>
 Converts the fragment ion ladders to a theoretical Sequestlike spectrum at a given charge state. 
 Subsequently, the spectrum is binned to the nearest mz bin (binwidth = 1 Da). Filters out peaks 
 that are not within the scanLimits.
</summary>
</member>
<member name="M:BioFSharp.Mz.AndromedaLike.scoreTheoVsRecordedSpec(System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,BioFSharp.Mz.PeakFamily{BioFSharp.Mz.TaggedPeak.TaggedPeak}[],BioFSharp.Mz.AndromedaLike.RatedPeak[])">
<summary>
 Computes the andromedalike score of a theoretical spectrum vs. the ratedSpectrum. Subsequently applies mzCorrection - modCorrection and cleavageCorrection to the score. 
</summary>
</member>
<member name="M:BioFSharp.Mz.AndromedaLike.cleavageCorrection(System.Int32,System.Boolean)">
<summary>
 Correction factor applided to the andromeda score based on the amount of missCleavages.
 Values are taken from the original andromeda release.
</summary>
</member>
<member name="M:BioFSharp.Mz.AndromedaLike.modCorrection(System.Int32)">
<summary>
 Correction factor applided to the andromeda score based on the amount modifications.
 Values are taken from the original andromeda release.
</summary>
</member>
<member name="M:BioFSharp.Mz.AndromedaLike.mzCorrection(System.Double)">
<summary>
 Correction factor applided to the andromeda score based on the observed precursor Mz.
 Values are taken from the original andromeda release.
</summary>
</member>
<member name="M:BioFSharp.Mz.AndromedaLike.scoreFuncImpl(System.Int32,System.Int32,System.Int32)">
<summary>
 Calculates the andromedaLike Score based on offered peaks n and matched peaks k, as well as the q value threshold topx
</summary>
</member>
<member name="M:BioFSharp.Mz.AndromedaLike.lnProb(System.Double,System.Double,System.Double,System.Double)">
<summary>
 Helper function to calculate the AndromedaScore
</summary>
</member>
<member name="M:BioFSharp.Mz.AndromedaLike.countMatches(System.Double,System.Double,System.Int32,System.Int32,System.Double,BioFSharp.Mz.PeakFamily{BioFSharp.Mz.TaggedPeak.TaggedPeak}[],BioFSharp.Mz.AndromedaLike.RatedPeak[])">
<summary>
 Iterates theoSpect and counts the number of common peaks in ratedspectrum. A peak is considered as common if the mz value lies within a user defined matching tolerance. This procedure
 is carried out (qMostAbundandPepsMax-qMostAbundandPepsMin+1) times every time with a different qThreshold to account for peak intensity. A peak is counted as matching if it has
 less more abundant peaks in the neighbourhood than the current qThreshold.
</summary>
</member>
<member name="M:BioFSharp.Mz.AndromedaLike.hasMatchingPeakPPM(System.Double,System.Double,BioFSharp.Mz.AndromedaLike.RatedPeak[])">
<summary>
 Searches for a Peak in ratedSpectrum that matches the target mz (tarmz) within a certain tolerance expressed in parts per million of the tarmz, defined by mzMatchingTolerancePPM.
</summary>
</member>
<member name="M:BioFSharp.Mz.AndromedaLike.hasMatchingPeakMZTol(System.Double,System.Double,BioFSharp.Mz.AndromedaLike.RatedPeak[])">
<summary>
 Searches for a Peak in ratedSpectrum that matches the target mz (tarmz) within a certain tolerance defined by mzmatchingTolerance.
</summary>
</member>
<member name="M:BioFSharp.Mz.AndromedaLike.predictOf``2(``0,``1,System.Double,Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.PeakFamily{BioFSharp.Mz.TaggedMass.TaggedMass}})">
<summary>
 Converts the fragmentIon ladder to a theoretical spectrum at a given charge state. Filters out all theoretical peaks, that lie
 outside the given lower and upperScanLimits.
</summary>
</member>
<member name="M:BioFSharp.Mz.AndromedaLike.ratedSpectrum``1(System.Double,``0,System.Int32,System.Double,System.Double,System.Tuple{System.Double,System.Double}[])">
<summary>
 Applies the function &quot;moreIntensePeaksWithin&quot; to every peak in spectrumData, thus rating every peak by counting how many more abundant peaks
 are present within the given mzWindow (mzwindow/2 +/- ). Filters out peaks that are not within the scanLimits and show to have more abundand peaks than 
 defined by qMostAbundandpepsMax in their neighbourhood.
</summary>
</member>
<member name="M:BioFSharp.Mz.AndromedaLike.moreIntensePeaksWithin(System.Double,System.Tuple{System.Double,System.Double}[],System.Int32)">
<summary>
 Counts how many peaks present in spectrum data within a a given mzWindow (mzwindow/2 +/- ) have a higher 
 intensity then the peak at position spectrumData.[peakIdx]. 
</summary>
</member>
<member name="M:BioFSharp.Mz.XScoring.calcAndromedaAndXTandemScore``1(System.Int32,System.Int32,System.Double,System.Double,System.Double,``0[],System.Double,System.Int32,System.Double,Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.TheoreticalSpectra.TheoreticalSpectrum{BioFSharp.Mz.PeakFamily{BioFSharp.Mz.TaggedPeak.TaggedPeak}[]}},System.String)">
<summary>
 Calculates the AndromedaLike scores for all theoretical spectra.
</summary>
</member>
<member name="M:BioFSharp.Mz.XScoring.getTheoSpecs(System.Double,System.Double,System.Int32,Microsoft.FSharp.Collections.FSharpList{System.Tuple{BioFSharp.Mz.SearchDB.LookUpResult{BioFSharp.AminoAcids.AminoAcid},BioFSharp.Mz.Fragmentation.FragmentMasses}})">
<summary>
 Converts the fragment ion ladders to a theoretical Sequestlike spectrum at a given charge state. 
 Subsequently, the spectrum is binned to the nearest mz bin (binwidth = 1 Da). Filters out peaks 
 that are not within the scanLimits.
</summary>
</member>
<member name="M:BioFSharp.Mz.XScoring.scoreTheoVsRecordedSpec(System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,BioFSharp.Mz.PeakFamily{BioFSharp.Mz.TaggedPeak.TaggedPeak}[],BioFSharp.Mz.XScoring.RatedPeak[])">
<summary>
 Computes the andromedalike score of a theoretical spectrum vs. the ratedSpectrum. Subsequently applies mzCorrection - modCorrection and cleavageCorrection to the score. 
</summary>
</member>
<member name="M:BioFSharp.Mz.XScoring.calcHyperScore(BioFSharp.Mz.XScoring.CountedMatches)">
<summary>
 Calculates the X!TandemHyperScore
</summary>
</member>
<member name="M:BioFSharp.Mz.XScoring.cleavageCorrection(System.Int32,System.Boolean)">
<summary>
 Correction factor applided to the andromeda score based on the amount of missCleavages.
 Values are taken from the original andromeda release.
</summary>
</member>
<member name="M:BioFSharp.Mz.XScoring.modCorrection(System.Int32)">
<summary>
 Correction factor applided to the andromeda score based on the amount modifications.
 Values are taken from the original andromeda release.
</summary>
</member>
<member name="M:BioFSharp.Mz.XScoring.mzCorrection(System.Double)">
<summary>
 Correction factor applided to the andromeda score based on the observed precursor Mz.
 Values are taken from the original andromeda release.
</summary>
</member>
<member name="M:BioFSharp.Mz.XScoring.scoreFuncImpl(System.Int32,System.Int32,System.Int32)">
<summary>
 Calculates the andromedaLike Score based on offered peaks n and matched peaks k, as well as the q value threshold topx
</summary>
</member>
<member name="M:BioFSharp.Mz.XScoring.lnProb(System.Double,System.Double,System.Double,System.Double)">
<summary>
 Helper function to calculate the AndromedaScore
</summary>
</member>
<member name="M:BioFSharp.Mz.XScoring.countMatches(System.Double,System.Double,System.Int32,System.Int32,System.Double,BioFSharp.Mz.PeakFamily{BioFSharp.Mz.TaggedPeak.TaggedPeak}[],BioFSharp.Mz.XScoring.RatedPeak[])">
<summary>
 Iterates theoSpect and counts the number of common peaks in ratedspectrum. A peak is considered as common if the mz value lies within a user defined matching tolerance. This procedure
 is carried out (qMostAbundandPepsMax-qMostAbundandPepsMin+1) times every time with a different qThreshold to account for peak intensity. A peak is counted as matching if it has
 less more abundant peaks in the neighbourhood than the current qThreshold.
</summary>
</member>
<member name="M:BioFSharp.Mz.XScoring.hasMatchingPeakPPM(System.Double,System.Double,BioFSharp.Mz.XScoring.RatedPeak[])">
<summary>
 Searches for a Peak in ratedSpectrum that matches the target mz (tarmz) within a certain tolerance expressed in parts per million of the tarmz, defined by mzMatchingTolerancePPM.
</summary>
</member>
<member name="M:BioFSharp.Mz.XScoring.hasMatchingPeakMZTol(System.Double,System.Double,BioFSharp.Mz.XScoring.RatedPeak[])">
<summary>
 Searches for a Peak in ratedSpectrum that matches the target mz (tarmz) within a certain tolerance defined by mzmatchingTolerance.
</summary>
</member>
<member name="M:BioFSharp.Mz.XScoring.predictOf``2(``0,``1,System.Double,Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.PeakFamily{BioFSharp.Mz.TaggedMass.TaggedMass}})">
<summary>
 Converts the fragmentIon ladder to a theoretical spectrum at a given charge state. Filters out all theoretical peaks, that lie
 outside the given lower and upperScanLimits.
</summary>
</member>
<member name="M:BioFSharp.Mz.XScoring.ratedSpectrum``1(System.Double,``0,System.Int32,System.Double,System.Double,System.Tuple{System.Double,System.Double}[])">
<summary>
 Applies the function &quot;moreIntensePeaksWithin&quot; to every peak in spectrumData, thus rating every peak by counting how many more abundant peaks
 are present within the given mzWindow (mzwindow/2 +/- ). Filters out peaks that are not within the scanLimits and show to have more abundand peaks than 
 defined by qMostAbundandpepsMax in their neighbourhood.
</summary>
</member>
<member name="M:BioFSharp.Mz.XScoring.moreIntensePeaksWithin(System.Double,System.Tuple{System.Double,System.Double}[],System.Int32)">
<summary>
 Counts how many peaks present in spectrum data within a a given mzWindow (mzwindow/2 +/- ) have a higher 
 intensity then the peak at position spectrumData.[peakIdx]. 
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchEngineGeneric.OrderedCache.generateTheoSpectra``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{``0,System.Double},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid},BioFSharp.Mz.Fragmentation.FragmentMasses}},Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},Microsoft.FSharp.Core.FSharpFunc{System.Double,Microsoft.FSharp.Core.FSharpFunc{System.Double,Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.SearchDB.LookUpResult{BioFSharp.AminoAcids.AminoAcid}}}},System.Collections.Generic.SortedList{System.Int64,Microsoft.FSharp.Collections.FSharpList{System.Tuple{BioFSharp.Mz.SearchDB.LookUpResult{BioFSharp.AminoAcids.AminoAcid},BioFSharp.Mz.Fragmentation.FragmentMasses}}},System.Collections.Generic.SortedList{System.Int64,Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.TheoreticalSpectra.TheoreticalSpectrum{BioFSharp.Mz.PeakFamily{BioFSharp.Mz.TaggedPeak.TaggedPeak}[]}}},System.Collections.Generic.SortedList{System.Int64,Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.TheoreticalSpectra.TheoreticalSpectrum{FSharp.Stats.Vector{System.Double}}}},System.Int32,System.Double,System.Double,System.Int64,System.Double,System.Double)">

</member>
<member name="M:BioFSharp.Mz.Quantification.HULQ.quantifyPeak(FSharp.Stats.Signal.PeakDetection.IdentifiedPeak)">

</member>
<member name="M:BioFSharp.Mz.Quantification.HULQ.calcArea(BioFSharp.Mz.Quantification.HULQ.FittedPeak)">

</member>
<member name="M:BioFSharp.Mz.Quantification.HULQ.integralOfEMGBy(System.Double,System.Double,System.Double,System.Double,System.Double)">

</member>
<member name="M:BioFSharp.Mz.Quantification.HULQ.integralOfGaussian(System.Double[])">

</member>
<member name="M:BioFSharp.Mz.Quantification.HULQ.selectModel(BioFSharp.Mz.Quantification.HULQ.FittedPeak[])">

</member>
<member name="M:BioFSharp.Mz.Quantification.HULQ.tryFitEMG(System.Double,System.Double,System.Double,System.Double,System.Double[],System.Double[])">

</member>
<member name="M:BioFSharp.Mz.Quantification.HULQ.tryFitGaussian(System.Double,System.Double,System.Double,System.Double[],System.Double[])">

</member>
<member name="M:BioFSharp.Mz.Quantification.HULQ.tryFit(BioFSharp.Mz.Quantification.HULQ.PeakModel,FSharp.Stats.Fitting.NonLinearRegression.SolverOptions,FSharp.Stats.Vector{System.Double},FSharp.Stats.Vector{System.Double},System.Double[],System.Double[])">

</member>
<member name="M:BioFSharp.Mz.Quantification.HULQ.getPeakBy(FSharp.Stats.Signal.PeakDetection.IdentifiedPeak[],System.Double)">
<summary>
 Return Option
</summary>
</member>
<member name="M:BioFSharp.Mz.Quantification.HULQ.createQuantifiedPeak(Microsoft.FSharp.Core.FSharpOption{BioFSharp.Mz.Quantification.HULQ.PeakModel},System.Double[],System.Double[],System.Double,System.Double,System.Double)">

</member>
<member name="M:BioFSharp.Mz.Quantification.HULQ.createFittedPeak(BioFSharp.Mz.Quantification.HULQ.PeakModel,System.Double[],System.Double,System.Double[])">

</member>
<member name="T:BioFSharp.Mz.Quantification.ParameterEstimation.EstimatedMoments">

</member>
<member name="T:BioFSharp.Mz.Quantification.ParameterEstimation.CaruanaEstimates">

</member>
<member name="M:BioFSharp.Mz.Quantification.ParameterEstimation.estimateMoments(FSharp.Stats.Signal.PeakDetection.IdentifiedPeak)">

</member>
<member name="M:BioFSharp.Mz.Quantification.ParameterEstimation.estimatePeakIntegrity(FSharp.Stats.Signal.PeakDetection.IdentifiedPeak)">

</member>
<member name="M:BioFSharp.Mz.Quantification.ParameterEstimation.methodOfMoments(FSharp.Stats.Signal.PeakDetection.IdentifiedPeak)">

</member>
<member name="M:BioFSharp.Mz.Quantification.ParameterEstimation.estTau(System.Double,System.Double)">

</member>
<member name="M:BioFSharp.Mz.Quantification.ParameterEstimation.skewOf(System.Double[],System.Double[])">

</member>
<member name="M:BioFSharp.Mz.Quantification.ParameterEstimation.skewBy(System.Double,System.Double,System.Double[],System.Double[])">

</member>
<member name="M:BioFSharp.Mz.Quantification.ParameterEstimation.varianceOf(System.Double[],System.Double[])">

</member>
<member name="M:BioFSharp.Mz.Quantification.ParameterEstimation.varianceBy(System.Double,System.Double[],System.Double[])">

</member>
<member name="M:BioFSharp.Mz.Quantification.ParameterEstimation.meanOfGaussian(System.Double[],System.Double[])">

</member>
<member name="M:BioFSharp.Mz.Quantification.ParameterEstimation.createEstimatedMoments(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">

</member>
<member name="M:BioFSharp.Mz.Quantification.ParameterEstimation.caruanaAlgorithm(System.Double[],System.Double[])">
<summary>
 Estimates the Parameters of a Gaussian function
 Warning: This method is sensitive to noisy data. If the noise level of the input parameters is high, smoothing of 
 the data is strongly recommended. 
</summary>
</member>
<member name="M:BioFSharp.Mz.Quantification.ParameterEstimation.gaussFunc(System.Double,System.Double,System.Double,System.Double)">
<summary>
 Returns the yValue of a gauss function at a given position x.
</summary>
</member>
<member name="M:BioFSharp.Mz.Quantification.ParameterEstimation.toFWHM(System.Double)">
<summary>
 Returns the full width at half maximum  
</summary>
</member>
<member name="M:BioFSharp.Mz.Quantification.ParameterEstimation.toSTD(System.Double)">
<summary>
 Returns the value of the standard deviation
</summary>
</member>
<member name="M:BioFSharp.Mz.Quantification.ParameterEstimation.createCaruanaEstimates(System.Double,System.Double,System.Double,System.Double)">

</member>
<member name="M:BioFSharp.Mz.Quantification.Integration.trapezEstAreaOf(System.Double[],System.Double[])">
<summary>
 Returns the estimated area beneath the data using the trapezoidal rule.
</summary>
</member>
<member name="M:BioFSharp.Mz.Quantification.Integration.trapezEstAreaOfUniform(System.Double[],System.Double[])">
<summary>
 Returns the estimated area beneath the data using the trapezoidal rule. Requires uniform spaced datapoints. 
</summary>
</member>
<member name="M:BioFSharp.Mz.FDRControl.getQValuesFromPEPValues(System.Double[])">
<summary>
 Calculates Q-Values from pep-values
</summary>
</member>
<member name="M:BioFSharp.Mz.FDRControl.getPEPValues``1(System.Double,Microsoft.FSharp.Core.FSharpFunc{``0,System.Double},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])">
<summary>
 Calculates pep values for target/decoy dataset
</summary>
</member>
<member name="M:BioFSharp.Mz.FDRControl.getPEPValueFunc``1(System.Double,Microsoft.FSharp.Core.FSharpFunc{``0,System.Double},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])">
<summary>
 Calculates pep value mapping funtion for target/decoy dataset
</summary>
</member>
<member name="M:BioFSharp.Mz.FDRControl.getQValues``1(System.Double,Microsoft.FSharp.Core.FSharpFunc{``0,System.Double},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])">
<summary>
 Calculates q values for target/decoy dataset
</summary>
</member>
<member name="M:BioFSharp.Mz.FDRControl.getQValueFunc``1(System.Double,Microsoft.FSharp.Core.FSharpFunc{``0,System.Double},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])">
<summary>
 Calculates q value mapping funtion for target/decoy dataset
</summary>
</member>
<member name="M:BioFSharp.Mz.FDRControl.binningFunction``1(System.Double,System.Double,Microsoft.FSharp.Core.FSharpFunc{``0,System.Double},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])">
<summary>
 returns scores, pep, q
</summary>
</member>
<member name="M:BioFSharp.Mz.FDRControl.getLogisticRegressionFunction(FSharp.Stats.Vector{System.Double},FSharp.Stats.Vector{System.Double},System.Double)">
<summary>
 for given data, creates a logistic regression model and returns a mapping function for this model
</summary>
</member>
<member name="T:BioFSharp.Mz.ProteinInference.ClassMap">
<summary>
 Contains all different classes with their associated proteins
</summary>
</member>
<member name="T:BioFSharp.Mz.ProteinInference.PeptideUsageForQuantification.MaximalInverse">
<summary>
 Use all available peptides which point to a part of the protein group
</summary>
</member>
<member name="T:BioFSharp.Mz.ProteinInference.PeptideUsageForQuantification.Maximal">
<summary>
 Use all available peptides which point to a protein group which includes the given protein group
</summary>
</member>
<member name="T:BioFSharp.Mz.ProteinInference.PeptideUsageForQuantification.Minimal">
<summary>
 Use only the best matching peptides
</summary>
</member>
<member name="T:BioFSharp.Mz.ProteinInference.PeptideUsageForQuantification">
<summary>
 Used to decide which peptides should be used for quantification of protein groups
</summary>
</member>
<member name="T:BioFSharp.Mz.ProteinInference.IntegrationStrictness.Maximal">
<summary>
 All protein groups stay intact
</summary>
</member>
<member name="T:BioFSharp.Mz.ProteinInference.IntegrationStrictness.Minimal">
<summary>
 Results in the minimal set of proteins which still can explain all measured peptides
</summary>
</member>
<member name="T:BioFSharp.Mz.ProteinInference.IntegrationStrictness">
<summary>
 Used to decide wether overlapping groups of proteins should be kept or merged
</summary>
</member>
<member name="T:BioFSharp.Mz.ProteinInference.InferredProteinClassItem`1">
<summary>
 For a group of proteins, contains information about all peptides that might be used for its quantification.
</summary>
</member>
<member name="T:BioFSharp.Mz.ProteinInference.ProteinClassItem`1">
<summary>
 For a single peptide Sequence, contains information about all proteins it might originate from and its evidence class.
</summary>
</member>
<member name="M:BioFSharp.Mz.ProteinInference.createProteinToPepSequencesMap``1(Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.ProteinInference.ProteinClassItem{``0}})">
<summary>
 Used to map the resulting protein groups to the sequences which are used for their quantification
</summary>
</member>
<member name="M:BioFSharp.Mz.ProteinInference.findAndIntegrate(Microsoft.FSharp.Collections.FSharpMap{BioFSharp.PeptideClassification.PeptideEvidenceClass,FSharpAux.BidirectionalDictionary{System.String,System.String}},BioFSharp.PeptideClassification.PeptideEvidenceClass,System.String[])">
<summary>
In a given class finds the overlap between the given and already added proteins and integrates them
</summary>
</member>
<member name="M:BioFSharp.Mz.ProteinInference.proteinGroupToString(System.String[])">
<summary>
 Appends a collection of proteins to a single string
</summary>
</member>
<member name="M:BioFSharp.Mz.ProteinInference.ClassMapModule.addGroup(Microsoft.FSharp.Collections.FSharpMap{BioFSharp.PeptideClassification.PeptideEvidenceClass,FSharpAux.BidirectionalDictionary{System.String,System.String}},BioFSharp.PeptideClassification.PeptideEvidenceClass,System.String[])">
<summary>
Adds the protein group to the given class in the memory map
</summary>
</member>
<member name="M:BioFSharp.Mz.ProteinInference.ClassMapModule.searchProts(Microsoft.FSharp.Collections.FSharpMap{BioFSharp.PeptideClassification.PeptideEvidenceClass,FSharpAux.BidirectionalDictionary{System.String,System.String}},System.String[])">
<summary>
Searches the Memory Map from highest ranking to lowest ranking class for any of the given proteinIds. If an overlap exists, returns its evidence class.
</summary>
</member>
<member name="M:BioFSharp.Mz.ProteinInference.ClassMapModule.empty">
<summary>
Creates a new empty ClassMap
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.ProteinInferenceOptions_FIDO.ProteinTruncationThreshold">
<summary>
 To speed up inference, proteins for which none of the associated peptides has a probability exceeding 
 the specified threshold will be assigned probability = 0. Default = 0.01.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.ProteinInferenceOptions_FIDO.NoSubgraphSplitting">
<summary>
 Do not approximate the posterior distribution by allowing large graph components to be split into subgraphs. 
 The splitting is done by duplicating peptides with low probabilities. Splitting continues until the number of 
 possible configurations of each subgraph is below 2^18.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.ProteinInferenceOptions_FIDO.GridSearchSpeed">
<summary>
 Apply the specified threshold to PSM, peptide and protein probabilities to obtain a faster estimate of the alpha, 
 beta and gamma parameters. Default = 0; Recommended when set = 0.2.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.ProteinInferenceOptions_FIDO.GridSearchDepth">
<summary>
 Setting the gridsearch-depth to 0 (fastest), 1 or 2 (slowest) controls how much computational time is required
 for the estimation of alpha, beta and gamma parameters for Fido. Default = 0.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.ProteinInferenceOptions_FIDO.QValueThreshold">
<summary>
 Q-value threshold that will be used in the computation of the MSE and ROC AUC score in the grid search.
 Recommended 0.05 for normal size datasets and 0.1 for big size datasets. Default = 0.1.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.ProteinInferenceOptions_FIDO.EmpricialQValue">
<summary>
 Estimate empirical p-values and q-values using target-decoy analysis.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.ProteinInferenceOptions_FIDO.Gamma">
<summary>
 Set Fido&apos;s prior probability that a protein is present in the sample. Set by grid search if not specified.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.ProteinInferenceOptions_FIDO.Beta">
<summary>
 Set Fido&apos;s probability of creation of a peptide from noise. Set by grid search if not specified.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.ProteinInferenceOptions_FIDO.Alpha">
<summary>
 Set Fido&apos;s probability with which a present protein emits an associated peptide. Set by grid search if not specified.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.ProteinInferenceOptions_FIDO.UseFido">
<summary>
 Use the Fido algorithm to infer protein probabilities.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.ProteinInferenceOptions_Percolator.ReportProteinDuplicates">
<summary>
 If multiple database proteins contain exactly the same set of peptides, then Percolator will randomly discard all but one of the proteins.
 If this option is set, then the IDs of these duplicated proteins will be reported as a comma-separated list.
 Not available for Fido.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.ProteinInferenceOptions_Percolator.ReportProteinFragments">
<summary>
 By default, if the peptides associated with protein A are a proper subset of the peptides associated with protein B, 
 then protein A is eliminated and all the peptides are considered as evidence for protein B. Note that this filtering is 
 done based on the complete set of peptides in the database, not based on the identified peptides in the search results.
 Alternatively, if this option is set and if all of the identified peptides associated with protein B are also associated 
 with protein A, then Percolator will report a comma-separated list of protein IDs, where the full-length protein B is first
 in the list and the fragment protein A is listed second. Not available for Fido.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.ProteinInferenceOptions_Percolator.Protease">
<summary>
 Type of enzyme &quot;no_enzyme&quot;,&quot;elastase&quot;,&quot;pepsin&quot;,&quot;proteinasek&quot;,&quot;thermolysin&quot;,&quot;trypsinp&quot;,&quot;chymotrypsin&quot;,&quot;lys-n&quot;,&quot;lys-c&quot;,
 &quot;arg-c&quot;,&quot;asp-n&quot;,&quot;glu-c&quot;,&quot;trypsin&quot; default=&quot;trypsin&quot;
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.ProteinInferenceOptions_Percolator.ProteinDecoyPattern">
<summary>
 Define the text pattern to identify decoy proteins in the database. Default = &quot;random_&quot;.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.ProteinInferenceOptions_Percolator.Fasta">
<summary>
 Use the picked protein-level FDR to infer protein probabilities. Provide the fasta file as the argument to this flag, 
 which will be used for protein grouping based on an in-silico digest. If no fasta file is available or protein grouping 
 is not desired, set this flag to &quot;auto&quot; to skip protein grouping.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.SVMTrainingOptions.SeedRndNumberGenerator">
<summary>
 Set seed of the random number generator. Default = 1
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.SVMTrainingOptions.ReportPerfomanceAfterIteration">
<summary>
 Report performance on test set each iteration.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.SVMTrainingOptions.QuickValidation">
<summary>
 Quicker execution by reduced internal cross-validation.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.SVMTrainingOptions.MaxIterations">
<summary>
 Maximal number of iterations
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.SVMTrainingOptions.FDR_PositiveExamples">
<summary>
 False discovery rate threshold to define positive examples in training. Set to testFDR if 0. Default = 0.01.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.SVMTrainingOptions.FDR_CrossValidation">
<summary>
 False discovery rate threshold for evaluating best cross validation result and reported end result. Default = 0.01.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.SVMTrainingOptions.Cneg">
<summary>
 Cneg, penalty for mistakes made on negative examples. Set by cross validation if not specified or if -p is not specified
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.SVMTrainingOptions.Cpos">
<summary>
 Cpos, penalty for mistakes made on positive examples. Set by cross validation if not specified.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.SVMTrainingOptions.SubsetTraining">
<summary>
 Only train an SVM on a subset of PSMs, and use the resulting score vector to evaluate the other PSMs. 
 Recommended when analyzing huge numbers (&gt;1 million) of PSMs. When set to 0, all PSMs are used for training as normal. Default = 0.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.SVMFeatureOptions.Klammer">
<summary>
 Retention time features are calculated as in Klammer et al. instead of with Elude. Only available if -D is set.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.SVMFeatureOptions.DOC">
<summary>
 nclude description of correct features, i.e. features describing the difference between the observed and 
 predicted isoelectric point, retention time and precursor mass. See this page for a more detailed description
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.SVMFeatureOptions.Override">
<summary>
 Override error check and do not fall back on default score vector in case of suspect score vector from SVM.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.SVMFeatureOptions.UnitNorm">
<summary>
 Use unit normalization [0-1] on features instead of standard deviation normalization.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.SVMFeatureOptions.IN_SVMWeights">
<summary>
 Read initial SVM weights from given file (one per line)
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.SVMFeatureOptions.OUT_SVMWeights">
<summary>
 Output final SVM weights to given file. (one per line)
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.FileOutputOptions.IncludeDecoysInXML">
<summary>
 Include decoys (PSMs, peptides and/or proteins) in the xml-output. Only available if -X is set.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.FileOutputOptions.POUTXML">
<summary>
 Path to xml-output (pout) file.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.FileOutputOptions.POUTTAB_Features">
<summary>
 Output computed features to given file in pin-tab format. Can be used to convert pin-xml to pin-tab.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.FileOutputOptions.POUTTAB_DecoyProteins">
<summary>
 Output tab delimited results for decoy proteins into a file (Only valid if option -A or -f is active)
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.FileOutputOptions.POUTTAB_Proteins">
<summary>
 Output tab delimited results of proteins to a file instead of stdout (Only valid if option -A or -f is active)
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.FileOutputOptions.POUTTAB_DecoyPSMs">
<summary>
 Output tab delimited results for decoy PSMs into a file
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.FileOutputOptions.POUTTAB_PSMs">
<summary>
 Output tab delimited results of PSMs to a file instead of stdout.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.FileOutputOptions.POUTTAB_DecoyPeptides">
<summary>
 Output tab delimited results for decoy peptides into a file (will be ignored if used with -U option).
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.FileOutputOptions.POUTTAB_Peptides">
<summary>
 Output tab delimited results of peptides to a file instead of stdout (will be ignored if used with -U option)
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.FileInputOptions.SkipSchemeValidation">
<summary>
 Skip validation of pin-xml input file against xml schema.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.FileInputOptions.DeprecatedPINXML">
<summary>
 Input file given in deprecated pin-xml format generated by e.g. sqt2pin with the -k option.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.FileInputOptions.PINXML">
<summary>
 Read percolator xml-input format (pin-xml) from standard input.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.FileInputOptions.PINTAB">
<summary>
 Read percolator tab-input format (pin-tab) from standard input.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.GeneralOptions.PostProcessing_TargetDecoyCompetition">
<summary>
Replace the mix-max method by target-decoy competition for assigning q-values and PEPs. 
 If the input PSMs are from separate target and decoy searches, Percolator&apos;s SVM scores 
 will be used to eliminate the lower scoring target or decoy PSM(s) of each scan+expMass combination. 
 If the input PSMs are detected to be coming from a concatenated search, this option will be turned on automatically, 
 as this is incompatible with the mix-max method. In case this detection fails, turn this option on explicitly.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.GeneralOptions.PostProcessing_MIXMAX">
<summary>
 Use the mix-max method to assign q-values and PEPs. Note that this option only has an 
 effect if the input PSMs are from separate target and decoy searches. This is the default setting.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.GeneralOptions.OnlyPSMs">
<summary>
 Do not remove redundant peptides, keep all PSMs and exclude peptide level probabilities.
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.GeneralOptions.VerbosityOfOutput">
<summary>
 Set verbosity of output: 0=no processing info, 5=all. Default = 2
</summary>
</member>
<member name="T:BioFSharp.Mz.PercolatorWrapper.Parameters.GeneralOptions.Help">
<summary>
 Display the help message
</summary>
</member>
<member name="M:BioFSharp.Mz.MSProcessing.workFlowToJson(System.String)">

</member>
<member name="M:BioFSharp.Mz.MSProcessing.workFlowToJSon(System.Collections.Generic.IEnumerable{BioFSharp.WorkflowLanguage.Definition.Operation{BioFSharp.Mz.MSProcessing.MSParameters}})">

</member>
<member name="M:BioFSharp.Mz.MSProcessing.operationOfJson(System.String)">

</member>
<member name="M:BioFSharp.Mz.MSProcessing.operationToJSon(BioFSharp.WorkflowLanguage.Definition.Operation{BioFSharp.Mz.MSProcessing.MSParameters})">

</member>
</members>
</doc>
