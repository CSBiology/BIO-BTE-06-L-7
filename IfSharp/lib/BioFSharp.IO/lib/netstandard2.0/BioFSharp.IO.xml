<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>BioFSharp.IO</name></assembly>
<members>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.IsWellAboveBG_red">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.IsWellAboveBG_green">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.BGSubSigError_red">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.BGSubSigError_green">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.BGSubSignal_red">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.BGSubSignal_green">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.IsSaturated_red">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.IsSaturated_green">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.BGMedianSignal_red">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.BGMedianSignal_green">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.BGMeanSignal_red">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.BGMeanSignal_green">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.MedianSignal_red">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.MeanSignal_red">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.MeanSignal_green">
<summary>
 Mean raw signal calculated from the intensities of all inlier pixels that represents the feature (after outlier pixel rejection). Also called the foreground signal.
</summary>
</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.ProcessedSigError_red">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.ProcessedSigError_green">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.ProcessedSignal_red">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.ProcessedSignal_green">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.IsFound_red">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.IsFound_green">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.PositionY">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.PositionX">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.ProbeName">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.ControlType">
<summary>
 Feature control type
</summary>
</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.ProbeUID">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.Col">
<summary>
 Feature location : column
</summary>
</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.Row">
<summary>
  Feature location : row
</summary>
</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.FeatureNum">
<summary>
 Feature number
</summary>
</member>
<member name="T:BioFSharp.IO.AgilentRaw.AgilentDataRaw">
<summary>
 Record type representing microarray Agilent raw data item 
</summary>
</member>
<member name="T:BioFSharp.IO.AgilentRaw.ProbeMapping">
<summary>
 Record type representing microarray probe mapping
</summary>
</member>
<member name="M:BioFSharp.IO.AgilentRaw.readAgilentDataRaw(System.String)">
<summary>
 Reads agilent raw data from file
</summary>
</member>
<member name="M:BioFSharp.IO.AgilentRaw.probeMappingReader(System.Char,System.Boolean,System.String)">
<summary>
 Reads probe mapping. Map: probe name -&gt; gene name 
</summary>
</member>
<member name="M:BioFSharp.IO.BlastNCBI.BlastWrapper.makeblastdb(System.String,System.Collections.Generic.IEnumerable{BioFSharp.IO.BlastNCBI.Parameters.MakeDbParams})">
<summary>
Creates a BLAST databse from given source/s
</summary>
</member>
<member name="M:BioFSharp.IO.BlastNCBI.BlastWrapper.blastP(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{BioFSharp.IO.BlastNCBI.Parameters.BlastParams})">
<summary>
Compares a protein query to a protein database
</summary>
</member>
<member name="M:BioFSharp.IO.BlastNCBI.BlastWrapper.blastN(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{BioFSharp.IO.BlastNCBI.Parameters.BlastParams})">
<summary>
Compares a nucleotide query to a nucleotide database
</summary>
</member>
<member name="T:BioFSharp.IO.BlastNCBI.BlastWrapper">
<summary>
A Wrapper to perform different BLAST tasks
</summary>
</member>
<member name="T:BioFSharp.IO.BlastNCBI">
<summary>
Blast Wrapper
</summary>
</member>
<member name="M:BioFSharp.IO.BlastQueries.fromFile(System.String)">
<summary>
 Reads BlastQuery from file.
</summary>
</member>
<member name="M:BioFSharp.IO.BlastQueries.fromFileEnumerator(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Reads BlastQuery from file enumerator 
</summary>
</member>
<member name="T:BioFSharp.IO.Clustal.Token">
<summary>
Tokens for lexer
</summary>
</member>
<member name="M:BioFSharp.IO.Clustal.toFileWithOverWrite(System.String,BioFSharp.Alignment.Alignment{BioFSharp.TaggedSequence.TaggedSequence{System.String,System.Char},BioFSharp.IO.Clustal.AlignmentInfo})">
<summary>
Writes an alignment to given path in clustal format. Overwrites file if it already exists
</summary>
</member>
<member name="M:BioFSharp.IO.Clustal.hasClustalFileHeader(BioFSharp.Alignment.Alignment{BioFSharp.TaggedSequence.TaggedSequence{System.String,System.Char},BioFSharp.IO.Clustal.AlignmentInfo})">
<summary>
Checks if the header of a parsed clustal alignment matches the clustal file conventions
</summary>
</member>
<member name="M:BioFSharp.IO.Clustal.ofFile(System.String)">
<summary>
Reads clustal File (W or Omega) of given path and creates an alignment out of it. Also reads in numbers at end of line. Those have to be filtered out afterwards if not needed.
</summary>
</member>
<member name="M:BioFSharp.IO.Clustal.parser(System.Collections.Generic.IEnumerable{BioFSharp.IO.Clustal.Token})">
<summary>
Builds the alignment out of the Tokensequence
</summary>
</member>
<member name="M:BioFSharp.IO.Clustal.tokenizer(System.Collections.Generic.IEnumerable{System.Char})">
<summary>
Feeds characters into lexer
</summary>
</member>
<member name="M:BioFSharp.IO.Clustal.lexer(BioFSharp.IO.Clustal.Token,System.Char,System.Boolean)">
<summary>
Evaluates what kind of information each character carries
</summary>
</member>
<member name="M:BioFSharp.IO.Clustal.readFile(System.String)">
<summary>
Reads file character by character
</summary>
</member>
<member name="T:BioFSharp.IO.Clustal">
<summary>
Contains functions for reading clustal alignment files
</summary>
</member>
<member name="T:BioFSharp.IO.FastA.FastaItem`1">
<summary>
 Fasta item contains header and sequence
</summary>
</member>
<member name="M:BioFSharp.IO.FastA.toString``2(Microsoft.FSharp.Core.FSharpFunc{``0,System.Char},System.Collections.Generic.IEnumerable{BioFSharp.IO.FastA.FastaItem{``1}})">
<summary>
 Converts FastaItem to string. Converter determines type of sequence by converting type -&gt; char
</summary>
</member>
<member name="M:BioFSharp.IO.FastA.writeAndAppend``2(Microsoft.FSharp.Core.FSharpFunc{``0,System.Char},System.String,System.Collections.Generic.IEnumerable{BioFSharp.IO.FastA.FastaItem{``1}})">
<summary>
 Writes FastaItem to file. Converter determines type of sequence by converting type -&gt; char. If file already exists the data is appended.
</summary>
</member>
<member name="M:BioFSharp.IO.FastA.write``2(Microsoft.FSharp.Core.FSharpFunc{``0,System.Char},System.String,System.Collections.Generic.IEnumerable{BioFSharp.IO.FastA.FastaItem{``1}})">
<summary>
 Writes FastaItem to file. Converter determines type of sequence by converting type -&gt; char. If file already exists the data is overwritten.
</summary>
</member>
<member name="M:BioFSharp.IO.FastA.writeToStreaam``2(Microsoft.FSharp.Core.FSharpFunc{``0,System.Char},System.IO.Stream,System.Collections.Generic.IEnumerable{BioFSharp.IO.FastA.FastaItem{``1}})">
<summary>
 Writes FastaItem to stream. Converter determines type of sequence by converting type -&gt; char
</summary>
</member>
<member name="M:BioFSharp.IO.FastA.fromGzipFile``1(Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IEnumerable{System.Char},``0},System.String)">
<summary>
 Reads FastaItem from gzFile. Converter determines type of sequence by converting seq&lt;char&gt; -&gt; type
</summary>
</member>
<member name="M:BioFSharp.IO.FastA.fromFile``1(Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IEnumerable{System.Char},``0},System.String)">
<summary>
 Reads FastaItem from file. Converter determines type of sequence by converting seq&lt;char&gt; -&gt; type
</summary>
</member>
<member name="M:BioFSharp.IO.FastA.fromFileEnumerator``1(Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IEnumerable{System.Char},``0},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Reads FastaItem from file. Converter determines type of sequence by converting seq&lt;char&gt; -&gt; type
</summary>
</member>
<member name="M:BioFSharp.IO.FastA.createFastaItem``1(System.String,``0)">
<summary>
 Creates with header line and sequence.
</summary>
</member>
<member name="T:BioFSharp.IO.FastQ.FastqItem`2">
<summary>
 FastqItem record contains header, sequence, qualityheader, qualitysequence of one entry
</summary>
</member>
<member name="M:BioFSharp.IO.FastQ.fromGzipFile``2(Microsoft.FSharp.Core.FSharpFunc{System.String,``0},Microsoft.FSharp.Core.FSharpFunc{System.String,``1},System.String)">
<summary>
 Reads FastqItem from GZip format file. Converter and qualityConverter determines type of sequence by converting seq&lt;char&gt; -&gt; type
</summary>
</member>
<member name="M:BioFSharp.IO.FastQ.fromFile``2(Microsoft.FSharp.Core.FSharpFunc{System.String,``0},Microsoft.FSharp.Core.FSharpFunc{System.String,``1},System.String)">
<summary>
 Reads FastqItem from FastQ format file. Converter and qualityConverter determines type of sequence by converting seq&lt;char&gt; -&gt; type
</summary>
</member>
<member name="M:BioFSharp.IO.FastQ.fromFileEnumerator``2(Microsoft.FSharp.Core.FSharpFunc{System.String,``0},Microsoft.FSharp.Core.FSharpFunc{System.String,``1},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Maps each lines from an entry to FastqItem
</summary>
</member>
<member name="M:BioFSharp.IO.FastQ.createFastqItem``2(System.String,``0,System.String,``1)">
<summary>
 Creates FastqItem with header line, sequence, qualityHeader and qualitySequence
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.GenBankItem`1.Sequence">
<summary>
The origin section of a GenBank file
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.GenBankItem`1.Features">
<summary>
All features contained in a GenBank file as seperate entries in a list
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.GenBankItem`1.References">
<summary>
All references contained in a GenBank file is seperate entries in a list.
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.GenBankItem`1.Value">
<summary>
Any value contained in the meta section of a GenBank file. 
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.GenBankItem`1">
<summary>
Represents any Item a GenBank file can contain as a union case. The result of parsing a genBank file will be a dictionary containing this type.
</summary>
</member>
<member name="P:BioFSharp.IO.GenBank.Feature.Qualifiers">
<summary>
A List of feature Qualifiers and their values associated with this feature
</summary>
</member>
<member name="P:BioFSharp.IO.GenBank.Feature.BaseSpan">
<summary>
Location of the feature in the sequence
</summary>
</member>
<member name="P:BioFSharp.IO.GenBank.Feature.Type">
<summary>
Type of the Feature
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.Feature">
<summary>
Represents a single feature from the FEATURES section of a GenBank file. Features can contain
Information about genes and gene products, as well as regions of biological significance reported in the sequence
</summary>
</member>
<member name="P:BioFSharp.IO.GenBank.FeatureQualifier.Value">
<summary>
Value of the Feature
</summary>
</member>
<member name="P:BioFSharp.IO.GenBank.FeatureQualifier.Name">
<summary>
Key of the Feature
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.FeatureQualifier">
<summary>
Represents a single feature Qualifier and its value from the FEATURES section of a Genbank file. Features can contain
Information about genes and gene products, as well as regions of biological significance reported in the sequence
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.CurrentSection">
<summary>
Functions for reading a GenBank file
Represents the possible sections in a GenBank file
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.tryGetItem``1(System.String,System.Collections.Generic.Dictionary{System.String,BioFSharp.IO.GenBank.GenBankItem{``0}})">
<summary>
Returns a GenBank item at the specified key, if it exists in the dictionary
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.getValues``1(System.Collections.Generic.Dictionary{System.String,BioFSharp.IO.GenBank.GenBankItem{``0}})">
<summary>
Returns all Values of the meta section of a Genbank file representation
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.getOrigin``1(System.Collections.Generic.Dictionary{System.String,BioFSharp.IO.GenBank.GenBankItem{``0}})">
<summary>
Returns the Origin of a GenBank file representation
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.getFeaturesWithType``1(System.String,System.Collections.Generic.Dictionary{System.String,BioFSharp.IO.GenBank.GenBankItem{``0}})">
<summary>
Returns all features of a specific type of a GenBank file representation
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.getFeatures``1(System.Collections.Generic.Dictionary{System.String,BioFSharp.IO.GenBank.GenBankItem{``0}})">
<summary>
Returns all features of a GenBank file representation
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.getReferences``1(System.Collections.Generic.Dictionary{System.String,BioFSharp.IO.GenBank.GenBankItem{``0}})">
<summary>
Returns all references of a GenBank file representation
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.parseFeatureQualifier(System.String)">
<summary>
returns an key value pair for a feature from an input string. If the input string does not contain an &quot;=&quot; sign, the value belongs
to the previous line and the function EXPLAIN THIS LATER
</summary>
</member>
<member name="P:BioFSharp.IO.GenBank.featureRegexPattern2">
<summary>
Regular expression for parsing a feature key,value pair that contains no value from a string
</summary>
</member>
<member name="P:BioFSharp.IO.GenBank.featureRegexPattern">
<summary>
Regular expression for parsing a feature key,value pair from a string
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.arrayIteriYield``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``0[])">
<summary>
Iterate over an array yielding the result of applying a function to each element in a sequence
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.Write.toFileWithOriginConverter``1(System.String,Microsoft.FSharp.Core.FSharpFunc{``0,System.Collections.Generic.IEnumerable{System.Char}},System.Collections.Generic.Dictionary{System.String,BioFSharp.IO.GenBank.GenBankItem{``0}})">
<summary>
creates a GenBank file at the specified path, taking a converter function for the origin sequence of the file 
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.Write.toFile``1(System.String,System.Collections.Generic.Dictionary{System.String,BioFSharp.IO.GenBank.GenBankItem{``0}})">
<summary>
creates a GenBank file at the specified path
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.Write.write``1(System.String,Microsoft.FSharp.Core.FSharpFunc{``0,System.Collections.Generic.IEnumerable{System.Char}},System.Collections.Generic.Dictionary{System.String,BioFSharp.IO.GenBank.GenBankItem{``0}})">
<summary>
creates a GenBank file at the specified path, taking a converter function for the origin sequence of the file 
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.Write.constructSeqs(System.String,System.String,System.Int32,System.Int32)">
<summary>
constructs a sequence of strings in the right formatting (including identation of the key and the position for splitting key/value in the file) 
from input key and value.
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.Write">
<summary>
Functions for writing a GenBank file  
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.Read.Token.Value">
<summary>
Represents the lines ranking lowest in hierarchy. These lines are idented and dont have a key. This union case indicates that the 
value contained belongs to the next highest ranking line in hierarchy.
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.Read.Token.Feature">
<summary>
Represents the lines ranking third in hierarchy. Features are only present in the features section of a GenBank file.
These lines are idented and dont have a key.
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.Read.Token.Member">
<summary>
Represents the lines ranking second in hierarchy. These lines are idented, but contain a key,value pair
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.Read.Token.Section">
<summary>
Represents the lines ranking highest in hierarchy. These lines are not idented, and are parsed as key,value pair
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.Read.Token">
<summary>
Token representing lines of a GenBank file for parsing purposes
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.Read.fromSeqWithOriginConverter``1(Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IEnumerable{System.Char},``0},System.Collections.Generic.IEnumerable{System.String})">
<summary>
Returns a dictionary containing GenBank items parsed from an input string sequence
taking a converter function for the origin sequence 
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.Read.fromSeq(System.Collections.Generic.IEnumerable{System.String})">
<summary>
Returns a dictionary containing GenBank items parsed from an input string sequence
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.Read.fromFileWithOriginConverter``1(Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IEnumerable{System.Char},``0},System.String)">
<summary>
Returns a dictionary containing GenBank items, that represents the GenBank file at the input path
taking a converter function for the origin sequence of the file 
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.Read.fromFile(System.String)">
<summary>
Returns a dictionary containing GenBank items, that represents the GenBank file at the input path
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.Read.parser``1(Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IEnumerable{System.Char},``0},System.Collections.Generic.IEnumerable{System.Tuple{BioFSharp.IO.GenBank.CurrentSection,BioFSharp.IO.GenBank.Read.Token}})">
<summary>
Iterates over an input sequence of tokens and adds the corresponding GenBankItems to a dictionary. The returned dictionary represents a GenBank file.
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.Read.tokenizer(System.Collections.Generic.IEnumerable{System.String})">
<summary>
Iterates over an input sequence of strings and returns a sequence containing the corresponding token for each entry.
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.Read.lexer(BioFSharp.IO.GenBank.CurrentSection,System.String)">
<summary>
Assigns a string to its corresponding token type.
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.Read.getCurrentSection(BioFSharp.IO.GenBank.CurrentSection,System.String)">
<summary>
Returns a CurrentSection depending on an input key. Returns the input currentSection if the key does not indicate that the section changes.
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.Read.isEmpty(System.String)">
<summary>
Retursn true if the input string is empty after being trimmed of whitespace, otherwise returns false
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.Read.isIdent(System.String)">
<summary>
Returns true if the input string is idented, otherwise returns false
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.Read.subStr(System.Int32,System.Int32,System.String)">
<summary>
Splits the input string at a specific position (pos) returns two substrings of it, one sarting at (start) and
ending at (pos), the other starting at (pos) and containing the rest of the string
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.Read">
<summary>
functions for parsing a GenBank file.
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.OriginConverters.Output.bioItemConverter``1(System.Collections.Generic.IEnumerable{``0})">
<summary>
converts the BioSeq to the 1 letter code representing the contained items
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.OriginConverters.Output.defaultConverter(System.Collections.Generic.IEnumerable{System.Char})">
<summary>
default converter. returns a sequence of characters
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.OriginConverters.Output">
<summary>
contains a collection of prebuilt converters for writing specific origin sequences 
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.OriginConverters.Input.peptideConverter(System.Collections.Generic.IEnumerable{System.Char})">
<summary>
converts the origin sequence into a BioSeq of amino acids
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.OriginConverters.Input.nucleotideConverter(System.Collections.Generic.IEnumerable{System.Char})">
<summary>
converts the origin sequence into a BioSeq of nucleotides
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.OriginConverters.Input.defaultConverter(System.Collections.Generic.IEnumerable{System.Char})">
<summary>
default converter that yields all characters of the origin sequence, skipping spaces.
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.OriginConverters.Input">
<summary>
contains a collection of prebuilt converters for parsing specific origin sequences 
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.OriginConverters">
<summary>
contains prebuilt converters for origin sequences in a gb file for both reading and writing
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank">
<summary>
functions for reading and writing GenBank files
</summary>
</member>
<member name="T:BioFSharp.IO.GFF3.GFFLine`1">
<summary>
represents all kinds of lines which can be present in a GFF3 file
</summary>
</member>
<member name="P:BioFSharp.IO.GFF3.GFFEntry.Supplement">
<summary>
additional supplement information about the feature (optional)
</summary>
</member>
<member name="P:BioFSharp.IO.GFF3.GFFEntry.Attributes">
<summary>
a semicolon-separated list of tag-value pairs, providing additional information about each feature
</summary>
</member>
<member name="P:BioFSharp.IO.GFF3.GFFEntry.Phase">
<summary>
for CDS features: indicates where the feature begins with reference to the reading frame
</summary>
</member>
<member name="P:BioFSharp.IO.GFF3.GFFEntry.Strand">
<summary>
the strand of the feature
</summary>
</member>
<member name="P:BioFSharp.IO.GFF3.GFFEntry.Score">
<summary>
the score of the feature; semantics are ill-defined
</summary>
</member>
<member name="P:BioFSharp.IO.GFF3.GFFEntry.EndPos">
<summary>
positive 1-based integer end coordinate, relative to the landmark given in column 1
</summary>
</member>
<member name="P:BioFSharp.IO.GFF3.GFFEntry.StartPos">
<summary>
positive 1-based integer start coordinate, relative to the landmark given in column 1
</summary>
</member>
<member name="P:BioFSharp.IO.GFF3.GFFEntry.Feature">
<summary>
feature, type or method; has to be a term from SO or SO accession number
</summary>
</member>
<member name="P:BioFSharp.IO.GFF3.GFFEntry.Source">
<summary>
program, organization or database where the sequence is derived from
</summary>
</member>
<member name="P:BioFSharp.IO.GFF3.GFFEntry.Seqid">
<summary>
name of sequence where the feature is located
</summary>
</member>
<member name="T:BioFSharp.IO.GFF3.GFFEntry">
<summary>
represents fields of one GFF3 entry line
</summary>
</member>
<member name="M:BioFSharp.IO.GFF3.getSequence``2(BioFSharp.IO.GFF3.GFFEntry,System.Collections.Generic.IEnumerable{BioFSharp.IO.GFF3.GFFLine{``0}})">
<summary>
if a FastA sequence is included this function searches the features corresponding sequence
</summary>
</member>
<member name="M:BioFSharp.IO.GFF3.write``2(Microsoft.FSharp.Core.FSharpFunc{``0,System.Char},System.String,System.Collections.Generic.IEnumerable{BioFSharp.IO.GFF3.GFFLine{``1}})">
<summary>
writes GFF lines to file. Hint: Use id as converter if no FASTA sequence is included.
</summary>
</member>
<member name="M:BioFSharp.IO.GFF3.writeOrAppend``2(Microsoft.FSharp.Core.FSharpFunc{``0,System.Char},System.String,System.Collections.Generic.IEnumerable{BioFSharp.IO.GFF3.GFFLine{``1}})">
<summary>
writesOrAppends GFF lines to file. Hint: Use id as converter if no FASTA sequence is included.
</summary>
</member>
<member name="M:BioFSharp.IO.GFF3.toString``2(Microsoft.FSharp.Core.FSharpFunc{``0,System.Char},System.Collections.Generic.IEnumerable{BioFSharp.IO.GFF3.GFFLine{``1}})">
<summary>
converts GFF lines to string sequence. Hint: Use id as converter if no FASTA sequence is included.
</summary>
</member>
<member name="M:BioFSharp.IO.GFF3.gFFEntrytoString(BioFSharp.IO.GFF3.GFFEntry)">
<summary>
converts a single GFF entry to a line (string) of a GFF file
</summary>
</member>
<member name="M:BioFSharp.IO.GFF3.relationshipSearch``1(System.Collections.Generic.IEnumerable{BioFSharp.IO.GFF3.GFFLine{``0}},System.String)">
<summary>
Searches for a term and gives a list of all features of which the searchterm is the mainfeature (ID) or a child of it (Parent).
</summary>
</member>
<member name="M:BioFSharp.IO.GFF3.sanityCheckWithSOTerm(System.String,System.String)">
<summary>
Validates GFF3 file. Prints all appearances of errors with line index. If no (SO)FA check is needed set &quot;&quot; as so_TermsPath.
</summary>
</member>
<member name="P:BioFSharp.IO.GFF3.directives">
<summary>
directives allowed in GFF3 format
</summary>
</member>
<member name="M:BioFSharp.IO.GFF3.SO_Terms(System.String)">
<summary>
SO_Terms which can be chosen for the feature field. Only these SO_Terms are valid
</summary>
</member>
<member name="M:BioFSharp.IO.GFF3.fromFileWithoutFasta(System.String)">
<summary>
if no information about Sequence is required or no Fasta is included you can use this function
</summary>
</member>
<member name="M:BioFSharp.IO.GFF3.fromFile``1(Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IEnumerable{System.Char},``0},System.String)">
<summary>
reads in a file and gives a GFFLine&lt;&apos;a&gt; list. If file contains a FastA sequence it is converted to FastA.FastaItem with given converter. (Use &apos;id&apos; as converter if no FastA is required).
</summary>
</member>
<member name="M:BioFSharp.IO.GFF3.addFastaSequence``2(System.Collections.Generic.IEnumerator{System.String},Microsoft.FSharp.Collections.FSharpList{BioFSharp.IO.GFF3.GFFLine{``0}},Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IEnumerable{System.Char},``0})">
<summary>
If there is a ##FASTA directive, all subsequent lines are transformed to seq&lt;FastA.FastaItem&lt;&apos;a&gt;&gt; and added to the previous parsed GFFLine&lt;&apos;a&gt; list. Converter determines type of sequence by converting seq&lt;char&gt; -&gt; type
</summary>
</member>
<member name="M:BioFSharp.IO.GFF3.parseStrToGFFEntry(System.String)">
<summary>
Converts a string into a GFFEntry type. If there are more than 9 fields an additional &quot;supplement&quot; field gets filled. If there are less than 9 only the supplement field gets filled with the whole line.
</summary>
</member>
<member name="M:BioFSharp.IO.GFF3.createGFFEntry(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
<summary>
Takes strings of each field and creates a GFFEntry type thereby converting the strings into desired types.        
</summary>
</member>
<member name="M:BioFSharp.IO.GFF3.innerTokenizer(System.String)">
<summary>
Separates every key-value pair of field &apos;attributes&apos; at &apos;;&apos;. Seperates key from value at &apos;=&apos; and separates values at &apos;,&apos;.
</summary>
</member>
<member name="M:BioFSharp.IO.GFF3.FastAHeaderParser.createGFF3OfFastA``2(System.Collections.Generic.IEnumerable{BioFSharp.IO.FastA.FastaItem{``0}})">
<summary>
 Takes a sequence of FastA items and transforms them into a sequence of GFF3 RNA and gene items. FastA headers have to be UniProt style.

 For Reference see: https://www.uniprot.org/help/fasta-headers
</summary>
</member>
<member name="M:BioFSharp.IO.GFF3.FastAHeaderParser.createGFF3OfFastAWithRegex``2(System.String,System.Collections.Generic.IEnumerable{BioFSharp.IO.FastA.FastaItem{``0}})">
<summary>
 Takes a sequence of FastA items and a regex pattern and transforms them into a sequence of GFF3 RNA items with decoy gene loci.
</summary>
</member>
<member name="T:BioFSharp.IO.GFF3.FastAHeaderParser">
<summary>
Parse FastA to GFF3
</summary>
</member>
<member name="T:BioFSharp.IO.GFF3">
<summary>
Contains functions for reading and writing GFF3 files
</summary>
</member>
<member name="T:BioFSharp.IO.Mgf.MgfEntry">
<summary>
 Represents 
</summary>
</member>
<member name="M:BioFSharp.IO.Mgf.mgfToString(BioFSharp.IO.Mgf.MgfEntry)">
<summary>
 Converts a MgfEntry to string.
 Use Seq.write to write to file. 
</summary>
</member>
<member name="M:BioFSharp.IO.Mgf.readMgf(System.String)">
<summary>
 Reads an mgf file into a collection of MgfEntries
</summary>
</member>
<member name="M:BioFSharp.IO.Mgf.tryParseTitle(System.String)">
<summary>
 Returns the retention time and precursor intensity from &apos;mgf-title&apos; string. Returns None if title does not contain the information
</summary>
</member>
<member name="M:BioFSharp.IO.Mgf.tryGetTitle(BioFSharp.IO.Mgf.MgfEntry)">
<summary>
 Returns the title string of a &apos;mgf-entry&apos;. Returns None if the information can&apos;t be optained
</summary>
</member>
<member name="M:BioFSharp.IO.Mgf.tryGetPrecursorCharges(BioFSharp.IO.Mgf.MgfEntry)">
<summary>
 Returns the precursor mass. Returns None if the information can&apos;t be optained
</summary>
</member>
<member name="M:BioFSharp.IO.Mgf.tryParseCharge(System.String)">
<summary>
 Returns the posible charge/charges in a list. Returns None if the information can&apos;t be optained
</summary>
</member>
<member name="M:BioFSharp.IO.Mgf.tryGetPrecursorMZ(BioFSharp.IO.Mgf.MgfEntry)">
<summary>
 Returns the precursor mz. Returns None if the information can&apos;t be optained
</summary>
</member>
<member name="M:BioFSharp.IO.Mgf.tryGetPrecursorMass(BioFSharp.IO.Mgf.MgfEntry)">
<summary>
 Returns the precursor mass. Returns None if the information can&apos;t be optained
</summary>
</member>
<member name="T:BioFSharp.IO.Mgf">
<summary>
 Mgf &lt;http://www.matrixscience.com/help/data_file_help.html&gt;`_ is a simple
 human-readable format for MS/MS data. It allows storing MS/MS peak lists and
 exprimental parameters.
</summary>
</member>
<member name="T:BioFSharp.IO.Newick.Token">
<summary>
Type used by the lexer
</summary>
</member>
<member name="M:BioFSharp.IO.Newick.toFile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Tuple{System.String,System.String}},System.String,BioFSharp.PhylTree.Node{``0})">
<summary>
Creates a NewickTree file of PhylTree. nodeConverter is used to split the distanceInfo and the name of a node, because they are parsed separately. First result of the tuple is name, second is distance.
</summary>
</member>
<member name="M:BioFSharp.IO.Newick.ofFile``1(Microsoft.FSharp.Core.FSharpFunc{System.String,``0},System.String)">
<summary>
Returns a PhylTree of file. Converter is used to create a distancevalue of a string
</summary>
</member>
<member name="M:BioFSharp.IO.Newick.parser``1(Microsoft.FSharp.Core.FSharpFunc{System.String,``0},System.Collections.Generic.IEnumerable{BioFSharp.IO.Newick.Token})">
<summary>
Parses a seq of tokens to a PhylTree
</summary>
</member>
<member name="M:BioFSharp.IO.Newick.readFile(System.String)">
<summary>
Read file as sequence of characters
</summary>
</member>
<member name="T:BioFSharp.IO.Newick">
<summary>
Contains functions for parsing phylogenetic trees in the Newick format
</summary>
</member>
<member name="T:BioFSharp.IO.Obo.OboTerm">
<summary>
 obo term record type
</summary>
</member>
<member name="M:BioFSharp.IO.Obo.parseOboTerms(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Parse Obo Terms [Term] from seq&lt;string&gt;
</summary>
</member>
<member name="M:BioFSharp.IO.Obo.parseSingleOboTerm(System.Collections.Generic.IEnumerator{System.String},System.String,System.String,System.String,System.String,System.String,Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{System.String},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{System.String},System.String)">
<summary>
 Parses a [term] item in a recusive function
</summary>
</member>
<member name="M:BioFSharp.IO.Obo.createOboTerm(System.String,System.String,System.String,System.String,System.String,Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{System.String},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{System.String},System.String)">
<summary>
 Creates an obo term record
</summary>
</member>
<member name="T:BioFSharp.IO.Obo">
<summary>
 Module to parse obo files to AdjacencyGraph
</summary>
</member>
<member name="M:BioFSharp.IO.ClustalOWrapper.ClustalOWrapper.AlignSequences(System.Collections.Generic.IEnumerable{BioFSharp.TaggedSequence.TaggedSequence{System.String,System.Char}},System.Collections.Generic.IEnumerable{BioFSharp.IO.ClustalOWrapper.Parameters.ClustalParams},Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
Runs clustalo tool with given sequences and parameters and returns an alignment
</summary>
</member>
<member name="M:BioFSharp.IO.ClustalOWrapper.ClustalOWrapper.AlignFromFile(BioFSharp.IO.ClustalOWrapper.Input,System.String,System.Collections.Generic.IEnumerable{BioFSharp.IO.ClustalOWrapper.Parameters.ClustalParams},Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
Runs clustalo tool with given input file paths and parameters and creates output file for given path
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.ClustalOWrapper">
<summary>
 A wrapper to perform Clustal Omega alignment tasks    
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Input.SequenceFileAndHMM">
<summary>
 Use this option to make a new multiple alignment of sequences from the input file and use the HMM as a guide (EPA).
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Input.SequenceFileAndProfile">
<summary>
 Use this option to add new sequences to an existing alignment.
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Input.TwoProfiles">
<summary>
Use this option to align two alignments (profiles) together.
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Input.SequenceFile">
<summary>
Use this option to make a multiple alignment from a set of sequences. A sequence file must contain more than one sequence (at least two sequences).
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Input">
<summary>
Specify the type of input and assign file path
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.ClustalParams.Miscallaneous">
<summary>
 Specify miscallaneous parameters
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.ClustalParams.Limits">
<summary>
 Specify limits parameters
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.ClustalParams.Iteration">
<summary>
 Specify iteration parameters
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.ClustalParams.Clustering">
<summary>
 Specify clustering parameters
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.ClustalParams.Output">
<summary>
 Specify output parameters
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.ClustalParams.Input">
<summary>
 Specify input parameters
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.ClustalParams">
<summary>
Collection of parameters for specifying clustalo alignment
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.MiscallaneousCustom.Force">
<summary>
 Force file overwriting
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.MiscallaneousCustom.LongVersion">
<summary>
 Print long version information and exit
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.MiscallaneousCustom.Version">
<summary>
 Print version information and exit
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.MiscallaneousCustom.VerboseLevel">
<summary>
 Verbose output (ranging from 0 [nonverbose,standard] to 3 [very verbose,everything above 3 is set to 3])
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.MiscallaneousCustom.Log">
<summary>
 Log all non-essential output to this file
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.MiscallaneousCustom.Threads">
<summary>
 Number of processors to use
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.MiscallaneousCustom.Auto">
<summary>
 Set options automatically (might overwrite some of your options)
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.MiscallaneousCustom">
<summary>
Optional, miscallaneous modifiers 
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.LimitsCustom.MaxSeqLength">
<summary>
 Maximum allowed sequence length
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.LimitsCustom.MaxSeqNumber">
<summary>
 Maximum allowed number of sequences
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.LimitsCustom">
<summary>
 Will exit early, if exceeded
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.IterationCustom.MaxHMMIterations">
<summary>
  Maximum number of HMM iterations
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.IterationCustom.MaxGuideTreeIterations">
<summary>
 Maximum guide tree iterations
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.IterationCustom.Iterations">
<summary>
 Number of (combined guide tree/HMM) iterations
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.IterationCustom">
<summary>
Specify maximum number of iterations for given step
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.OutputCustom.OutputOrderAsTree">
<summary>
 Aligned sequences are ordered according to guide tree instead of input order
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.OutputCustom.Wrap">
<summary>
	number of residues before line-wrap in output
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.OutputCustom.ResidueNumber">
<summary>
	in Clustal format print residue numbers (default no)
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.OutputCustom.Format">
<summary>
	MSA output file format (default: fasta)
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.OutputCustom">
<summary>
Optional modifiers for input
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.ClusteringCustom.PercentID">
<summary>
 convert distances into percent identities (default no)
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.ClusteringCustom.UseKimura">
<summary>
 Use Kimura distance correction for aligned sequences (default no)
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.ClusteringCustom.ClusteringOut">
<summary>
	Clustering output file
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.ClusteringCustom.ClusterSize">
<summary>
 Soft maximum of sequences in sub-clusters
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.ClusteringCustom.FullIter">
<summary>
Use full distance matrix for guide-tree calculation during iteration (mBed is default)
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.ClusteringCustom.Full">
<summary>
Use full distance matrix for guide-tree calculation (slow; mBed is default)
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.ClusteringCustom.GuideTreeOutput">
<summary>
Guide tree output file
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.ClusteringCustom.GuideTreeInput">
<summary>
Guide tree input file (skips distance computation and guide tree clustering step)
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.ClusteringCustom.DistanceMatrixOutput">
<summary>
Pairwise distance matrix output file
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.ClusteringCustom.DistanceMatrixInput">
<summary>
Pairwise distance matrix input file (skips distance computation)
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.ClusteringCustom">
<summary>
Optional modifiers to specify clustering
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.InputCustom.SeqType">
<summary>
Force a sequence type (default: auto)
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.InputCustom.IsProfile">
<summary>
Disable check if profile, force profile (default no)
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.InputCustom.Dealign">
<summary>
Dealign input sequences
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.InputCustom.Format">
<summary>
Forced sequence input file format (default: auto)
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.InputCustom">
<summary>
Optional modifiers for input
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.SeqType">
<summary>
Types of sequences
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.FileFormat.Vienna">
<summary>
Vienna file format
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.FileFormat.Stockholm">
<summary>
Stockholm file format
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.FileFormat.Selex">
<summary>
Selex file format
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.FileFormat.Phylip">
<summary>
Phylip file format
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.FileFormat.MSF">
<summary>
MSF file format
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.FileFormat.Clustal">
<summary>
Clustal file format
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.FileFormat.FastA">
<summary>
FastA file format
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters.FileFormat">
<summary>
Input file format
</summary>
</member>
<member name="M:BioFSharp.IO.ClustalOWrapper.Parameters.stringOfClustalParams(BioFSharp.IO.ClustalOWrapper.Parameters.ClustalParams)">
<summary>
Create argument string for clustal parameter
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper.Parameters">
<summary>
Contains modifier parameter type for Clustal Omega wrapper
</summary>
</member>
<member name="T:BioFSharp.IO.ClustalOWrapper">
<summary>
Wrapper and its helpers for Clustal Omega multiple alignment tools
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.PlatformInfos">
<summary>
Type Representation of SOFT `^Platforms` Entities
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSampleSpecifications.Sample_table_end">
<summary>
Indicates the end of the data table.
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSampleSpecifications.Sample_table_begin">
<summary>
Indicates the start of the data table.
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSampleSpecifications.Sample_tag_length">
<summary>
Use for SAGE submissions only.
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSampleSpecifications.Sample_tag_count">
<summary>
Use for SAGE submissions only.
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSampleSpecifications.Sample_type">
<summary>
Use for SAGE submissions only.
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSampleSpecifications.Sample_anchor">
<summary>
Use for SAGE submissions only.
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSampleSpecifications.Sample_geo_accession">
<summary>
Only use for performing�updates�to existing GEO records.
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSampleSpecifications.Sample_platform_id">
<summary>
&quot;Reference the Platform upon which this hybridization was performed. Reference the Platform accession number (GPLxxx) if the Platform already exists in GEO, or reference the ^Platform identifier if the Platform record is being batch submitted within the same SOFT file. To
identify the accession number of an existing commercial Platform in GEO, use the�FIND PLATFORM�tool.&quot;
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSampleSpecifications.Sample_description">
<summary>
&quot;Include any additional information not provided in the other fields, or paste in broad descriptions that cannot be easily dissected into the other fields.&quot;
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSampleSpecifications.Sample_data_processing">
<summary>
&quot;Provide details of how data in the VALUE column of your table were generated and calculated, i.e., normalization method, data selection procedures and parameters, transformation algorithm (e.g., MAS5.0), and scaling parameters. You can include as much text as you need to
thoroughly describe the processing procedures.&quot;
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSampleSpecifications.Sample_scan_protocol">
<summary>
&quot;Describe the scanning and image acquisition protocols, hardware,
and software. You can include as much text as you need to thoroughly
describe the protocol; it is strongly recommended that complete protocol descriptions are provided within your submission.&quot;
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSampleSpecifications.Sample_hyb_protocol">
<summary>
&quot;Describe the protocols used for hybridization, blocking and washing, and any post-processing steps such as staining. You can include as much text as you need to thoroughly describe the protocol; it is strongly recommended that complete protocol descriptions are provided within your submission.&quot;
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSampleSpecifications.Sample_label_protocol_ch">
<summary>
Describe the protocol used to label the extract. You can include as much text as you need to thoroughly describe the protocol; it is strongly recommended that complete protocol descriptions are provided within your submission.
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSampleSpecifications.Sample_label_ch">
<summary>
&quot;Specify the compound used to label the extract e.g., biotin, Cy3, Cy5, 33P.&quot;
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSampleSpecifications.Sample_extract_protocol_ch">
<summary>
Describe the protocol used to isolate the extract material. You can include as much text as you need to thoroughly describe the protocol; it is strongly recommended that complete protocol descriptions are provided within your submission.
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSampleSpecifications.Sample_molecule_ch">
<summary>
Specify the type of molecule that was extracted from the biological material.
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSampleSpecifications.Sample_growth_protocol_ch">
<summary>
Describe the conditions that were used to grow or maintain organisms or cells prior to extract preparation. You can include as much text as you need to thoroughly describe the protocol; it is strongly recommended that complete protocol descriptions are provided within your submission.
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSampleSpecifications.Sample_treatment_protocol_ch">
<summary>
Describe any treatments applied to the biological material prior to extract preparation. You can include as much text as you need to thoroughly describe the protocol; it is strongly recommended that complete protocol descriptions are provided within your submission.
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSampleSpecifications.Sample_biomaterial_provider_ch">
<summary>
&quot;Specify the name of the company, laboratory or person that provided the biological material.&quot;
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSampleSpecifications.Sample_characteristics_ch">
<summary>
&quot;Describe all available characteristics of the biological source,
including factors not necessarily under investigation. Provide in &apos;Tag: Value&apos; format, where &apos;Tag&apos; is a type of characteristic (e.g. &quot;&quot;gender&quot;&quot;, &quot;&quot;strain&quot;&quot;, &quot;&quot;tissue&quot;&quot;, &quot;&quot;developmental stage&quot;&quot;, &quot;&quot;tumor stage&quot;&quot;, etc), and &apos;Value&apos; is the value for each tag (e.g. &quot;&quot;female&quot;&quot;, &quot;&quot;129SV&quot;&quot;, &quot;&quot;brain&quot;&quot;, &quot;&quot;embryo&quot;&quot;, etc). Include as many characteristics
fields as necessary to thoroughly describe your Samples.&quot;
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSampleSpecifications.Sample_organism_ch">
<summary>
Identify the organism(s) from which the biological material was derived.
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSampleSpecifications.Sample_source_name_ch">
<summary>
&quot;Briefly identify the biological material and the experimental variable(s), e.g., vastus lateralis muscle, exercised, 60 min.&quot;
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSampleSpecifications.Sample_table">
<summary>
- Affymetrix CHP file name:&quot;If your processed data are CHP files,
you can reference the CHP file name in this field. If your manuscript discusses data processed by RMA or another algorithm, we recommend providing those values in the�table section. There is no need to specify the !Sample_platform_id when CHP files are supplied. All external
files should be zipped or tarred together with the SOFT file at time
of submission.&quot;- Tab-delimited table file name: &quot;If it is convenient
for you to generate, you can reference the name of an external tab-delimited table file (see format) in this field, rather than include the table in the !Sample_table_begin section. All external files should be zipped or tarred together with the SOFT file at time of submission.&quot;
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSampleSpecifications.Sample_supplementary_file">
<summary>
&quot;Examples of supplementary file types include original Affymetrix
CEL and EXP files, GenePix GPR files, and TIFF image files. Supplementary files should be zipped or tarred together with the SOFT file at
time of submission (do not include any sub-directories or sub-folders in your zip/tar archive). Provision of supplementary raw data files
facilitates the unambiguous interpretation of data and potential verification of conclusions as set forth in the MIAME guidelines.&quot;
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSampleSpecifications.Sample_title">
<summary>
&quot;Provide a unique title that describes this Sample. We suggest that you use the system [biomaterial]-[condition(s)]-[replicate number], e.g., Muscle_exercised_60min_rep2.&quot;
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSampleSpecifications.SAMPLE">
<summary>
Provide an identifier for this entity. This identifier is used only as an internal reference within a given file. The identifier will not appear on final GEO records.
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSeriesSpecifications.Series_geo_accession">
<summary>
Only use for performing�updates�to existing GEO records.
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSeriesSpecifications.Series_sample_id">
<summary>
&quot;Reference the Samples that make up this experiment. Reference the Sample accession numbers (GSMxxx) if the Samples already exists in GEO, or reference the ^Sample identifiers if they are being submitted
in the same file.&quot;
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSeriesSpecifications.Series_repeats_sample_list">
<summary>
&quot;List which Samples belong to each group, e.g.,�&quot;&quot;!Series_repeats_sample_list_1 = samA, samB&quot;&quot;!Series_repeats_sample_list_2 = samC, samD&quot;&quot;NOTE - this information is optional and does not appear in Series
records or downloads, but will be used to assemble corresponding GEO
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSeriesSpecifications.Series_repeats">
<summary>
&quot;Indicate the repeat type(s), e.g.,&quot;!Series_repeats_1 = biological replicate�!Series_repeats_2 = biological replicate&quot;NOTE - this information is optional and does not appear in Series records or downloads, but will be used to assemble corresponding GEO DataSet records.&quot;
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSeriesSpecifications.Series_variable_sample_list">
<summary>
&quot;List which Samples belong to each group, e.g.,&quot;&quot;!Series_variable_sample_list_1 = samA, samB�&quot;&quot;!Series_variable_sample_list_2 = samC, samD�&quot;&quot;NOTE - this information is optional and does not appear in Series records or downloads, but will be used to assemble corresponding GEO DataSet records.&quot;
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSeriesSpecifications.Series_variable_description">
<summary>
&quot;Describe each variable, e.g.,&quot;!Series_variable_description_1 = 2 months !Series_variable_description_2 = 12 months&quot;NOTE - this information is optional and does not appear in Series records or downloads, but will be used to assemble corresponding GEO DataSet records.&quot;
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSeriesSpecifications.Series_variable">
<summary>
&quot;Indicate the variable type(s) investigated in this study, e.g. !Series_variable_1 = age�!Series_variable_2 = age�&quot;NOTE - this information is optional and does not appear in Series records or downloads, but will be used to assemble corresponding GEO DataSet records.&quot;
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSeriesSpecifications.Series_contributor">
<summary>
&quot;List all people associated with this study.
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSeriesSpecifications.Series_web_link">
<summary>
Specify a Web link that directs users to supplementary information about the study. Please restrict to Web sites that you know are stable.
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSeriesSpecifications.Series_pubmed_id">
<summary>
&quot;Specify a valid PubMed identifier (PMID) that references a published article describing this study. Most commonly, this information is not available at the time of submission - it can be added later once the data are published.&quot;
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSeriesSpecifications.Series_overall_design">
<summary>
&quot;Provide a description of the experimental design. Indicate how many Samples are analyzed, if replicates are included, are there control and/or reference Samples, dye-swaps, etc.&quot;
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSeriesSpecifications.Series_summary">
<summary>
Summarize the goals and objectives of this study. The abstract from the associated publication may be suitable. You can include as much text as you need to thoroughly describe the study.
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSeriesSpecifications.Series_title">
<summary>
Provide a unique title that describes the overall study.
</summary>
</member>
<member name="T:BioFSharp.IO.SOFT.SOFTSeriesSpecifications.SERIES">
<summary>
Provide an identifier for this entity. This identifier is used only as an internal reference within a given file. The identifier will not appear on final GEO records.
</summary>
</member>
<member name="M:BioFSharp.IO.SOFT.fromSeriesFileEnumerator(System.Collections.Generic.IEnumerable{System.String})">
<summary>
Read SOFT SeriesInfo from a string representing a SOFT Series file
</summary>
</member>
<member name="M:BioFSharp.IO.SOFT.fromSeriesFile(System.String)">
<summary>
Read SOFT SeriesInfo from a SOFT series file
</summary>
</member>
<member name="M:BioFSharp.IO.FSIPrinters.prettyPrintGFF3``1(System.Collections.Generic.IEnumerable{BioFSharp.IO.GFF3.GFFLine{``0}})">
<summary>
print GFF3 formatted file as seen in the specifications.
</summary>
</member>
<member name="M:BioFSharp.IO.FSIPrinters.prettyPrintClustal(BioFSharp.Alignment.Alignment{BioFSharp.TaggedSequence.TaggedSequence{System.String,System.Char},BioFSharp.IO.Clustal.AlignmentInfo})">
<summary>
print Clustal formatted file as seen in the specifications.
</summary>
</member>
<member name="M:BioFSharp.IO.FSIPrinters.prettyPrintBioCollectionWithModifications``1(System.Collections.Generic.IEnumerable{``0})">
<summary>
print Biocollections in 6x10char blocks per line, preceeded by an index indicator
</summary>
</member>
<member name="M:BioFSharp.IO.FSIPrinters.prettyPrintBioCollection``1(System.Collections.Generic.IEnumerable{``0})">
<summary>
print Biocollections in 6x10char blocks per line, preceeded by an index indicator
</summary>
</member>
<member name="M:BioFSharp.IO.FSIPrinters.prettyPrintBioItemWithModifications``1(``0)">
<summary>
print BioItems by using symbols for AminoAcids and Nucleotides, and the name of Modifications in [brackets]
</summary>
</member>
<member name="M:BioFSharp.IO.FSIPrinters.prettyPrintBioItem``1(``0)">
<summary>
print BioItems by using symbols for AminoAcids and Nucleotides, and the name of Modifications in [brackets]
</summary>
</member>
<member name="T:BioFSharp.IO.FSIPrinters">
<summary>
Pretty printers for various custom types in the library
</summary>
</member>
</members>
</doc>
