<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>MzIO.Processing</name></assembly>
<members>
<member name="T:MzIO.Processing.RangeQuery">
<summary>
 Class used to save a value and its offset.
</summary>
</member>
<member name="M:MzIO.Processing.CSVReader.ReadNextAsync">
<summary>
 Read the next record from stream.
 Next record or null at EOF.
</summary>
</member>
<member name="M:MzIO.Processing.CSVReader.ReadNext">
<summary>
 Read the next record from stream.
 Next record or null at EOF.
</summary>
</member>
<member name="M:MzIO.Processing.CSVReader.ReadColumnHeaderIndex(System.IO.StreamReader,System.Char)">
<summary>
 Read the column names from first line.
</summary>
</member>
<member name="M:MzIO.Processing.CSVReader.ReadAll">
<summary>
 Read all records.
</summary>
</member>
<member name="M:MzIO.Processing.CSVRecord.getIntOrNull(System.String)">
<summary>
 Parse an int value.        
 Returns null if empty.
</summary>
</member>
<member name="M:MzIO.Processing.CSVRecord.ParseInt(System.String,System.String)">
<summary>
 Parse an int value.  
</summary>
</member>
<member name="M:MzIO.Processing.CSVRecord.ParseDouble(System.String,System.String)">
<summary>
 Parse an double value.    
</summary>
</member>
<member name="M:MzIO.Processing.CSVRecord.GetInt(System.String)">
<summary>
 Parse an int value.
</summary>
</member>
<member name="M:MzIO.Processing.CSVRecord.GetDoubleOrNull(System.String,System.String)">
<summary>
 Parse an double value.
 Returns NaN if value is &apos;nanValue&apos; or null if empty.
</summary>
</member>
<member name="M:MzIO.Processing.CSVRecord.GetDoubleArray(System.String,System.Char)">
<summary>
 Parse an double value list.
</summary>
</member>
<member name="M:MzIO.Processing.CSVRecord.GetDouble(System.String)">
<summary>
 Parse an double value. 
</summary>
</member>
<member name="M:MzIO.Processing.CSVRecord.GetBooleanOrNull(System.String,System.String,System.String)">
<summary>
 Parse a bool value.        
 Returns true if value is &apos;trueValue&apos;, false if value is &apos;falseValue&apos; or null.
</summary>
</member>
<member name="M:MzIO.Processing.CSVRecord.GetBoolean(System.String,System.String)">
<summary>
 Parse a bool value.
 Returns true if value is &apos;trueValue&apos; or false.
</summary>
</member>
<member name="M:MzIO.Processing.BinarySearch.Search``2(``0[],``1,Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1},System.Int32})">
<summary>
 Generates a IndexRange based on the given query.
</summary>
</member>
<member name="M:MzIO.Processing.BinarySearch.Search``2(``0[],``1,Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1},System.Int32},Microsoft.FSharp.Core.byref{Microsoft.FSharp.Core.FSharpOption{MzIO.Processing.IndexRange},Microsoft.FSharp.Core.ByRefKinds.InOut})">
<summary>
 Changes an existing IndexRange based on the given query  and tells if it worked or not.
</summary>
</member>
<member name="M:MzIO.Processing.BinarySearch.Search``2(MzIO.Commons.Arrays.IMzIOArray{``0},``1,Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1},System.Int32})">
<summary>
 Generates a IndexRange based on the given query and array.
</summary>
</member>
<member name="M:MzIO.Processing.BinarySearch.Search``2(MzIO.Commons.Arrays.IMzIOArray{``0},``1,Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1},System.Int32},Microsoft.FSharp.Core.byref{Microsoft.FSharp.Core.FSharpOption{MzIO.Processing.IndexRange},Microsoft.FSharp.Core.ByRefKinds.InOut})">
<summary>
 Generates a IndexRange based on the given query and array.
</summary>
</member>
<member name="T:MzIO.Processing.BinarySearch">
<summary>
 Contains several methods to search under different circumstances for data in IMzIOArray within a given range.
</summary>
</member>
<member name="M:MzIO.Processing.IndexRange.GetSourceIndex(System.Int32)">
<summary>
 Maps index to source array index.
</summary>
</member>
<member name="T:MzIO.Processing.IndexRange">
<summary>
 Class that makes sure that low and high value are working correctly.
</summary>
</member>
<member name="T:MzIO.Processing.SwathQuerySorting">
<summary>
 Class with a method to sort the SwathQueries based on the relationship of the targetMz values and retentionTime lock value.
</summary>
</member>
<member name="T:MzIO.Processing.SwathQuery">
<summary>
 Class which saves the target M/Z and range of retentiontime with an array of masses. 
 If the array of masses is empty, then the class cannot be created.
</summary>
</member>
<member name="T:MzIO.Processing.MzIOLinq.RtIndexEntrySorting">
<summary>
 Type that has the rules for sorting retention time index entries.
</summary>
</member>
<member name="M:MzIO.Processing.MzIOLinq.RtIndexEntry.TryCreateEntry(MzIO.Model.MassSpectrum,System.Int32,Microsoft.FSharp.Core.byref{MzIO.Processing.MzIOLinq.RtIndexEntry,Microsoft.FSharp.Core.ByRefKinds.InOut})">
<summary>
 Tries to create a RtIndexEntry based on mass spectrum and ms level.
</summary>
</member>
<member name="M:MzIO.Processing.MzIOLinq.RtIndexEntry.Search(MzIO.Commons.Arrays.IMzIOArray{MzIO.Processing.MzIOLinq.RtIndexEntry},MzIO.Processing.RangeQuery)">
<summary>
 Get all rt index entries by rt range.
</summary>
</member>
<member name="M:MzIO.Processing.MzIOLinq.RtIndexEntry.RtSearchCompare2``1(``0,MzIO.Processing.RangeQuery)">
<summary>
 Checks whether retention time lies within range of the query.
</summary>
</member>
<member name="M:MzIO.Processing.MzIOLinq.RtIndexEntry.RtSearchCompare1``1(MzIO.Processing.MzIOLinq.RtIndexEntry,MzIO.Processing.RangeQuery)">
<summary>
 Checks whether retention time lies within range of the query.
</summary>
</member>
<member name="M:MzIO.Processing.MzIOLinq.RtIndexEntry.RtSearch``1(MzIO.Commons.Arrays.IMzIOArray{``0},MzIO.Processing.RangeQuery)">
<summary>
 Get all peaks by rt range.
</summary>
</member>
<member name="M:MzIO.Processing.MzIOLinq.RtIndexEntry.MzSearchCompare``1(``0,MzIO.Processing.RangeQuery)">
<summary>
 Checks whether m/z lies within range of the query.
</summary>
</member>
<member name="M:MzIO.Processing.MzIOLinq.RtIndexEntry.MzSearch``1(MzIO.Commons.Arrays.IMzIOArray{``0},MzIO.Processing.RangeQuery)">
<summary>
 Get all peaks by mz range.
</summary>
</member>
<member name="M:MzIO.Processing.MzIOLinq.RtIndexEntry.MaxIntensity``1(System.Collections.Generic.IEnumerable{``0})">
<summary>
 Gets the peak at max intensity.
</summary>
</member>
<member name="M:MzIO.Processing.MzIOLinq.RtIndexEntry.ClosestRt``1(System.Collections.Generic.IEnumerable{``0},System.Double)">
<summary>
 Gets the peak closest to lock rt.
</summary>
</member>
<member name="M:MzIO.Processing.MzIOLinq.RtIndexEntry.ClosestMz``1(System.Collections.Generic.IEnumerable{``0},System.Double)">
<summary>
 Gets the peak closest to lock mz.
</summary>
</member>
<member name="M:MzIO.Processing.MzIOLinq.RtIndexEntry.AsPeak2D(MzIO.Binary.Peak1D,System.Double)">
<summary>
 Create Peak2D based on Peak1D and a retention time.
</summary>
</member>
<member name="T:MzIO.Processing.MzIOLinq.RtIndexEntry">
<summary>
 Connects retention times with spectrum ids.
</summary>
</member>
<member name="M:MzIO.Processing.MzIOLinq.IMzIODataReader.RtProfile(MzIO.IO.IMzIODataReader,MzIO.Commons.Arrays.IMzIOArray{MzIO.Processing.MzIOLinq.RtIndexEntry},MzIO.Processing.RangeQuery,MzIO.Processing.RangeQuery)">
<summary>
 Extract a rt profile for specified target mass and rt range.
 Mz range peak aggregation is closest lock mz.
 Profile array with index corresponding to continous mass spectra over rt range and mz range given.
</summary>
</member>
<member name="M:MzIO.Processing.MzIOLinq.IMzIODataReader.RtProfiles(MzIO.IO.IMzIODataReader,MzIO.Commons.Arrays.IMzIOArray{MzIO.Processing.MzIOLinq.RtIndexEntry},MzIO.Processing.RangeQuery,MzIO.Processing.RangeQuery[])">
<summary>
 Extract a rt profile matrix for specified target masses and rt range.
 Mz range peak aggregation is closest lock mz.
 Profile matrix with first index corresponds to continous mass spectra over rt range
 and second index corresponds to mz ranges given.
</summary>
</member>
<member name="M:MzIO.Processing.MzIOLinq.IMzIODataReader.BuildRtIndex(MzIO.IO.IMzIODataReader,System.String,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Builds an in memory retention time index of mass spectra ids.
</summary>
</member>
<member name="M:MzIO.Processing.MzIOLinq.IEnumerable`1.ItemAtMax``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``2})">
<summary>
 Find the first item at val function maximum value.
</summary>
</member>
<member name="M:MzIO.Processing.MzIOLinq.IEnumerable`1.ItemAtMin``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``2})">
<summary>
 Find the first item at val function mininum value.
</summary>
</member>
<member name="T:MzIO.Processing.MzIOLinq">
<summary>
Module that contains classes with methods to search, sort and group mass spectra based on their properties, e.g. ms level.
</summary>
</member>
<member name="M:MzIO.Processing.SwathIndexer.SwathIndexer.MzRangeCompare(MzIO.Binary.Peak1D,MzIO.Processing.RangeQuery)">
<summary>
 Checks whether M/Z value of Peak1D is within offset of RangeQuery or not.
</summary>
</member>
<member name="M:MzIO.Processing.SwathIndexer.SwathIndexer.GetMS2(MzIO.IO.IMzIODataReader,MzIO.Processing.SwathQuery,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{System.Collections.Generic.IEnumerable{MzIO.Binary.Peak1D},MzIO.Processing.RangeQuery},MzIO.Binary.Peak1D}})">
<summary>
 Creates a Peak2DArray based on the MzIOReader and SwathQuery.
</summary>
</member>
<member name="M:MzIO.Processing.SwathIndexer.SwathIndexer.GetClosestMz(System.Collections.Generic.IEnumerable{MzIO.Binary.Peak1D},MzIO.Processing.RangeQuery)">
<summary>
 The default mz range peak selector function.
</summary>
</member>
<member name="M:MzIO.Processing.SwathIndexer.SwathIndexer.Create(MzIO.IO.IMzIODataReader,System.String)">
<summary>
 Creates a SwathIndexer and SwathList based on a MzIOReader and a runID.
</summary>
</member>
<member name="T:MzIO.Processing.SwathIndexer.SwathIndexer">
<summary>
 Contains methods to create several swath based classes based on the entries in the files.
</summary>
</member>
<member name="M:MzIO.Processing.SwathIndexer.SwathWindowGroupingComparer.System-Collections-Generic-IEqualityComparer`1-Equals(MzIO.Processing.SwathIndexer.SwathWindow,MzIO.Processing.SwathIndexer.SwathWindow)">
<summary>
 Checks whether offset and target M/z values of the SwathWindows are equal or not.
</summary>
</member>
<member name="M:MzIO.Processing.SwathIndexer.SwathList.SearchCompare(MzIO.Processing.SwathIndexer.MSSwath,System.Double)">
<summary>
 Checks whether M/Z value of MSSwath is in the offset of the targetMz or not.
</summary>
</member>
<member name="M:MzIO.Processing.SwathIndexer.SwathList.SearchClosestTargetMz(MzIO.Processing.SwathQuery)">
<summary>
 Searches for the closest M/Z value in the SwathQuery.
</summary>
</member>
<member name="M:MzIO.Processing.SwathIndexer.SwathList.SearchAllTargetMz(System.Double)">
<summary>
 Searchs all M/Z values within offet of the target M/Z.
</summary>
</member>
<member name="M:MzIO.Processing.SwathIndexer.SwathList.CalcTargetMzDiffAbs(MzIO.Processing.SwathIndexer.MSSwath,MzIO.Processing.SwathQuery)">
<summary>
 Calculates the absolute diffrence between the M/Z of the MSSwath and the M/Z LockValue of the query.
</summary>
</member>
<member name="T:MzIO.Processing.SwathIndexer.SwathList">
<summary>
 Contains methods to search and sort MSSwath based on its M/z values.
</summary>
</member>
<member name="T:MzIO.Processing.SwathIndexer.MSSwathSortingComparer">
<summary>
 Compares the M/z low and heigh values of the MSSwaths.
</summary>
</member>
<member name="M:MzIO.Processing.SwathIndexer.MSSwath.SearchClosestRt(MzIO.Processing.SwathQuery)">
<summary>
 Tries to find the closes retentionTime in the query to the swathSpectra.
</summary>
</member>
<member name="M:MzIO.Processing.SwathIndexer.MSSwath.SearchAllRt(MzIO.Processing.SwathQuery)">
<summary>
 Gets all retentionTimes that are within the range of the offset of the retentionTime value of the swathSpectra.
</summary>
</member>
<member name="M:MzIO.Processing.SwathIndexer.MSSwath.RtRangeCompare(MzIO.Processing.SwathIndexer.SwathSpectrumEntry,MzIO.Processing.SwathQuery)">
<summary>
 Checks whether the retentionTimes of the SwathSpectrumEntries are bigger or smaller than the offsets.
</summary>
</member>
<member name="M:MzIO.Processing.SwathIndexer.MSSwath.CalcLockRtDiffAbs(MzIO.Processing.SwathIndexer.SwathSpectrumEntry,MzIO.Processing.SwathQuery)">
<summary>
 Calculates the absolute diffrence between the retentionTime of the swathSpectrum and the retentionTime LockValue of the query.
</summary>
</member>
<member name="T:MzIO.Processing.SwathIndexer.MSSwath">
<summary>
 Contains methods to calculate and search the closest retentionTime of the SwathSpectrumEntry.
</summary>
</member>
<member name="T:MzIO.Processing.SwathIndexer.SwathSpectrumSortingComparer">
<summary>
 Contains a method to compare the retentionTimes of two SwathSpectrumEntry classes.
</summary>
</member>
<member name="M:MzIO.Processing.SwathIndexer.SwathSpectrumEntry.TryCreateSwathSpectrum(MzIO.Model.MassSpectrum)">
<summary>
 Tries to create a SwathSpectrumEntry based on a MassSpectrum&apos;t corresponding retentionTime, M/Z values and isolationWindows.
</summary>
</member>
<member name="M:MzIO.Processing.SwathIndexer.SwathSpectrumEntry.Scan(System.Collections.Generic.IEnumerable{MzIO.Model.MassSpectrum})">
<summary>
 Creates a collection of SwathSpectrumEntries based on a collection of MassSpectra.
</summary>
</member>
<member name="T:MzIO.Processing.SwathIndexer.SwathSpectrumEntry">
<summary>
 Class which contains the target M/z value, its offset values and also the corresponding spectrumID and retentionTime.
</summary>
</member>
<member name="T:MzIO.Processing.SwathIndexer.SwathWindow">
<summary>
 Class which contains the target M/Z value and its offset values.
</summary>
</member>
<member name="T:MzIO.Processing.SwathIndexer">
<summary>
 Contains classes with methods to index the mass spectra and peak arrays for faster accession.
</summary>
</member>
<member name="M:MzIO.Processing.Query.getSwathXICsBy(MzIO.IO.IMzIODataReader,MzIO.Processing.SwathIndexer.SwathIndexer,MzIO.Processing.RangeQuery,MzIO.Processing.RangeQuery[],System.Double)">
<summary>
 Calcualtes  an array of Peak2D for specific m/z range.
</summary>
</member>
<member name="M:MzIO.Processing.Query.getSwathXics(MzIO.IO.IMzIODataReader,MzIO.Processing.SwathIndexer.SwathIndexer,MzIO.Processing.SwathQuery)">
<summary>
 Calcualtes  an array of Peak2D.
</summary>
</member>
<member name="M:MzIO.Processing.Query.getSwathIdx(MzIO.IO.IMzIODataReader,System.String)">
<summary>
 Creates a swath indexer.
</summary>
</member>
<member name="M:MzIO.Processing.Query.createSwathQuery(System.Double,MzIO.Processing.RangeQuery,MzIO.Processing.RangeQuery[])">
<summary>
 Creates a swath query.
</summary>
</member>
<member name="M:MzIO.Processing.Query.getXICs(MzIO.IO.IMzIODataReader,MzIO.Commons.Arrays.IMzIOArray{MzIO.Processing.MzIOLinq.RtIndexEntry},MzIO.Processing.RangeQuery,MzIO.Processing.RangeQuery[])">
<summary>
 Calculate XICs of retention time index entries and m/z ranges.
</summary>
</member>
<member name="M:MzIO.Processing.Query.getXIC(MzIO.IO.IMzIODataReader,MzIO.Commons.Arrays.IMzIOArray{MzIO.Processing.MzIOLinq.RtIndexEntry},MzIO.Processing.RangeQuery,MzIO.Processing.RangeQuery)">
<summary>
 Calculate XIC of retention time index entries and m/z range.
</summary>
</member>
<member name="M:MzIO.Processing.Query.getMS1RTIdx(MzIO.IO.IMzIODataReader,System.String)">
<summary>
 Creates list of retention time index entires.
</summary>
</member>
<member name="M:MzIO.Processing.Query.createRangeQuery(System.Double,System.Double)">
<summary>
 Creates range query with equivalent distances to high and low value.
</summary>
</member>
<member name="T:MzIO.Processing.Indexer.IndexedItemCollection`2">
<summary>
 Collection of IndexedItem array.
</summary>
</member>
<member name="T:MzIO.Processing.Indexer.IndexedItem`2">
<summary>
 Record that contains the key for a item.
</summary>
</member>
<member name="M:MzIO.Processing.Indexer.splitAdjacentByUpperBorder``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Core.FSharpFunc{MzIO.Processing.Indexer.IndexedItem{``0,``2}[],Microsoft.FSharp.Collections.FSharpList{``2}}}}},MzIO.Processing.Indexer.IndexedItem{``0,``2}[],``0[])">
<summary>
 Split the IndexedItemCollection above the given border.
</summary>
</member>
<member name="M:MzIO.Processing.Indexer.splitByAdjacentRanges``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Core.FSharpFunc{MzIO.Processing.Indexer.IndexedItem{``0,``2}[],Microsoft.FSharp.Collections.FSharpList{``2}}}}},MzIO.Processing.Indexer.IndexedItem{``0,``2}[],System.Tuple{``0,``0}[])">
<summary>
 Split the IndexedItemCollection within a range that are adjancted.
</summary>
</member>
<member name="M:MzIO.Processing.Indexer.getDataByRange``2(``0,``0,MzIO.Processing.Indexer.IndexedItem{``0,``1}[])">
<summary>
 Returns Lists of IndexedItems.Items which are greater than the first value and smaller than the second value of the range parameter
</summary>
</member>
<member name="M:MzIO.Processing.Indexer.walkTill``2(``0,System.Int32,Microsoft.FSharp.Collections.FSharpList{``1},MzIO.Processing.Indexer.IndexedItem{``0,``1}[])">
<summary>
 Walks a Array till the value of the Array element is greater or equal to the parameter &apos;upperborder&apos;
</summary>
</member>
<member name="M:MzIO.Processing.Indexer.mapConsBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Applies the f1 to every element in the list but the last element. The last element is used as a input parameter for f2.
 Returns a new Collection  
</summary>
</member>
<member name="M:MzIO.Processing.Indexer.sortedIdxItemCollection``2(Microsoft.FSharp.Core.FSharpFunc{``1,MzIO.Processing.Indexer.IndexedItem{``0,``1}},System.Collections.Generic.IEnumerable{``1})">
<summary>
 Returns a IndexedItemCollection sorted by the Index. The Index is generated by a function of type IndexedItemGenerator
</summary>
</member>
<member name="M:MzIO.Processing.Indexer.getItem``2(MzIO.Processing.Indexer.IndexedItem{``0,``1})">
<summary>
 Returns item of IndexedItem object.
</summary>
</member>
<member name="M:MzIO.Processing.Indexer.createIndexItemBy``2(``0,``1)">
<summary>
 Creates a IndexedItem object.
</summary>
</member>
<member name="T:MzIO.Processing.Indexer">
<summary>
 Contains functions to traverse collections and generate indexes for those.
</summary>
</member>
<member name="P:MzIO.Processing.MassSpectrum.createScanTimeRange">
<summary>
 Returns function which can be used to determine the range between the scanTime of two MassSpectra. 
</summary>
</member>
<member name="M:MzIO.Processing.MassSpectrum.initCreateLastRange``1(Microsoft.FSharp.Core.FSharpFunc{MzIO.Model.MassSpectrum,``0},``0,MzIO.Model.MassSpectrum)">
<summary>
 Returns Range theoretical Range between a real feature of the last MassSpectra and a type dependend infinityValue
</summary>
</member>
<member name="M:MzIO.Processing.MassSpectrum.initCreateRange``1(Microsoft.FSharp.Core.FSharpFunc{MzIO.Model.MassSpectrum,``0},MzIO.Model.MassSpectrum,MzIO.Model.MassSpectrum)">
<summary>
 Returns Range between two Features of two MassSpectra.  
</summary>
</member>
<member name="M:MzIO.Processing.MassSpectrum.createPrecursorMZIdxedMS(MzIO.Model.MassSpectrum)">
<summary>
 Returns a precursorMZ-indexed massSpectrum
</summary>
</member>
<member name="M:MzIO.Processing.MassSpectrum.getPrecursorMZ(MzIO.Model.MassSpectrum)">
<summary>
 Returns PrecursorMZ of MS2 spectrum
</summary>
</member>
<member name="M:MzIO.Processing.MassSpectrum.createScanTimeIdxedMS(MzIO.Model.MassSpectrum)">
<summary>
 Returns a msLevel-indexed massSpectrum
</summary>
</member>
<member name="M:MzIO.Processing.MassSpectrum.getScanTime(MzIO.Model.MassSpectrum)">
<summary>
 Returns the ScanTime (formerly: RetentionTime) of the MassSpectrum
</summary>
</member>
<member name="M:MzIO.Processing.MassSpectrum.createMsLevelIdxedMS(MzIO.Model.MassSpectrum)">
<summary>
 Returns a msLevel-indexed massSpectrum
</summary>
</member>
<member name="M:MzIO.Processing.MassSpectrum.getMsLevel(MzIO.Model.MassSpectrum)">
<summary>
 Returns the MsLevel of the MassSpectrum 
</summary>
</member>
<member name="M:MzIO.Processing.MassSpectrum.createIDIdxedMS(MzIO.Model.MassSpectrum)">
<summary>
 Returns a id-indexed massSpectrum
</summary>
</member>
<member name="M:MzIO.Processing.MassSpectrum.getID(MzIO.Model.MassSpectrum)">
<summary>
 Returns the ID of the MassSpectrum
</summary>
</member>
<member name="M:MzIO.Processing.MassSpectrum.getMassSpectrAsyncBy(MzIO.IO.IMzIODataReader,System.String)">
<summary>
 accesses the Header of the WiffFile referenced by the path
</summary>
</member>
<member name="M:MzIO.Processing.MassSpectrum.getMassSpectraBy(MzIO.IO.IMzIODataReader,System.String)">
<summary>
 accesses the Header of the WiffFile referenced by the path
</summary>
</member>
<member name="M:MzIO.Processing.PeakArray.createPeak1DArray(MzIO.Binary.BinaryDataCompressionType,MzIO.Binary.BinaryDataType,MzIO.Binary.BinaryDataType,System.Double[],System.Double[])">
<summary>
 Creates Peak1DArray of mzData array and intensityData Array
</summary>
</member>
<member name="M:MzIO.Processing.PeakArray.mzIntensityArrayOf(MzIO.Binary.Peak1DArray)">
<summary>
 Returns tuple of a mzData Array and intensityData Array of a peak1DArray
</summary>
</member>
<member name="M:MzIO.Processing.PeakArray.intensityDataOf(MzIO.Binary.Peak1DArray)">
<summary>
 Returns a intensityData Array of a peak1DArray
</summary>
</member>
<member name="M:MzIO.Processing.PeakArray.mzDataOf(MzIO.Binary.Peak1DArray)">
<summary>
 Returns a mzData Array of a peak1DArray
</summary>
</member>
<member name="M:MzIO.Processing.PeakArray.getPeak1DArray(MzIO.IO.IMzIODataReader,System.String)">
<summary>
 Returns a MzIO.Binary.Peak1DArray
</summary>
</member>
</members>
</doc>
